import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Unsupervised learner for implementing neighbor searches.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestNeighbors.html
 */
export declare class NearestNeighbors {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: NearestNeighborsOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the nearest neighbors estimator from the training dataset.
     */
    fit(opts: NearestNeighborsFitOptions): Promise<any>;
    /**
      Find the K-neighbors of a point.
  
      Returns indices of and distances to the neighbors of each point.
     */
    kneighbors(opts: NearestNeighborsKneighborsOptions): Promise<NDArray[]>;
    /**
      Compute the (weighted) graph of k-Neighbors for points in X.
     */
    kneighbors_graph(opts: NearestNeighborsKneighborsGraphOptions): Promise<any[]>;
    /**
      Find the neighbors within a given radius of a point or points.
  
      Return the indices and distances of each point from the dataset lying in a ball with size radius around the points of the query array. Points lying on the boundary are included in the results.
  
      The result points are not necessarily sorted by distance to their query point.
     */
    radius_neighbors(opts: NearestNeighborsRadiusNeighborsOptions): Promise<any>;
    /**
      Compute the (weighted) graph of Neighbors for points in X.
  
      Neighborhoods are restricted the points at a distance lower than radius.
     */
    radius_neighbors_graph(opts: NearestNeighborsRadiusNeighborsGraphOptions): Promise<any[]>;
    /**
      Metric used to compute distances to neighbors.
     */
    get effective_metric_(): Promise<string>;
    /**
      Parameters for the metric used to compute distances to neighbors.
     */
    get effective_metric_params_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Number of samples in the fitted data.
     */
    get n_samples_fit_(): Promise<number>;
}
export interface NearestNeighborsOptions {
    /**
      Number of neighbors to use by default for kneighbors queries.
  
      @defaultValue `5`
     */
    n_neighbors?: number;
    /**
      Range of parameter space to use by default for radius_neighbors queries.
  
      @defaultValue `1`
     */
    radius?: number;
    /**
      Algorithm used to compute the nearest neighbors:
  
      @defaultValue `'auto'`
     */
    algorithm?: 'auto' | 'ball_tree' | 'kd_tree' | 'brute';
    /**
      Leaf size passed to BallTree or KDTree.  This can affect the speed of the construction and query, as well as the memory required to store the tree.  The optimal value depends on the nature of the problem.
  
      @defaultValue `30`
     */
    leaf_size?: number;
    /**
      Metric to use for distance computation. Default is “minkowski”, which results in the standard Euclidean distance when p = 2. See the documentation of scipy.spatial.distance and the metrics listed in distance_metrics for valid metric values.
  
      If metric is “precomputed”, X is assumed to be a distance matrix and must be square during fit. X may be a sparse graph, in which case only “nonzero” elements may be considered neighbors.
  
      If metric is a callable function, it takes two arrays representing 1D vectors as inputs and must return one value indicating the distance between those vectors. This works for Scipy’s metrics, but is less efficient than passing the metric name as a string.
  
      @defaultValue `'minkowski'`
     */
    metric?: string;
    /**
      Parameter for the Minkowski metric from sklearn.metrics.pairwise.pairwise_distances. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.
  
      @defaultValue `2`
     */
    p?: number;
    /**
      Additional keyword arguments for the metric function.
     */
    metric_params?: any;
    /**
      The number of parallel jobs to run for neighbors search. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
}
export interface NearestNeighborsFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface NearestNeighborsKneighborsOptions {
    /**
      The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Number of neighbors required for each sample. The default is the value passed to the constructor.
     */
    n_neighbors?: number;
    /**
      Whether or not to return the distances.
  
      @defaultValue `true`
     */
    return_distance?: boolean;
}
export interface NearestNeighborsKneighborsGraphOptions {
    /**
      The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor. For metric='precomputed' the shape should be (n_queries, n_indexed). Otherwise the shape should be (n_queries, n_features).
     */
    X?: any;
    /**
      Number of neighbors for each sample. The default is the value passed to the constructor.
     */
    n_neighbors?: number;
    /**
      Type of returned matrix: ‘connectivity’ will return the connectivity matrix with ones and zeros, in ‘distance’ the edges are distances between points, type of distance depends on the selected metric parameter in NearestNeighbors class.
  
      @defaultValue `'connectivity'`
     */
    mode?: 'connectivity' | 'distance';
}
export interface NearestNeighborsRadiusNeighborsOptions {
    /**
      The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor.
     */
    X?: any;
    /**
      Limiting distance of neighbors to return. The default is the value passed to the constructor.
     */
    radius?: number;
    /**
      Whether or not to return the distances.
  
      @defaultValue `true`
     */
    return_distance?: boolean;
    /**
      If True, the distances and indices will be sorted by increasing distances before being returned. If False, the results may not be sorted. If return_distance=False, setting sort_results=True will result in an error.
  
      @defaultValue `false`
     */
    sort_results?: boolean;
}
export interface NearestNeighborsRadiusNeighborsGraphOptions {
    /**
      The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Radius of neighborhoods. The default is the value passed to the constructor.
     */
    radius?: number;
    /**
      Type of returned matrix: ‘connectivity’ will return the connectivity matrix with ones and zeros, in ‘distance’ the edges are distances between points, type of distance depends on the selected metric parameter in NearestNeighbors class.
  
      @defaultValue `'connectivity'`
     */
    mode?: 'connectivity' | 'distance';
    /**
      If True, in each row of the result, the non-zero entries will be sorted by increasing distances. If False, the non-zero entries may not be sorted. Only used with mode=’distance’.
  
      @defaultValue `false`
     */
    sort_results?: boolean;
}
//# sourceMappingURL=NearestNeighbors.d.ts.map