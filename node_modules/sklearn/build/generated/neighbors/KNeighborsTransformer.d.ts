import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Transform X into a (weighted) graph of k nearest neighbors.

  The transformed data is a sparse graph as returned by kneighbors_graph.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsTransformer.html
 */
export declare class KNeighborsTransformer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: KNeighborsTransformerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the k-nearest neighbors transformer from the training dataset.
     */
    fit(opts: KNeighborsTransformerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: KNeighborsTransformerFitTransformOptions): Promise<SparseMatrix[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: KNeighborsTransformerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Find the K-neighbors of a point.
  
      Returns indices of and distances to the neighbors of each point.
     */
    kneighbors(opts: KNeighborsTransformerKneighborsOptions): Promise<NDArray[]>;
    /**
      Compute the (weighted) graph of k-Neighbors for points in X.
     */
    kneighbors_graph(opts: KNeighborsTransformerKneighborsGraphOptions): Promise<any[]>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: KNeighborsTransformerSetOutputOptions): Promise<any>;
    /**
      Compute the (weighted) graph of Neighbors for points in X.
     */
    transform(opts: KNeighborsTransformerTransformOptions): Promise<SparseMatrix[]>;
    /**
      The distance metric used. It will be same as the metric parameter or a synonym of it, e.g. ‘euclidean’ if the metric parameter set to ‘minkowski’ and p parameter set to 2.
     */
    get effective_metric_(): Promise<string>;
    /**
      Additional keyword arguments for the metric function. For most metrics will be same with metric_params parameter, but may also contain the p parameter value if the effective_metric_ attribute is set to ‘minkowski’.
     */
    get effective_metric_params_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Number of samples in the fitted data.
     */
    get n_samples_fit_(): Promise<number>;
}
export interface KNeighborsTransformerOptions {
    /**
      Type of returned matrix: ‘connectivity’ will return the connectivity matrix with ones and zeros, and ‘distance’ will return the distances between neighbors according to the given metric.
  
      @defaultValue `'distance'`
     */
    mode?: 'distance' | 'connectivity';
    /**
      Number of neighbors for each sample in the transformed sparse graph. For compatibility reasons, as each sample is considered as its own neighbor, one extra neighbor will be computed when mode == ‘distance’. In this case, the sparse graph contains (n_neighbors + 1) neighbors.
  
      @defaultValue `5`
     */
    n_neighbors?: number;
    /**
      Algorithm used to compute the nearest neighbors:
  
      @defaultValue `'auto'`
     */
    algorithm?: 'auto' | 'ball_tree' | 'kd_tree' | 'brute';
    /**
      Leaf size passed to BallTree or KDTree.  This can affect the speed of the construction and query, as well as the memory required to store the tree.  The optimal value depends on the nature of the problem.
  
      @defaultValue `30`
     */
    leaf_size?: number;
    /**
      Metric to use for distance computation. Default is “minkowski”, which results in the standard Euclidean distance when p = 2. See the documentation of scipy.spatial.distance and the metrics listed in distance_metrics for valid metric values.
  
      If metric is a callable function, it takes two arrays representing 1D vectors as inputs and must return one value indicating the distance between those vectors. This works for Scipy’s metrics, but is less efficient than passing the metric name as a string.
  
      Distance matrices are not supported.
  
      @defaultValue `'minkowski'`
     */
    metric?: string;
    /**
      Parameter for the Minkowski metric from sklearn.metrics.pairwise.pairwise_distances. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.
  
      @defaultValue `2`
     */
    p?: number;
    /**
      Additional keyword arguments for the metric function.
     */
    metric_params?: any;
    /**
      The number of parallel jobs to run for neighbors search. If -1, then the number of jobs is set to the number of CPU cores.
     */
    n_jobs?: number;
}
export interface KNeighborsTransformerFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface KNeighborsTransformerFitTransformOptions {
    /**
      Training set.
     */
    X?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface KNeighborsTransformerGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface KNeighborsTransformerKneighborsOptions {
    /**
      The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Number of neighbors required for each sample. The default is the value passed to the constructor.
     */
    n_neighbors?: number;
    /**
      Whether or not to return the distances.
  
      @defaultValue `true`
     */
    return_distance?: boolean;
}
export interface KNeighborsTransformerKneighborsGraphOptions {
    /**
      The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor. For metric='precomputed' the shape should be (n_queries, n_indexed). Otherwise the shape should be (n_queries, n_features).
     */
    X?: any;
    /**
      Number of neighbors for each sample. The default is the value passed to the constructor.
     */
    n_neighbors?: number;
    /**
      Type of returned matrix: ‘connectivity’ will return the connectivity matrix with ones and zeros, in ‘distance’ the edges are distances between points, type of distance depends on the selected metric parameter in NearestNeighbors class.
  
      @defaultValue `'connectivity'`
     */
    mode?: 'connectivity' | 'distance';
}
export interface KNeighborsTransformerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface KNeighborsTransformerTransformOptions {
    /**
      Sample data.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=KNeighborsTransformer.d.ts.map