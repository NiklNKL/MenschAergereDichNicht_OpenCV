import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Canonical Correlation Analysis, also known as “Mode B” PLS.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.CCA.html
 */
export declare class CCA {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: CCAOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit model to data.
     */
    fit(opts: CCAFitOptions): Promise<any>;
    /**
      Learn and apply the dimension reduction on the train data.
     */
    fit_transform(opts: CCAFitTransformOptions): Promise<NDArray[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: CCAGetFeatureNamesOutOptions): Promise<any>;
    /**
      Transform data back to its original space.
     */
    inverse_transform(opts: CCAInverseTransformOptions): Promise<NDArray[]>;
    /**
      Predict targets of given samples.
     */
    predict(opts: CCAPredictOptions): Promise<NDArray>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: CCAScoreOptions): Promise<number>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: CCASetOutputOptions): Promise<any>;
    /**
      Apply the dimension reduction.
     */
    transform(opts: CCATransformOptions): Promise<any>;
    /**
      The left singular vectors of the cross-covariance matrices of each iteration.
     */
    get x_weights_(): Promise<NDArray[]>;
    /**
      The right singular vectors of the cross-covariance matrices of each iteration.
     */
    get y_weights_(): Promise<NDArray[]>;
    /**
      The loadings of X.
     */
    get x_loadings_(): Promise<NDArray[]>;
    /**
      The loadings of Y.
     */
    get y_loadings_(): Promise<NDArray[]>;
    /**
      The projection matrix used to transform X.
     */
    get x_rotations_(): Promise<NDArray[]>;
    /**
      The projection matrix used to transform Y.
     */
    get y_rotations_(): Promise<NDArray[]>;
    /**
      The intercepts of the linear model such that Y is approximated as Y = X @ coef_ + intercept_.
     */
    get intercept_(): Promise<NDArray>;
    /**
      Number of iterations of the power method, for each component.
     */
    get n_iter_(): Promise<any[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface CCAOptions {
    /**
      Number of components to keep. Should be in [1, min(n_samples, n_features, n_targets)].
  
      @defaultValue `2`
     */
    n_components?: number;
    /**
      Whether to scale X and Y.
  
      @defaultValue `true`
     */
    scale?: boolean;
    /**
      The maximum number of iterations of the power method.
  
      @defaultValue `500`
     */
    max_iter?: number;
    /**
      The tolerance used as convergence criteria in the power method: the algorithm stops whenever the squared norm of u_i - u_{i-1} is less than tol, where u corresponds to the left singular vector.
  
      @defaultValue `0.000001`
     */
    tol?: number;
    /**
      Whether to copy X and Y in fit before applying centering, and potentially scaling. If False, these operations will be done inplace, modifying both arrays.
  
      @defaultValue `true`
     */
    copy?: boolean;
}
export interface CCAFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of predictors.
     */
    X?: ArrayLike[];
    /**
      Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.
     */
    Y?: ArrayLike;
}
export interface CCAFitTransformOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of predictors.
     */
    X?: ArrayLike[];
    /**
      Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.
     */
    y?: ArrayLike[];
}
export interface CCAGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface CCAInverseTransformOptions {
    /**
      New data, where n_samples is the number of samples and n_components is the number of pls components.
     */
    X?: ArrayLike[];
    /**
      New target, where n_samples is the number of samples and n_components is the number of pls components.
     */
    Y?: ArrayLike[];
}
export interface CCAPredictOptions {
    /**
      Samples.
     */
    X?: ArrayLike[];
    /**
      Whether to copy X and Y, or perform in-place normalization.
  
      @defaultValue `true`
     */
    copy?: boolean;
}
export interface CCAScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface CCASetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface CCATransformOptions {
    /**
      Samples to transform.
     */
    X?: ArrayLike[];
    /**
      Target vectors.
     */
    Y?: ArrayLike[];
    /**
      Whether to copy X and Y, or perform in-place normalization.
  
      @defaultValue `true`
     */
    copy?: boolean;
}
//# sourceMappingURL=CCA.d.ts.map