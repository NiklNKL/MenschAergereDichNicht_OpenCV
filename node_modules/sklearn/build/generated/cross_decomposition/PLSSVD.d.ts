import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Partial Least Square SVD.

  This transformer simply performs a SVD on the cross-covariance matrix X'Y. It is able to project both the training data X and the targets Y. The training data X is projected on the left singular vectors, while the targets are projected on the right singular vectors.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.PLSSVD.html
 */
export declare class PLSSVD {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: PLSSVDOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit model to data.
     */
    fit(opts: PLSSVDFitOptions): Promise<any>;
    /**
      Learn and apply the dimensionality reduction.
     */
    fit_transform(opts: PLSSVDFitTransformOptions): Promise<ArrayLike>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: PLSSVDGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: PLSSVDSetOutputOptions): Promise<any>;
    /**
      Apply the dimensionality reduction.
     */
    transform(opts: PLSSVDTransformOptions): Promise<ArrayLike>;
    /**
      The left singular vectors of the SVD of the cross-covariance matrix. Used to project X in transform.
     */
    get x_weights_(): Promise<NDArray[]>;
    /**
      The right singular vectors of the SVD of the cross-covariance matrix. Used to project X in transform.
     */
    get y_weights_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface PLSSVDOptions {
    /**
      The number of components to keep. Should be in [1, min(n_samples, n_features, n_targets)].
  
      @defaultValue `2`
     */
    n_components?: number;
    /**
      Whether to scale X and Y.
  
      @defaultValue `true`
     */
    scale?: boolean;
    /**
      Whether to copy X and Y in fit before applying centering, and potentially scaling. If False, these operations will be done inplace, modifying both arrays.
  
      @defaultValue `true`
     */
    copy?: boolean;
}
export interface PLSSVDFitOptions {
    /**
      Training samples.
     */
    X?: ArrayLike[];
    /**
      Targets.
     */
    Y?: ArrayLike;
}
export interface PLSSVDFitTransformOptions {
    /**
      Training samples.
     */
    X?: ArrayLike[];
    /**
      Targets.
     */
    y?: ArrayLike;
}
export interface PLSSVDGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface PLSSVDSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface PLSSVDTransformOptions {
    /**
      Samples to be transformed.
     */
    X?: ArrayLike[];
    /**
      Targets.
     */
    Y?: ArrayLike;
}
//# sourceMappingURL=PLSSVD.d.ts.map