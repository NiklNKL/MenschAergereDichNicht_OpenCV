import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Soft Voting/Majority Rule classifier for unfitted estimators.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.VotingClassifier.html
 */
export declare class VotingClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: VotingClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the estimators.
     */
    fit(opts: VotingClassifierFitOptions): Promise<any>;
    /**
      Return class labels or probabilities for each estimator.
  
      Return predictions for X for each estimator.
     */
    fit_transform(opts: VotingClassifierFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: VotingClassifierGetFeatureNamesOutOptions): Promise<any>;
    /**
      Predict class labels for X.
     */
    predict(opts: VotingClassifierPredictOptions): Promise<ArrayLike>;
    /**
      Compute probabilities of possible outcomes for samples in X.
     */
    predict_proba(opts: VotingClassifierPredictProbaOptions): Promise<ArrayLike[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: VotingClassifierScoreOptions): Promise<number>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: VotingClassifierSetOutputOptions): Promise<any>;
    /**
      Return class labels or probabilities for X for each estimator.
     */
    transform(opts: VotingClassifierTransformOptions): Promise<any>;
    /**
      The collection of fitted sub-estimators as defined in estimators that are not ‘drop’.
     */
    get estimators_(): Promise<any>;
    /**
      Attribute to access any fitted sub-estimators by name.
     */
    get named_estimators_(): Promise<any>;
    /**
      Transformer used to encode the labels during fit and decode during prediction.
     */
    get le_(): Promise<any>;
    /**
      The classes labels.
     */
    get classes_(): Promise<NDArray>;
    /**
      Names of features seen during fit. Only defined if the underlying estimators expose such an attribute when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface VotingClassifierOptions {
    /**
      Invoking the fit method on the VotingClassifier will fit clones of those original estimators that will be stored in the class attribute self.estimators_. An estimator can be set to 'drop' using set_params.
     */
    estimators?: any;
    /**
      If ‘hard’, uses predicted class labels for majority rule voting. Else if ‘soft’, predicts the class label based on the argmax of the sums of the predicted probabilities, which is recommended for an ensemble of well-calibrated classifiers.
  
      @defaultValue `'hard'`
     */
    voting?: 'hard' | 'soft';
    /**
      Sequence of weights (float or int) to weight the occurrences of predicted class labels (hard voting) or class probabilities before averaging (soft voting). Uses uniform weights if None.
     */
    weights?: ArrayLike;
    /**
      The number of jobs to run in parallel for fit. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Affects shape of transform output only when voting=’soft’ If voting=’soft’ and flatten_transform=True, transform method returns matrix with shape (n_samples, n_classifiers * n_classes). If flatten_transform=False, it returns (n_classifiers, n_samples, n_classes).
  
      @defaultValue `true`
     */
    flatten_transform?: boolean;
    /**
      If True, the time elapsed while fitting will be printed as it is completed.
  
      @defaultValue `false`
     */
    verbose?: boolean;
}
export interface VotingClassifierFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Note that this is supported only if all underlying estimators support sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface VotingClassifierFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: NDArray;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface VotingClassifierGetFeatureNamesOutOptions {
    /**
      Not used, present here for API consistency by convention.
     */
    input_features?: any;
}
export interface VotingClassifierPredictOptions {
    /**
      The input samples.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface VotingClassifierPredictProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface VotingClassifierScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface VotingClassifierSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface VotingClassifierTransformOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=VotingClassifier.d.ts.map