import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  An extra-trees regressor.

  This class implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html
 */
export declare class ExtraTreesRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: ExtraTreesRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Apply trees in the forest to X, return leaf indices.
     */
    apply(opts: ExtraTreesRegressorApplyOptions): Promise<NDArray[]>;
    /**
      Return the decision path in the forest.
     */
    decision_path(opts: ExtraTreesRegressorDecisionPathOptions): Promise<SparseMatrix[]>;
    /**
      Build a forest of trees from the training set (X, y).
     */
    fit(opts: ExtraTreesRegressorFitOptions): Promise<any>;
    /**
      Predict regression target for X.
  
      The predicted regression target of an input sample is computed as the mean predicted regression targets of the trees in the forest.
     */
    predict(opts: ExtraTreesRegressorPredictOptions): Promise<NDArray>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: ExtraTreesRegressorScoreOptions): Promise<number>;
    /**
      The child estimator template used to create the collection of fitted sub-estimators.
     */
    get estimator_(): Promise<any>;
    /**
      The collection of fitted sub-estimators.
     */
    get estimators_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of outputs.
     */
    get n_outputs_(): Promise<number>;
    /**
      Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when oob_score is True.
     */
    get oob_score_(): Promise<number>;
    /**
      Prediction computed with out-of-bag estimate on the training set. This attribute exists only when oob_score is True.
     */
    get oob_prediction_(): Promise<NDArray>;
}
export interface ExtraTreesRegressorOptions {
    /**
      The number of trees in the forest.
  
      @defaultValue `100`
     */
    n_estimators?: number;
    /**
      The function to measure the quality of a split. Supported criteria are “squared_error” for the mean squared error, which is equal to variance reduction as feature selection criterion and minimizes the L2 loss using the mean of each terminal node, “friedman_mse”, which uses mean squared error with Friedman’s improvement score for potential splits, “absolute_error” for the mean absolute error, which minimizes the L1 loss using the median of each terminal node, and “poisson” which uses reduction in Poisson deviance to find splits. Training using “absolute_error” is significantly slower than when using “squared_error”.
  
      @defaultValue `'squared_error'`
     */
    criterion?: 'squared_error' | 'absolute_error' | 'friedman_mse' | 'poisson';
    /**
      The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.
     */
    max_depth?: number;
    /**
      The minimum number of samples required to split an internal node:
  
      @defaultValue `2`
     */
    min_samples_split?: number;
    /**
      The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.
  
      @defaultValue `1`
     */
    min_samples_leaf?: number;
    /**
      The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.
  
      @defaultValue `0`
     */
    min_weight_fraction_leaf?: number;
    /**
      The number of features to consider when looking for the best split:
  
      @defaultValue `1`
     */
    max_features?: 'sqrt' | 'log2' | number | number;
    /**
      Grow trees with max_leaf_nodes in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.
     */
    max_leaf_nodes?: number;
    /**
      A node will be split if this split induces a decrease of the impurity greater than or equal to this value.
  
      The weighted impurity decrease equation is the following:
  
      @defaultValue `0`
     */
    min_impurity_decrease?: number;
    /**
      Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree.
  
      @defaultValue `false`
     */
    bootstrap?: boolean;
    /**
      Whether to use out-of-bag samples to estimate the generalization score. Only available if bootstrap=True.
  
      @defaultValue `false`
     */
    oob_score?: boolean;
    /**
      The number of jobs to run in parallel. fit, predict, decision_path and apply are all parallelized over the trees. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Controls 3 sources of randomness:
     */
    random_state?: number;
    /**
      Controls the verbosity when fitting and predicting.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See Glossary and Fitting additional weak-learners for details.
  
      @defaultValue `false`
     */
    warm_start?: boolean;
    /**
      Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ccp_alpha will be chosen. By default, no pruning is performed. See Minimal Cost-Complexity Pruning for details.
  
      @defaultValue `0`
     */
    ccp_alpha?: any;
    /**
      If bootstrap is True, the number of samples to draw from X to train each base estimator.
     */
    max_samples?: number;
}
export interface ExtraTreesRegressorApplyOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesRegressorDecisionPathOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesRegressorFitOptions {
    /**
      The training input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csc_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      The target values (class labels in classification, real numbers in regression).
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node.
     */
    sample_weight?: ArrayLike;
}
export interface ExtraTreesRegressorPredictOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=ExtraTreesRegressor.d.ts.map