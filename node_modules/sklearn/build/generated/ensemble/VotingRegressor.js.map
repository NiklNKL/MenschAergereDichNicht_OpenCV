{"version":3,"sources":["../../../src/generated/ensemble/VotingRegressor.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Prediction voting regressor for unfitted estimators.\n\n  A voting regressor is an ensemble meta-estimator that fits several base regressors, each on the whole dataset. Then it averages the individual predictions to form a final prediction.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.VotingRegressor.html\n */\nexport class VotingRegressor {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: VotingRegressorOptions) {\n    this.id = `VotingRegressor${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('VotingRegressor.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.ensemble import VotingRegressor\ntry: bridgeVotingRegressor\nexcept NameError: bridgeVotingRegressor = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_VotingRegressor = {'estimators': ${\n      this.opts['estimators'] ?? undefined\n    }, 'weights': np.array(${this.opts['weights'] ?? undefined}) if ${\n      this.opts['weights'] !== undefined\n    } else None, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}, 'verbose': ${\n      this.opts['verbose'] ?? undefined\n    }}\n\nctor_VotingRegressor = {k: v for k, v in ctor_VotingRegressor.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeVotingRegressor[${this.id}] = VotingRegressor(**ctor_VotingRegressor)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeVotingRegressor[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the estimators.\n   */\n  async fit(opts: VotingRegressorFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('VotingRegressor must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_VotingRegressor_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None}\n\npms_VotingRegressor_fit = {k: v for k, v in pms_VotingRegressor_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_fit = bridgeVotingRegressor[${this.id}].fit(**pms_VotingRegressor_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_fit.tolist() if hasattr(res_VotingRegressor_fit, 'tolist') else res_VotingRegressor_fit`\n  }\n\n  /**\n    Return class labels or probabilities for each estimator.\n\n    Return predictions for X for each estimator.\n   */\n  async fit_transform(\n    opts: VotingRegressorFitTransformOptions\n  ): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('VotingRegressor must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_VotingRegressor_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_VotingRegressor_fit_transform = {k: v for k, v in pms_VotingRegressor_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_fit_transform = bridgeVotingRegressor[${this.id}].fit_transform(**pms_VotingRegressor_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_fit_transform.tolist() if hasattr(res_VotingRegressor_fit_transform, 'tolist') else res_VotingRegressor_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(\n    opts: VotingRegressorGetFeatureNamesOutOptions\n  ): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'VotingRegressor must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_VotingRegressor_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_VotingRegressor_get_feature_names_out = {k: v for k, v in pms_VotingRegressor_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_get_feature_names_out = bridgeVotingRegressor[${this.id}].get_feature_names_out(**pms_VotingRegressor_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_get_feature_names_out.tolist() if hasattr(res_VotingRegressor_get_feature_names_out, 'tolist') else res_VotingRegressor_get_feature_names_out`\n  }\n\n  /**\n    Predict regression target for X.\n\n    The predicted regression target of an input sample is computed as the mean predicted regression targets of the estimators in the ensemble.\n   */\n  async predict(opts: VotingRegressorPredictOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('VotingRegressor must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_VotingRegressor_predict = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_VotingRegressor_predict = {k: v for k, v in pms_VotingRegressor_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_predict = bridgeVotingRegressor[${this.id}].predict(**pms_VotingRegressor_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_predict.tolist() if hasattr(res_VotingRegressor_predict, 'tolist') else res_VotingRegressor_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \\(v\\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.\n   */\n  async score(opts: VotingRegressorScoreOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('VotingRegressor must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_VotingRegressor_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${\n      opts['sample_weight'] ?? undefined\n    }) if ${opts['sample_weight'] !== undefined} else None}\n\npms_VotingRegressor_score = {k: v for k, v in pms_VotingRegressor_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_score = bridgeVotingRegressor[${this.id}].score(**pms_VotingRegressor_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_score.tolist() if hasattr(res_VotingRegressor_score, 'tolist') else res_VotingRegressor_score`\n  }\n\n  /**\n    Set output container.\n\n    See Introducing the set_output API for an example on how to use the API.\n   */\n  async set_output(opts: VotingRegressorSetOutputOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('VotingRegressor must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_VotingRegressor_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_VotingRegressor_set_output = {k: v for k, v in pms_VotingRegressor_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_set_output = bridgeVotingRegressor[${this.id}].set_output(**pms_VotingRegressor_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_set_output.tolist() if hasattr(res_VotingRegressor_set_output, 'tolist') else res_VotingRegressor_set_output`\n  }\n\n  /**\n    Return predictions for X for each estimator.\n   */\n  async transform(opts: VotingRegressorTransformOptions): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('VotingRegressor must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_VotingRegressor_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_VotingRegressor_transform = {k: v for k, v in pms_VotingRegressor_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_VotingRegressor_transform = bridgeVotingRegressor[${this.id}].transform(**pms_VotingRegressor_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_VotingRegressor_transform.tolist() if hasattr(res_VotingRegressor_transform, 'tolist') else res_VotingRegressor_transform`\n  }\n\n  /**\n    The collection of fitted sub-estimators as defined in estimators that are not ‘drop’.\n   */\n  get estimators_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'VotingRegressor must call init() before accessing estimators_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_VotingRegressor_estimators_ = bridgeVotingRegressor[${this.id}].estimators_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_VotingRegressor_estimators_.tolist() if hasattr(attr_VotingRegressor_estimators_, 'tolist') else attr_VotingRegressor_estimators_`\n    })()\n  }\n\n  /**\n    Attribute to access any fitted sub-estimators by name.\n   */\n  get named_estimators_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'VotingRegressor must call init() before accessing named_estimators_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_VotingRegressor_named_estimators_ = bridgeVotingRegressor[${this.id}].named_estimators_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_VotingRegressor_named_estimators_.tolist() if hasattr(attr_VotingRegressor_named_estimators_, 'tolist') else attr_VotingRegressor_named_estimators_`\n    })()\n  }\n\n  /**\n    Names of features seen during fit. Only defined if the underlying estimators expose such an attribute when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This VotingRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'VotingRegressor must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_VotingRegressor_feature_names_in_ = bridgeVotingRegressor[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_VotingRegressor_feature_names_in_.tolist() if hasattr(attr_VotingRegressor_feature_names_in_, 'tolist') else attr_VotingRegressor_feature_names_in_`\n    })()\n  }\n}\n\nexport interface VotingRegressorOptions {\n  /**\n    Invoking the fit method on the VotingRegressor will fit clones of those original estimators that will be stored in the class attribute self.estimators_. An estimator can be set to 'drop' using set_params.\n   */\n  estimators?: any\n\n  /**\n    Sequence of weights (float or int) to weight the occurrences of predicted values before averaging. Uses uniform weights if None.\n   */\n  weights?: ArrayLike\n\n  /**\n    The number of jobs to run in parallel for fit. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    If True, the time elapsed while fitting will be printed as it is completed.\n\n    @defaultValue `false`\n   */\n  verbose?: boolean\n}\n\nexport interface VotingRegressorFitOptions {\n  /**\n    Training vectors, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike | SparseMatrix[]\n\n  /**\n    Target values.\n   */\n  y?: ArrayLike\n\n  /**\n    Sample weights. If None, then samples are equally weighted. Note that this is supported only if all underlying estimators support sample weights.\n   */\n  sample_weight?: ArrayLike\n}\n\nexport interface VotingRegressorFitTransformOptions {\n  /**\n    Input samples.\n   */\n  X?: ArrayLike | SparseMatrix[]\n\n  /**\n    Target values (None for unsupervised transformations).\n   */\n  y?: NDArray\n\n  /**\n    Additional fit parameters.\n   */\n  fit_params?: any\n}\n\nexport interface VotingRegressorGetFeatureNamesOutOptions {\n  /**\n    Not used, present here for API consistency by convention.\n   */\n  input_features?: any\n}\n\nexport interface VotingRegressorPredictOptions {\n  /**\n    The input samples.\n   */\n  X?: ArrayLike | SparseMatrix[]\n}\n\nexport interface VotingRegressorScoreOptions {\n  /**\n    Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.\n   */\n  X?: ArrayLike[]\n\n  /**\n    True values for X.\n   */\n  y?: ArrayLike\n\n  /**\n    Sample weights.\n   */\n  sample_weight?: ArrayLike\n}\n\nexport interface VotingRegressorSetOutputOptions {\n  /**\n    Configure output of transform and fit_transform.\n   */\n  transform?: 'default' | 'pandas'\n}\n\nexport interface VotingRegressorTransformOptions {\n  /**\n    The input samples.\n   */\n  X?: ArrayLike | SparseMatrix[]\n}\n"],"mappings":"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","names":[]}