import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  An extra-trees classifier.

  This class implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesClassifier.html
 */
export declare class ExtraTreesClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: ExtraTreesClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Apply trees in the forest to X, return leaf indices.
     */
    apply(opts: ExtraTreesClassifierApplyOptions): Promise<NDArray[]>;
    /**
      Return the decision path in the forest.
     */
    decision_path(opts: ExtraTreesClassifierDecisionPathOptions): Promise<SparseMatrix[]>;
    /**
      Build a forest of trees from the training set (X, y).
     */
    fit(opts: ExtraTreesClassifierFitOptions): Promise<any>;
    /**
      Predict class for X.
  
      The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates. That is, the predicted class is the one with highest mean probability estimate across the trees.
     */
    predict(opts: ExtraTreesClassifierPredictOptions): Promise<NDArray>;
    /**
      Predict class log-probabilities for X.
  
      The predicted class log-probabilities of an input sample is computed as the log of the mean predicted class probabilities of the trees in the forest.
     */
    predict_log_proba(opts: ExtraTreesClassifierPredictLogProbaOptions): Promise<any>;
    /**
      Predict class probabilities for X.
  
      The predicted class probabilities of an input sample are computed as the mean predicted class probabilities of the trees in the forest. The class probability of a single tree is the fraction of samples of the same class in a leaf.
     */
    predict_proba(opts: ExtraTreesClassifierPredictProbaOptions): Promise<any>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: ExtraTreesClassifierScoreOptions): Promise<number>;
    /**
      The child estimator template used to create the collection of fitted sub-estimators.
     */
    get estimator_(): Promise<any>;
    /**
      The collection of fitted sub-estimators.
     */
    get estimators_(): Promise<any>;
    /**
      The classes labels (single output problem), or a list of arrays of class labels (multi-output problem).
     */
    get classes_(): Promise<NDArray>;
    /**
      The number of classes (single output problem), or a list containing the number of classes for each output (multi-output problem).
     */
    get n_classes_(): Promise<number | any[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of outputs when fit is performed.
     */
    get n_outputs_(): Promise<number>;
    /**
      Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when oob_score is True.
     */
    get oob_score_(): Promise<number>;
    /**
      Decision function computed with out-of-bag estimate on the training set. If n_estimators is small it might be possible that a data point was never left out during the bootstrap. In this case, oob_decision_function_ might contain NaN. This attribute exists only when oob_score is True.
     */
    get oob_decision_function_(): Promise<NDArray[]>;
}
export interface ExtraTreesClassifierOptions {
    /**
      The number of trees in the forest.
  
      @defaultValue `100`
     */
    n_estimators?: number;
    /**
      The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “log_loss” and “entropy” both for the Shannon information gain, see Mathematical formulation. Note: This parameter is tree-specific.
  
      @defaultValue `'gini'`
     */
    criterion?: 'gini' | 'entropy' | 'log_loss';
    /**
      The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.
     */
    max_depth?: number;
    /**
      The minimum number of samples required to split an internal node:
  
      @defaultValue `2`
     */
    min_samples_split?: number;
    /**
      The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.
  
      @defaultValue `1`
     */
    min_samples_leaf?: number;
    /**
      The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.
  
      @defaultValue `0`
     */
    min_weight_fraction_leaf?: number;
    /**
      The number of features to consider when looking for the best split:
  
      @defaultValue `'sqrt'`
     */
    max_features?: 'sqrt' | 'log2' | number | number;
    /**
      Grow trees with max_leaf_nodes in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.
     */
    max_leaf_nodes?: number;
    /**
      A node will be split if this split induces a decrease of the impurity greater than or equal to this value.
  
      The weighted impurity decrease equation is the following:
  
      @defaultValue `0`
     */
    min_impurity_decrease?: number;
    /**
      Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree.
  
      @defaultValue `false`
     */
    bootstrap?: boolean;
    /**
      Whether to use out-of-bag samples to estimate the generalization score. Only available if bootstrap=True.
  
      @defaultValue `false`
     */
    oob_score?: boolean;
    /**
      The number of jobs to run in parallel. fit, predict, decision_path and apply are all parallelized over the trees. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Controls 3 sources of randomness:
     */
    random_state?: number;
    /**
      Controls the verbosity when fitting and predicting.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See Glossary and Fitting additional weak-learners for details.
  
      @defaultValue `false`
     */
    warm_start?: boolean;
    /**
      Weights associated with classes in the form {class_label: weight}. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.
  
      Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}].
  
      The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))
  
      The “balanced_subsample” mode is the same as “balanced” except that weights are computed based on the bootstrap sample for every tree grown.
  
      For multi-output, the weights of each column of y will be multiplied.
  
      Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.
     */
    class_weight?: 'balanced' | 'balanced_subsample' | any;
    /**
      Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ccp_alpha will be chosen. By default, no pruning is performed. See Minimal Cost-Complexity Pruning for details.
  
      @defaultValue `0`
     */
    ccp_alpha?: any;
    /**
      If bootstrap is True, the number of samples to draw from X to train each base estimator.
     */
    max_samples?: number;
}
export interface ExtraTreesClassifierApplyOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesClassifierDecisionPathOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesClassifierFitOptions {
    /**
      The training input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csc_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      The target values (class labels in classification, real numbers in regression).
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node.
     */
    sample_weight?: ArrayLike;
}
export interface ExtraTreesClassifierPredictOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesClassifierPredictLogProbaOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesClassifierPredictProbaOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface ExtraTreesClassifierScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=ExtraTreesClassifier.d.ts.map