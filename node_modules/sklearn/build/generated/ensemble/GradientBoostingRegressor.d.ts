import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Gradient Boosting for regression.

  This estimator builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage a regression tree is fit on the negative gradient of the given loss function.

  sklearn.ensemble.HistGradientBoostingRegressor is a much faster variant of this algorithm for intermediate datasets (n_samples >= 10_000).

  @see https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html
 */
export declare class GradientBoostingRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: GradientBoostingRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Apply trees in the ensemble to X, return leaf indices.
     */
    apply(opts: GradientBoostingRegressorApplyOptions): Promise<ArrayLike[]>;
    /**
      Fit the gradient boosting model.
     */
    fit(opts: GradientBoostingRegressorFitOptions): Promise<any>;
    /**
      Predict regression target for X.
     */
    predict(opts: GradientBoostingRegressorPredictOptions): Promise<NDArray>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: GradientBoostingRegressorScoreOptions): Promise<number>;
    /**
      Predict regression target at each stage for X.
  
      This method allows monitoring (i.e. determine error on testing set) after each stage.
     */
    staged_predict(opts: GradientBoostingRegressorStagedPredictOptions): Promise<any[]>;
    /**
      The improvement in loss (= deviance) on the out-of-bag samples relative to the previous iteration. oob_improvement_[0] is the improvement in loss of the first stage over the init estimator. Only available if subsample < 1.0
     */
    get oob_improvement_(): Promise<NDArray>;
    /**
      The i-th score train_score_[i] is the deviance (= loss) of the model at iteration i on the in-bag sample. If subsample == 1 this is the deviance on the training data.
     */
    get train_score_(): Promise<NDArray>;
    /**
      The concrete LossFunction object.
     */
    get loss_(): Promise<any>;
    /**
      The estimator that provides the initial predictions. Set via the init argument or loss.init_estimator.
     */
    get init_(): Promise<any>;
    /**
      The collection of fitted sub-estimators.
     */
    get estimators_(): Promise<any[]>;
    /**
      The number of estimators as selected by early stopping (if n_iter_no_change is specified). Otherwise it is set to n_estimators.
     */
    get n_estimators_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The inferred value of max_features.
     */
    get max_features_(): Promise<number>;
}
export interface GradientBoostingRegressorOptions {
    /**
      Loss function to be optimized. ‘squared_error’ refers to the squared error for regression. ‘absolute_error’ refers to the absolute error of regression and is a robust loss function. ‘huber’ is a combination of the two. ‘quantile’ allows quantile regression (use alpha to specify the quantile).
  
      @defaultValue `'squared_error'`
     */
    loss?: 'squared_error' | 'absolute_error' | 'huber' | 'quantile';
    /**
      Learning rate shrinks the contribution of each tree by learning_rate. There is a trade-off between learning_rate and n_estimators. Values must be in the range [0.0, inf).
  
      @defaultValue `0.1`
     */
    learning_rate?: number;
    /**
      The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance. Values must be in the range [1, inf).
  
      @defaultValue `100`
     */
    n_estimators?: number;
    /**
      The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. subsample interacts with the parameter n_estimators. Choosing subsample < 1.0 leads to a reduction of variance and an increase in bias. Values must be in the range (0.0, 1.0].
  
      @defaultValue `1`
     */
    subsample?: number;
    /**
      The function to measure the quality of a split. Supported criteria are “friedman_mse” for the mean squared error with improvement score by Friedman, “squared_error” for mean squared error. The default value of “friedman_mse” is generally the best as it can provide a better approximation in some cases.
  
      @defaultValue `'friedman_mse'`
     */
    criterion?: 'friedman_mse' | 'squared_error';
    /**
      The minimum number of samples required to split an internal node:
  
      @defaultValue `2`
     */
    min_samples_split?: number;
    /**
      The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.
  
      @defaultValue `1`
     */
    min_samples_leaf?: number;
    /**
      The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided. Values must be in the range [0.0, 0.5].
  
      @defaultValue `0`
     */
    min_weight_fraction_leaf?: number;
    /**
      Maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples. If int, values must be in the range [1, inf).
  
      @defaultValue `3`
     */
    max_depth?: number;
    /**
      A node will be split if this split induces a decrease of the impurity greater than or equal to this value. Values must be in the range [0.0, inf).
  
      The weighted impurity decrease equation is the following:
  
      @defaultValue `0`
     */
    min_impurity_decrease?: number;
    /**
      An estimator object that is used to compute the initial predictions. init has to provide fit and predict. If ‘zero’, the initial raw predictions are set to zero. By default a DummyEstimator is used, predicting either the average target value (for loss=’squared_error’), or a quantile for the other losses.
     */
    init?: 'zero';
    /**
      Controls the random seed given to each Tree estimator at each boosting iteration. In addition, it controls the random permutation of the features at each split (see Notes for more details). It also controls the random splitting of the training data to obtain a validation set if n_iter_no_change is not None. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      The number of features to consider when looking for the best split:
     */
    max_features?: 'auto' | 'sqrt' | 'log2' | number | number;
    /**
      The alpha-quantile of the huber loss function and the quantile loss function. Only if loss='huber' or loss='quantile'. Values must be in the range (0.0, 1.0).
  
      @defaultValue `0.9`
     */
    alpha?: number;
    /**
      Enable verbose output. If 1 then it prints progress and performance once in a while (the more trees the lower the frequency). If greater than 1 then it prints progress and performance for every tree. Values must be in the range [0, inf).
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      Grow trees with max_leaf_nodes in best-first fashion. Best nodes are defined as relative reduction in impurity. Values must be in the range [2, inf). If None, then unlimited number of leaf nodes.
     */
    max_leaf_nodes?: number;
    /**
      When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution. See the Glossary.
  
      @defaultValue `false`
     */
    warm_start?: boolean;
    /**
      The proportion of training data to set aside as validation set for early stopping. Values must be in the range (0.0, 1.0). Only used if n_iter_no_change is set to an integer.
  
      @defaultValue `0.1`
     */
    validation_fraction?: number;
    /**
      n_iter_no_change is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside validation_fraction size of the training data as validation and terminate training when validation score is not improving in all of the previous n_iter_no_change numbers of iterations. Values must be in the range [1, inf).
     */
    n_iter_no_change?: number;
    /**
      Tolerance for the early stopping. When the loss is not improving by at least tol for n_iter_no_change iterations (if set to a number), the training stops. Values must be in the range [0.0, inf).
  
      @defaultValue `0.0001`
     */
    tol?: number;
    /**
      Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ccp_alpha will be chosen. By default, no pruning is performed. Values must be in the range [0.0, inf). See Minimal Cost-Complexity Pruning for details.
  
      @defaultValue `0`
     */
    ccp_alpha?: any;
}
export interface GradientBoostingRegressorApplyOptions {
    /**
      The input samples. Internally, its dtype will be converted to dtype=np.float32. If a sparse matrix is provided, it will be converted to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface GradientBoostingRegressorFitOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values (strings or integers in classification, real numbers in regression) For classification, labels must correspond to classes.
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node.
     */
    sample_weight?: ArrayLike;
    /**
      The monitor is called after each iteration with the current iteration, a reference to the estimator and the local variables of _fit_stages as keyword arguments callable(i, self, locals()). If the callable returns True the fitting procedure is stopped. The monitor can be used for various things such as computing held-out estimates, early stopping, model introspect, and snapshoting.
     */
    monitor?: any;
}
export interface GradientBoostingRegressorPredictOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface GradientBoostingRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface GradientBoostingRegressorStagedPredictOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=GradientBoostingRegressor.d.ts.map