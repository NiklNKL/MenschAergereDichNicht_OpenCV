import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Stack of estimators with a final classifier.

  Stacked generalization consists in stacking the output of individual estimator and use a classifier to compute the final prediction. Stacking allows to use the strength of each individual estimator by using their output as input of a final estimator.

  Note that estimators_ are fitted on the full X while final_estimator_ is trained using cross-validated predictions of the base estimators using cross_val_predict.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.StackingClassifier.html
 */
export declare class StackingClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: StackingClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Decision function for samples in X using the final estimator.
     */
    decision_function(opts: StackingClassifierDecisionFunctionOptions): Promise<NDArray>;
    /**
      Fit the estimators.
     */
    fit(opts: StackingClassifierFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: StackingClassifierFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: StackingClassifierGetFeatureNamesOutOptions): Promise<any>;
    /**
      Predict target for X.
     */
    predict(opts: StackingClassifierPredictOptions): Promise<NDArray>;
    /**
      Predict class probabilities for X using the final estimator.
     */
    predict_proba(opts: StackingClassifierPredictProbaOptions): Promise<NDArray[] | any[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: StackingClassifierScoreOptions): Promise<number>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: StackingClassifierSetOutputOptions): Promise<any>;
    /**
      Return class labels or probabilities for X for each estimator.
     */
    transform(opts: StackingClassifierTransformOptions): Promise<NDArray[]>;
    /**
      Class labels.
     */
    get classes_(): Promise<NDArray>;
    /**
      The elements of the estimators parameter, having been fitted on the training data. If an estimator has been set to 'drop', it will not appear in estimators_. When cv="prefit", estimators_ is set to estimators and is not fitted again.
     */
    get estimators_(): Promise<any>;
    /**
      Attribute to access any fitted sub-estimators by name.
     */
    get named_estimators_(): Promise<any>;
    /**
      Names of features seen during fit. Only defined if the underlying estimators expose such an attribute when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The classifier which predicts given the output of estimators_.
     */
    get final_estimator_(): Promise<any>;
    /**
      The method used by each base estimator.
     */
    get stack_method_(): Promise<any>;
}
export interface StackingClassifierOptions {
    /**
      Base estimators which will be stacked together. Each element of the list is defined as a tuple of string (i.e. name) and an estimator instance. An estimator can be set to ‘drop’ using set_params.
  
      The type of estimator is generally expected to be a classifier. However, one can pass a regressor for some use case (e.g. ordinal regression).
     */
    estimators?: any;
    /**
      A classifier which will be used to combine the base estimators. The default classifier is a LogisticRegression.
     */
    final_estimator?: any;
    /**
      Determines the cross-validation splitting strategy used in cross_val_predict to train final_estimator. Possible inputs for cv are:
     */
    cv?: number | 'prefit';
    /**
      Methods called for each base estimator. It can be:
  
      @defaultValue `'auto'`
     */
    stack_method?: 'auto' | 'predict_proba' | 'decision_function' | 'predict';
    /**
      The number of jobs to run in parallel all estimators fit. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      When False, only the predictions of estimators will be used as training data for final_estimator. When True, the final_estimator is trained on the predictions as well as the original training data.
  
      @defaultValue `false`
     */
    passthrough?: boolean;
    /**
      Verbosity level.
  
      @defaultValue `0`
     */
    verbose?: number;
}
export interface StackingClassifierDecisionFunctionOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface StackingClassifierFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values. Note that y will be internally encoded in numerically increasing order or lexicographic order. If the order matter (e.g. for ordinal regression), one should numerically encode the target y before calling fit.
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Note that this is supported only if all underlying estimators support sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface StackingClassifierFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface StackingClassifierGetFeatureNamesOutOptions {
    /**
      Input features. The input feature names are only used when passthrough is True.
     */
    input_features?: any;
}
export interface StackingClassifierPredictOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Parameters to the predict called by the final_estimator. Note that this may be used to return uncertainties from some estimators with return_std or return_cov. Be aware that it will only accounts for uncertainty in the final estimator.
     */
    predict_params?: any;
}
export interface StackingClassifierPredictProbaOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface StackingClassifierScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface StackingClassifierSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface StackingClassifierTransformOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=StackingClassifier.d.ts.map