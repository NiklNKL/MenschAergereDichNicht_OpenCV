import { PythonBridge, ArrayLike } from '@/sklearn/types';
/**
  Partial Dependence Plot (PDP).

  This can also display individual partial dependencies which are often referred to as: Individual Condition Expectation (ICE).

  It is recommended to use from_estimator to create a PartialDependenceDisplay. All parameters are stored as attributes.

  Read more in Advanced Plotting With Partial Dependence and the User Guide.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.inspection.PartialDependenceDisplay.html
 */
export declare class PartialDependenceDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: PartialDependenceDisplayOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Partial dependence (PD) and individual conditional expectation (ICE) plots.
  
      Partial dependence plots, individual conditional expectation plots or an overlay of both of them can be plotted by setting the kind parameter. The len(features) plots are arranged in a grid with n_cols columns. Two-way partial dependence plots are plotted as contour plots. The deciles of the feature values will be shown with tick marks on the x-axes for one-way plots, and on both axes for two-way plots.
     */
    from_estimator(opts: PartialDependenceDisplayFromEstimatorOptions): Promise<any>;
    /**
      Plot partial dependence plots.
     */
    plot(opts: PartialDependenceDisplayPlotOptions): Promise<any>;
    /**
      If ax is an axes or None, the bounding_ax_ is the axes where the grid of partial dependence plots are drawn. If ax is a list of axes or a numpy array of axes, bounding_ax_ is None.
     */
    get bounding_ax_(): Promise<any>;
    /**
      If ax is an axes or None, axes_[i, j] is the axes on the i-th row and j-th column. If ax is a list of axes, axes_[i] is the i-th item in ax. Elements that are None correspond to a nonexisting axes in that position.
     */
    get axes_(): Promise<any>;
    /**
      If ax is an axes or None, lines_[i, j] is the partial dependence curve on the i-th row and j-th column. If ax is a list of axes, lines_[i] is the partial dependence curve corresponding to the i-th item in ax. Elements that are None correspond to a nonexisting axes or an axes that does not include a line plot.
     */
    get lines_(): Promise<any>;
    /**
      If ax is an axes or None, vlines_[i, j] is the line collection representing the x axis deciles of the i-th row and j-th column. If ax is a list of axes, vlines_[i] corresponds to the i-th item in ax. Elements that are None correspond to a nonexisting axes or an axes that does not include a PDP plot.
     */
    get deciles_vlines_(): Promise<any>;
    /**
      If ax is an axes or None, vlines_[i, j] is the line collection representing the y axis deciles of the i-th row and j-th column. If ax is a list of axes, vlines_[i] corresponds to the i-th item in ax. Elements that are None correspond to a nonexisting axes or an axes that does not include a 2-way plot.
     */
    get deciles_hlines_(): Promise<any>;
    /**
      If ax is an axes or None, contours_[i, j] is the partial dependence plot on the i-th row and j-th column. If ax is a list of axes, contours_[i] is the partial dependence plot corresponding to the i-th item in ax. Elements that are None correspond to a nonexisting axes or an axes that does not include a contour plot.
     */
    get contours_(): Promise<any>;
    /**
      If ax is an axes or None, bars_[i, j] is the partial dependence bar plot on the i-th row and j-th column (for a categorical feature). If ax is a list of axes, bars_[i] is the partial dependence bar plot corresponding to the i-th item in ax. Elements that are None correspond to a nonexisting axes or an axes that does not include a bar plot.
     */
    get bars_(): Promise<any>;
    /**
      If ax is an axes or None, heatmaps_[i, j] is the partial dependence heatmap on the i-th row and j-th column (for a pair of categorical features) . If ax is a list of axes, heatmaps_[i] is the partial dependence heatmap corresponding to the i-th item in ax. Elements that are None correspond to a nonexisting axes or an axes that does not include a heatmap.
     */
    get heatmaps_(): Promise<any>;
    /**
      Figure containing partial dependence plots.
     */
    get figure_(): Promise<any>;
}
export interface PartialDependenceDisplayOptions {
    /**
      Results of partial_dependence for features.
     */
    pd_results?: any;
    /**
      Indices of features for a given plot. A tuple of one integer will plot a partial dependence curve of one feature. A tuple of two integers will plot a two-way partial dependence curve as a contour plot.
     */
    features?: any;
    /**
      Feature names corresponding to the indices in features.
     */
    feature_names?: any;
    /**
      In a multiclass setting, specifies the class for which the PDPs should be computed. Note that for binary classification, the positive class (index 1) is always used.
     */
    target_idx?: number;
    /**
      Deciles for feature indices in features.
     */
    deciles?: any;
    /**
      Global min and max average predictions, such that all plots will have the same scale and y limits. pdp_lim[1] is the global min and max for single partial dependence curves. pdp_lim[2] is the global min and max for two-way partial dependence curves. If None, the limit will be inferred from the global minimum and maximum of all predictions.
     */
    pdp_lim?: any;
    /**
      Whether to plot the partial dependence averaged across all the samples in the dataset or one line per sample or both.
  
      @defaultValue `'average'`
     */
    kind?: 'average' | 'individual' | 'both';
    /**
      Sampling for ICE curves when kind is ‘individual’ or ‘both’. If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to be used to plot ICE curves. If int, represents the maximum absolute number of samples to use.
  
      Note that the full dataset is still used to calculate partial dependence when kind='both'.
  
      @defaultValue `1000`
     */
    subsample?: number;
    /**
      Controls the randomness of the selected samples when subsamples is not None. See Glossary for details.
     */
    random_state?: number;
    /**
      Whether each target feature in features is categorical or not. The list should be same size as features. If None, all features are assumed to be continuous.
     */
    is_categorical?: any;
}
export interface PartialDependenceDisplayFromEstimatorOptions {
    /**
      A fitted estimator object implementing predict, predict_proba, or decision_function. Multioutput-multiclass classifiers are not supported.
     */
    estimator?: any;
    /**
      X is used to generate a grid of values for the target features (where the partial dependence will be evaluated), and also to generate values for the complement features when the method is 'brute'.
     */
    X?: ArrayLike[];
    /**
      The target features for which to create the PDPs. If features[i] is an integer or a string, a one-way PDP is created; if features[i] is a tuple, a two-way PDP is created (only supported with kind='average'). Each tuple must be of size 2. If any entry is a string, then it must be in feature_names.
     */
    features?: string;
    /**
      Indicates the categorical features.
     */
    categorical_features?: ArrayLike | number;
    /**
      Name of each feature; feature_names[i] holds the name of the feature with index i. By default, the name of the feature corresponds to their numerical index for NumPy array and their column name for pandas dataframe.
     */
    feature_names?: ArrayLike;
    /**
      In a multiclass setting, specifies the class for which the PDPs should be computed. Note that for binary classification, the positive class (index 1) is always used.
     */
    target?: number;
    /**
      Specifies whether to use predict_proba or decision_function as the target response. For regressors this parameter is ignored and the response is always the output of predict. By default, predict_proba is tried first and we revert to decision_function if it doesn’t exist. If method is 'recursion', the response is always the output of decision_function.
  
      @defaultValue `'auto'`
     */
    response_method?: 'auto' | 'predict_proba' | 'decision_function';
    /**
      The maximum number of columns in the grid plot. Only active when ax is a single axis or None.
  
      @defaultValue `3`
     */
    n_cols?: number;
    /**
      The number of equally spaced points on the axes of the plots, for each target feature.
  
      @defaultValue `100`
     */
    grid_resolution?: number;
    /**
      The lower and upper percentile used to create the extreme values for the PDP axes. Must be in [0, 1].
     */
    percentiles?: any;
    /**
      The method used to calculate the averaged predictions:
  
      @defaultValue `'auto'`
     */
    method?: string;
    /**
      The number of CPUs to use to compute the partial dependences. Computation is parallelized over features specified by the features parameter.
  
      None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Verbose output during PD computations.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      Dict with keywords passed to the matplotlib.pyplot.plot call. For one-way partial dependence plots. It can be used to define common properties for both ice_lines_kw and pdp_line_kw.
     */
    line_kw?: any;
    /**
      Dictionary with keywords passed to the matplotlib.pyplot.plot call. For ICE lines in the one-way partial dependence plots. The key value pairs defined in ice_lines_kw takes priority over line_kw.
     */
    ice_lines_kw?: any;
    /**
      Dictionary with keywords passed to the matplotlib.pyplot.plot call. For partial dependence in one-way partial dependence plots. The key value pairs defined in pd_line_kw takes priority over line_kw.
     */
    pd_line_kw?: any;
    /**
      Dict with keywords passed to the matplotlib.pyplot.contourf call. For two-way partial dependence plots.
     */
    contour_kw?: any;
    /**
      If a single axis is passed in, it is treated as a bounding axes and a grid of partial dependence plots will be drawn within these bounds. The n_cols parameter controls the number of columns in the grid.
     */
    ax?: any;
    /**
      Whether to plot the partial dependence averaged across all the samples in the dataset or one line per sample or both.
  
      @defaultValue `'average'`
     */
    kind?: 'average' | 'individual' | 'both';
    /**
      If True, the ICE and PD lines will start at the origin of the y-axis. By default, no centering is done.
  
      @defaultValue `false`
     */
    centered?: boolean;
    /**
      Sampling for ICE curves when kind is ‘individual’ or ‘both’. If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to be used to plot ICE curves. If int, represents the absolute number samples to use.
  
      Note that the full dataset is still used to calculate averaged partial dependence when kind='both'.
  
      @defaultValue `1000`
     */
    subsample?: number;
    /**
      Controls the randomness of the selected samples when subsamples is not None and kind is either 'both' or 'individual'. See Glossary for details.
     */
    random_state?: number;
}
export interface PartialDependenceDisplayPlotOptions {
    /**
      and a grid of partial dependence plots will be drawn within these bounds. The n_cols parameter controls the number of columns in the grid.
     */
    ax?: any;
    /**
      The maximum number of columns in the grid plot. Only active when ax is a single axes or None.
  
      @defaultValue `3`
     */
    n_cols?: number;
    /**
      Dict with keywords passed to the matplotlib.pyplot.plot call. For one-way partial dependence plots.
     */
    line_kw?: any;
    /**
      Dictionary with keywords passed to the matplotlib.pyplot.plot call. For ICE lines in the one-way partial dependence plots. The key value pairs defined in ice_lines_kw takes priority over line_kw.
     */
    ice_lines_kw?: any;
    /**
      Dictionary with keywords passed to the matplotlib.pyplot.plot call. For partial dependence in one-way partial dependence plots. The key value pairs defined in pd_line_kw takes priority over line_kw.
     */
    pd_line_kw?: any;
    /**
      Dict with keywords passed to the matplotlib.pyplot.contourf call for two-way partial dependence plots.
     */
    contour_kw?: any;
    /**
      Dict with keywords passed to the matplotlib.pyplot.bar call for one-way categorical partial dependence plots.
     */
    bar_kw?: any;
    /**
      Dict with keywords passed to the matplotlib.pyplot.imshow call for two-way categorical partial dependence plots.
     */
    heatmap_kw?: any;
    /**
      Global min and max average predictions, such that all plots will have the same scale and y limits. pdp_lim[1] is the global min and max for single partial dependence curves. pdp_lim[2] is the global min and max for two-way partial dependence curves. If None (default), the limit will be inferred from the global minimum and maximum of all predictions.
     */
    pdp_lim?: any;
    /**
      If True, the ICE and PD lines will start at the origin of the y-axis. By default, no centering is done.
  
      @defaultValue `false`
     */
    centered?: boolean;
}
//# sourceMappingURL=PartialDependenceDisplay.d.ts.map