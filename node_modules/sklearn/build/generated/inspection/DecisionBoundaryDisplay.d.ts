import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Decisions boundary visualization.

  It is recommended to use from_estimator to create a DecisionBoundaryDisplay. All parameters are stored as attributes.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.inspection.DecisionBoundaryDisplay.html
 */
export declare class DecisionBoundaryDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: DecisionBoundaryDisplayOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot decision boundary given an estimator.
     */
    from_estimator(opts: DecisionBoundaryDisplayFromEstimatorOptions): Promise<any>;
    /**
      Plot visualization.
     */
    plot(opts: DecisionBoundaryDisplayPlotOptions): Promise<any>;
    /**
      If plot_method is ‘contour’ or ‘contourf’, surface_ is a QuadContourSet. If plot_method is ‘pcolormesh’, surface_ is a QuadMesh.
     */
    get surface_(): Promise<any>;
    /**
      Axes with confusion matrix.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the confusion matrix.
     */
    get figure_(): Promise<any>;
}
export interface DecisionBoundaryDisplayOptions {
    /**
      First output of meshgrid.
     */
    xx0?: NDArray[];
    /**
      Second output of meshgrid.
     */
    xx1?: NDArray[];
    /**
      Values of the response function.
     */
    response?: NDArray[];
    /**
      Default label to place on x axis.
     */
    xlabel?: string;
    /**
      Default label to place on y axis.
     */
    ylabel?: string;
}
export interface DecisionBoundaryDisplayFromEstimatorOptions {
    /**
      Trained estimator used to plot the decision boundary.
     */
    estimator?: any;
    /**
      Input data that should be only 2-dimensional.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Number of grid points to use for plotting decision boundary. Higher values will make the plot look nicer but be slower to render.
  
      @defaultValue `100`
     */
    grid_resolution?: number;
    /**
      Extends the minimum and maximum values of X for evaluating the response function.
  
      @defaultValue `1`
     */
    eps?: number;
    /**
      Plotting method to call when plotting the response. Please refer to the following matplotlib documentation for details: contourf, contour, pcolormesh.
  
      @defaultValue `'contourf'`
     */
    plot_method?: 'contourf' | 'contour' | 'pcolormesh';
    /**
      Specifies whether to use predict_proba, decision_function, predict as the target response. If set to ‘auto’, the response method is tried in the following order: decision_function, predict_proba, predict. For multiclass problems, predict is selected when response_method="auto".
  
      @defaultValue `'auto'`
     */
    response_method?: 'auto' | 'predict_proba' | 'decision_function' | 'predict';
    /**
      The label used for the x-axis. If None, an attempt is made to extract a label from X if it is a dataframe, otherwise an empty string is used.
     */
    xlabel?: string;
    /**
      The label used for the y-axis. If None, an attempt is made to extract a label from X if it is a dataframe, otherwise an empty string is used.
     */
    ylabel?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Additional keyword arguments to be passed to the plot_method.
     */
    kwargs?: any;
}
export interface DecisionBoundaryDisplayPlotOptions {
    /**
      Plotting method to call when plotting the response. Please refer to the following matplotlib documentation for details: contourf, contour, pcolormesh.
  
      @defaultValue `'contourf'`
     */
    plot_method?: 'contourf' | 'contour' | 'pcolormesh';
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Overwrite the x-axis label.
     */
    xlabel?: string;
    /**
      Overwrite the y-axis label.
     */
    ylabel?: string;
    /**
      Additional keyword arguments to be passed to the plot_method.
     */
    kwargs?: any;
}
//# sourceMappingURL=DecisionBoundaryDisplay.d.ts.map