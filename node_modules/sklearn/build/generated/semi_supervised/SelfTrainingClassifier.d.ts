import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Self-training classifier.

  This metaestimator allows a given supervised classifier to function as a semi-supervised classifier, allowing it to learn from unlabeled data. It does this by iteratively predicting pseudo-labels for the unlabeled data and adding them to the training set.

  The classifier will continue iterating until either max_iter is reached, or no pseudo-labels were added to the training set in the previous iteration.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.html
 */
export declare class SelfTrainingClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SelfTrainingClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Call decision function of the base_estimator.
     */
    decision_function(opts: SelfTrainingClassifierDecisionFunctionOptions): Promise<NDArray[]>;
    /**
      Fit self-training classifier using X, y as training data.
     */
    fit(opts: SelfTrainingClassifierFitOptions): Promise<any>;
    /**
      Predict the classes of X.
     */
    predict(opts: SelfTrainingClassifierPredictOptions): Promise<NDArray>;
    /**
      Predict log probability for each possible outcome.
     */
    predict_log_proba(opts: SelfTrainingClassifierPredictLogProbaOptions): Promise<NDArray[]>;
    /**
      Predict probability for each possible outcome.
     */
    predict_proba(opts: SelfTrainingClassifierPredictProbaOptions): Promise<NDArray[]>;
    /**
      Call score on the base_estimator.
     */
    score(opts: SelfTrainingClassifierScoreOptions): Promise<number>;
    /**
      The fitted estimator.
     */
    get base_estimator_(): Promise<any>;
    /**
      Class labels for each output. (Taken from the trained base_estimator_).
     */
    get classes_(): Promise<NDArray | any[]>;
    /**
      The labels used for the final fit of the classifier, including pseudo-labels added during fit.
     */
    get transduction_(): Promise<NDArray>;
    /**
      The iteration in which each sample was labeled. When a sample has iteration 0, the sample was already labeled in the original dataset. When a sample has iteration -1, the sample was not labeled in any iteration.
     */
    get labeled_iter_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of rounds of self-training, that is the number of times the base estimator is fitted on relabeled variants of the training set.
     */
    get n_iter_(): Promise<number>;
    /**
      The reason that fitting was stopped.
     */
    get termination_condition_(): Promise<'max_iter' | 'no_change' | 'all_labeled'>;
}
export interface SelfTrainingClassifierOptions {
    /**
      An estimator object implementing fit and predict_proba. Invoking the fit method will fit a clone of the passed estimator, which will be stored in the base_estimator_ attribute.
     */
    base_estimator?: any;
    /**
      The decision threshold for use with criterion='threshold'. Should be in [0, 1). When using the 'threshold' criterion, a well calibrated classifier should be used.
  
      @defaultValue `0.75`
     */
    threshold?: number;
    /**
      The selection criterion used to select which labels to add to the training set. If 'threshold', pseudo-labels with prediction probabilities above threshold are added to the dataset. If 'k_best', the k_best pseudo-labels with highest prediction probabilities are added to the dataset. When using the ‘threshold’ criterion, a well calibrated classifier should be used.
  
      @defaultValue `'threshold'`
     */
    criterion?: 'threshold' | 'k_best';
    /**
      The amount of samples to add in each iteration. Only used when criterion='k_best'.
  
      @defaultValue `10`
     */
    k_best?: number;
    /**
      Maximum number of iterations allowed. Should be greater than or equal to 0. If it is None, the classifier will continue to predict labels until no new pseudo-labels are added, or all unlabeled samples have been labeled.
  
      @defaultValue `10`
     */
    max_iter?: number;
    /**
      Enable verbose output.
  
      @defaultValue `false`
     */
    verbose?: boolean;
}
export interface SelfTrainingClassifierDecisionFunctionOptions {
    /**
      Array representing the data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SelfTrainingClassifierFitOptions {
    /**
      Array representing the data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Array representing the labels. Unlabeled samples should have the label -1.
     */
    y?: ArrayLike | SparseMatrix;
}
export interface SelfTrainingClassifierPredictOptions {
    /**
      Array representing the data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SelfTrainingClassifierPredictLogProbaOptions {
    /**
      Array representing the data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SelfTrainingClassifierPredictProbaOptions {
    /**
      Array representing the data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SelfTrainingClassifierScoreOptions {
    /**
      Array representing the data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Array representing the labels.
     */
    y?: ArrayLike;
}
//# sourceMappingURL=SelfTrainingClassifier.d.ts.map