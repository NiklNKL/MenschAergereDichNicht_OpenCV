import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Naive Bayes classifier for multinomial models.

  The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification). The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html
 */
export declare class MultinomialNB {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MultinomialNBOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit Naive Bayes classifier according to X, y.
     */
    fit(opts: MultinomialNBFitOptions): Promise<any>;
    /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance overhead hence it is better to call partial_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
    partial_fit(opts: MultinomialNBPartialFitOptions): Promise<any>;
    /**
      Perform classification on an array of test vectors X.
     */
    predict(opts: MultinomialNBPredictOptions): Promise<NDArray>;
    /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by log P(x, y) = log P(y) + log P(x|y), where log P(y) is the class prior probability and log P(x|y) is the class-conditional probability.
     */
    predict_joint_log_proba(opts: MultinomialNBPredictJointLogProbaOptions): Promise<NDArray[]>;
    /**
      Return log-probability estimates for the test vector X.
     */
    predict_log_proba(opts: MultinomialNBPredictLogProbaOptions): Promise<ArrayLike[]>;
    /**
      Return probability estimates for the test vector X.
     */
    predict_proba(opts: MultinomialNBPredictProbaOptions): Promise<ArrayLike[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: MultinomialNBScoreOptions): Promise<number>;
    /**
      Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided.
     */
    get class_count_(): Promise<NDArray>;
    /**
      Smoothed empirical log probability for each class.
     */
    get class_log_prior_(): Promise<NDArray>;
    /**
      Class labels known to the classifier
     */
    get classes_(): Promise<NDArray>;
    /**
      Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided.
     */
    get feature_count_(): Promise<NDArray[]>;
    /**
      Empirical log probability of features given a class, P(x_i|y).
     */
    get feature_log_prob_(): Promise<NDArray[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface MultinomialNBOptions {
    /**
      Additive (Laplace/Lidstone) smoothing parameter (set alpha=0 and force_alpha=True, for no smoothing).
  
      @defaultValue `1`
     */
    alpha?: number | ArrayLike;
    /**
      If False and alpha is less than 1e-10, it will set alpha to 1e-10. If True, alpha will remain unchanged. This may cause numerical errors if alpha is too close to 0.
  
      @defaultValue `false`
     */
    force_alpha?: boolean;
    /**
      Whether to learn class prior probabilities or not. If false, a uniform prior will be used.
  
      @defaultValue `true`
     */
    fit_prior?: boolean;
    /**
      Prior probabilities of the classes. If specified, the priors are not adjusted according to the data.
     */
    class_prior?: ArrayLike;
}
export interface MultinomialNBFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Weights applied to individual samples (1. for unweighted).
     */
    sample_weight?: ArrayLike;
}
export interface MultinomialNBPartialFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      List of all the classes that can possibly appear in the y vector.
  
      Must be provided at the first call to partial_fit, can be omitted in subsequent calls.
     */
    classes?: ArrayLike;
    /**
      Weights applied to individual samples (1. for unweighted).
     */
    sample_weight?: ArrayLike;
}
export interface MultinomialNBPredictOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface MultinomialNBPredictJointLogProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface MultinomialNBPredictLogProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface MultinomialNBPredictProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface MultinomialNBScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=MultinomialNB.d.ts.map