import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  The Complement Naive Bayes classifier described in Rennie et al. (2003).

  The Complement Naive Bayes classifier was designed to correct the “severe assumptions” made by the standard Multinomial Naive Bayes classifier. It is particularly suited for imbalanced data sets.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.ComplementNB.html
 */
export declare class ComplementNB {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: ComplementNBOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit Naive Bayes classifier according to X, y.
     */
    fit(opts: ComplementNBFitOptions): Promise<any>;
    /**
      Incremental fit on a batch of samples.
  
      This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning.
  
      This is especially useful when the whole dataset is too big to fit in memory at once.
  
      This method has some performance overhead hence it is better to call partial_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead.
     */
    partial_fit(opts: ComplementNBPartialFitOptions): Promise<any>;
    /**
      Perform classification on an array of test vectors X.
     */
    predict(opts: ComplementNBPredictOptions): Promise<NDArray>;
    /**
      Return joint log probability estimates for the test vector X.
  
      For each row x of X and class y, the joint log probability is given by log P(x, y) = log P(y) + log P(x|y), where log P(y) is the class prior probability and log P(x|y) is the class-conditional probability.
     */
    predict_joint_log_proba(opts: ComplementNBPredictJointLogProbaOptions): Promise<NDArray[]>;
    /**
      Return log-probability estimates for the test vector X.
     */
    predict_log_proba(opts: ComplementNBPredictLogProbaOptions): Promise<ArrayLike[]>;
    /**
      Return probability estimates for the test vector X.
     */
    predict_proba(opts: ComplementNBPredictProbaOptions): Promise<ArrayLike[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: ComplementNBScoreOptions): Promise<number>;
    /**
      Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided.
     */
    get class_count_(): Promise<NDArray>;
    /**
      Smoothed empirical log probability for each class. Only used in edge case with a single class in the training set.
     */
    get class_log_prior_(): Promise<NDArray>;
    /**
      Class labels known to the classifier
     */
    get classes_(): Promise<NDArray>;
    /**
      Number of samples encountered for each feature during fitting. This value is weighted by the sample weight when provided.
     */
    get feature_all_(): Promise<NDArray>;
    /**
      Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided.
     */
    get feature_count_(): Promise<NDArray[]>;
    /**
      Empirical weights for class complements.
     */
    get feature_log_prob_(): Promise<NDArray[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface ComplementNBOptions {
    /**
      Additive (Laplace/Lidstone) smoothing parameter (set alpha=0 and force_alpha=True, for no smoothing).
  
      @defaultValue `1`
     */
    alpha?: number | ArrayLike;
    /**
      If False and alpha is less than 1e-10, it will set alpha to 1e-10. If True, alpha will remain unchanged. This may cause numerical errors if alpha is too close to 0.
  
      @defaultValue `false`
     */
    force_alpha?: boolean;
    /**
      Only used in edge case with a single class in the training set.
  
      @defaultValue `true`
     */
    fit_prior?: boolean;
    /**
      Prior probabilities of the classes. Not used.
     */
    class_prior?: ArrayLike;
    /**
      Whether or not a second normalization of the weights is performed. The default behavior mirrors the implementations found in Mahout and Weka, which do not follow the full algorithm described in Table 9 of the paper.
  
      @defaultValue `false`
     */
    norm?: boolean;
}
export interface ComplementNBFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Weights applied to individual samples (1. for unweighted).
     */
    sample_weight?: ArrayLike;
}
export interface ComplementNBPartialFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      List of all the classes that can possibly appear in the y vector.
  
      Must be provided at the first call to partial_fit, can be omitted in subsequent calls.
     */
    classes?: ArrayLike;
    /**
      Weights applied to individual samples (1. for unweighted).
     */
    sample_weight?: ArrayLike;
}
export interface ComplementNBPredictOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface ComplementNBPredictJointLogProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface ComplementNBPredictLogProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface ComplementNBPredictProbaOptions {
    /**
      The input samples.
     */
    X?: ArrayLike[];
}
export interface ComplementNBScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=ComplementNB.d.ts.map