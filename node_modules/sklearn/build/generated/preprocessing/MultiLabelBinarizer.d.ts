import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Transform between iterable of iterables and a multilabel format.

  Although a list of sets or tuples is a very intuitive format for multilabel data, it is unwieldy to process. This transformer converts between this intuitive format and the supported multilabel format: a (samples x classes) binary matrix indicating the presence of a class label.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MultiLabelBinarizer.html
 */
export declare class MultiLabelBinarizer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MultiLabelBinarizerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the label sets binarizer, storing classes_.
     */
    fit(opts: MultiLabelBinarizerFitOptions): Promise<any>;
    /**
      Fit the label sets binarizer and transform the given label sets.
     */
    fit_transform(opts: MultiLabelBinarizerFitTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Transform the given indicator matrix into label sets.
     */
    inverse_transform(opts: MultiLabelBinarizerInverseTransformOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: MultiLabelBinarizerSetOutputOptions): Promise<any>;
    /**
      Transform the given label sets.
     */
    transform(opts: MultiLabelBinarizerTransformOptions): Promise<any>;
    /**
      A copy of the classes parameter when provided. Otherwise it corresponds to the sorted set of classes found when fitting.
     */
    get classes_(): Promise<NDArray>;
}
export interface MultiLabelBinarizerOptions {
    /**
      Indicates an ordering for the class labels. All entries should be unique (cannot contain duplicate classes).
     */
    classes?: ArrayLike;
    /**
      Set to True if output binary array is desired in CSR sparse format.
  
      @defaultValue `false`
     */
    sparse_output?: boolean;
}
export interface MultiLabelBinarizerFitOptions {
    /**
      A set of labels (any orderable and hashable object) for each sample. If the classes parameter is set, y will not be iterated.
     */
    y?: any;
}
export interface MultiLabelBinarizerFitTransformOptions {
    /**
      A set of labels (any orderable and hashable object) for each sample. If the classes parameter is set, y will not be iterated.
     */
    y?: any;
}
export interface MultiLabelBinarizerInverseTransformOptions {
    /**
      A matrix containing only 1s ands 0s.
     */
    yt?: NDArray | SparseMatrix[];
}
export interface MultiLabelBinarizerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface MultiLabelBinarizerTransformOptions {
    /**
      A set of labels (any orderable and hashable object) for each sample. If the classes parameter is set, y will not be iterated.
     */
    y?: any;
}
//# sourceMappingURL=MultiLabelBinarizer.d.ts.map