import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Bin continuous data into intervals.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KBinsDiscretizer.html
 */
export declare class KBinsDiscretizer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: KBinsDiscretizerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the estimator.
     */
    fit(opts: KBinsDiscretizerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: KBinsDiscretizerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names.
     */
    get_feature_names_out(opts: KBinsDiscretizerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Transform discretized data back to original feature space.
  
      Note that this function does not regenerate the original data due to discretization rounding.
     */
    inverse_transform(opts: KBinsDiscretizerInverseTransformOptions): Promise<NDArray>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: KBinsDiscretizerSetOutputOptions): Promise<any>;
    /**
      Discretize the data.
     */
    transform(opts: KBinsDiscretizerTransformOptions): Promise<NDArray>;
    /**
      The edges of each bin. Contain arrays of varying shapes (n_bins_, ) Ignored features will have empty arrays.
     */
    get bin_edges_(): Promise<any[]>;
    /**
      Number of bins per feature. Bins whose width are too small (i.e., <= 1e-8) are removed with a warning.
     */
    get n_bins_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface KBinsDiscretizerOptions {
    /**
      The number of bins to produce. Raises ValueError if n_bins < 2.
  
      @defaultValue `5`
     */
    n_bins?: number | ArrayLike;
    /**
      Method used to encode the transformed result.
  
      @defaultValue `'onehot'`
     */
    encode?: 'onehot' | 'onehot-dense' | 'ordinal';
    /**
      Strategy used to define the widths of the bins.
  
      @defaultValue `'quantile'`
     */
    strategy?: 'uniform' | 'quantile' | 'kmeans';
    /**
      The desired data-type for the output. If None, output dtype is consistent with input dtype. Only np.float32 and np.float64 are supported.
     */
    dtype?: any;
    /**
      Maximum number of samples, used to fit the model, for computational efficiency. Used when strategy="quantile". subsample=None means that all the training samples are used when computing the quantiles that determine the binning thresholds. Since quantile computation relies on sorting each column of X and that sorting has an n log(n) time complexity, it is recommended to use subsampling on datasets with a very large number of samples.
     */
    subsample?: number;
    /**
      Determines random number generation for subsampling. Pass an int for reproducible results across multiple function calls. See the subsample parameter for more details. See Glossary.
     */
    random_state?: number;
}
export interface KBinsDiscretizerFitOptions {
    /**
      Data to be discretized.
     */
    X?: ArrayLike[];
    /**
      Ignored. This parameter exists only for compatibility with Pipeline.
     */
    y?: any;
}
export interface KBinsDiscretizerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface KBinsDiscretizerGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface KBinsDiscretizerInverseTransformOptions {
    /**
      Transformed data in the binned space.
     */
    Xt?: ArrayLike[];
}
export interface KBinsDiscretizerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface KBinsDiscretizerTransformOptions {
    /**
      Data to be discretized.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=KBinsDiscretizer.d.ts.map