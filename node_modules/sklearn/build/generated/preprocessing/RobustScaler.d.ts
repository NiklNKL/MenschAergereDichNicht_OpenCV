import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Scale features using statistics that are robust to outliers.

  This Scaler removes the median and scales the data according to the quantile range (defaults to IQR: Interquartile Range). The IQR is the range between the 1st quartile (25th quantile) and the 3rd quartile (75th quantile).

  Centering and scaling happen independently on each feature by computing the relevant statistics on the samples in the training set. Median and interquartile range are then stored to be used on later data using the transform method.

  Standardization of a dataset is a common requirement for many machine learning estimators. Typically this is done by removing the mean and scaling to unit variance. However, outliers can often influence the sample mean / variance in a negative way. In such cases, the median and the interquartile range often give better results.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.RobustScaler.html
 */
export declare class RobustScaler {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: RobustScalerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the median and quantiles to be used for scaling.
     */
    fit(opts: RobustScalerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: RobustScalerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: RobustScalerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Scale back the data to the original representation.
     */
    inverse_transform(opts: RobustScalerInverseTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: RobustScalerSetOutputOptions): Promise<any>;
    /**
      Center and scale the data.
     */
    transform(opts: RobustScalerTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      The median value for each feature in the training set.
     */
    get center_(): Promise<any>;
    /**
      The (scaled) interquartile range for each feature in the training set.
     */
    get scale_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface RobustScalerOptions {
    /**
      If True, center the data before scaling. This will cause transform to raise an exception when attempted on sparse matrices, because centering them entails building a dense matrix which in common use cases is likely to be too large to fit in memory.
  
      @defaultValue `true`
     */
    with_centering?: boolean;
    /**
      If True, scale the data to interquartile range.
  
      @defaultValue `true`
     */
    with_scaling?: boolean;
    /**
      Quantile range used to calculate scale_. By default this is equal to the IQR, i.e., q_min is the first quantile and q_max is the third quantile.
     */
    quantile_range?: any;
    /**
      If False, try to avoid a copy and do inplace scaling instead. This is not guaranteed to always work inplace; e.g. if the data is not a NumPy array or scipy.sparse CSR matrix, a copy may still be returned.
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      If True, scale data so that normally distributed features have a variance of 1. In general, if the difference between the x-values of q_max and q_min for a standard normal distribution is greater than 1, the dataset will be scaled down. If less than 1, the dataset will be scaled up.
  
      @defaultValue `false`
     */
    unit_variance?: boolean;
}
export interface RobustScalerFitOptions {
    /**
      The data used to compute the median and quantiles used for later scaling along the features axis.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface RobustScalerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface RobustScalerGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface RobustScalerInverseTransformOptions {
    /**
      The rescaled data to be transformed back.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface RobustScalerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface RobustScalerTransformOptions {
    /**
      The data used to scale along the specified axis.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=RobustScaler.d.ts.map