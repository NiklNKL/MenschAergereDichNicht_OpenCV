import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Transform features by scaling each feature to a given range.

  This estimator scales and translates each feature individually such that it is in the given range on the training set, e.g. between zero and one.

  The transformation is given by:

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html
 */
export declare class MinMaxScaler {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MinMaxScalerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the minimum and maximum to be used for later scaling.
     */
    fit(opts: MinMaxScalerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: MinMaxScalerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: MinMaxScalerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Undo the scaling of X according to feature_range.
     */
    inverse_transform(opts: MinMaxScalerInverseTransformOptions): Promise<NDArray[]>;
    /**
      Online computation of min and max on X for later scaling.
  
      All of X is processed as a single batch. This is intended for cases when fit is not feasible due to very large number of n_samples or because X is read from a continuous stream.
     */
    partial_fit(opts: MinMaxScalerPartialFitOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: MinMaxScalerSetOutputOptions): Promise<any>;
    /**
      Scale features of X according to feature_range.
     */
    transform(opts: MinMaxScalerTransformOptions): Promise<NDArray[]>;
    /**
      Per feature adjustment for minimum. Equivalent to min - X.min(axis=0) * self.scale_
     */
    get min_(): Promise<NDArray>;
    /**
      Per feature relative scaling of the data. Equivalent to (max - min) / (X.max(axis=0) - X.min(axis=0))
     */
    get scale_(): Promise<NDArray>;
    /**
      Per feature minimum seen in the data
     */
    get data_min_(): Promise<NDArray>;
    /**
      Per feature maximum seen in the data
     */
    get data_max_(): Promise<NDArray>;
    /**
      Per feature range (data_max_ - data_min_) seen in the data
     */
    get data_range_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      The number of samples processed by the estimator. It will be reset on new calls to fit, but increments across partial_fit calls.
     */
    get n_samples_seen_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface MinMaxScalerOptions {
    /**
      Desired range of transformed data.
     */
    feature_range?: any;
    /**
      Set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array).
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      Set to True to clip transformed values of held-out data to provided feature range.
  
      @defaultValue `false`
     */
    clip?: boolean;
}
export interface MinMaxScalerFitOptions {
    /**
      The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.
     */
    X?: ArrayLike[];
    /**
      Ignored.
     */
    y?: any;
}
export interface MinMaxScalerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface MinMaxScalerGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface MinMaxScalerInverseTransformOptions {
    /**
      Input data that will be transformed. It cannot be sparse.
     */
    X?: ArrayLike[];
}
export interface MinMaxScalerPartialFitOptions {
    /**
      The data used to compute the mean and standard deviation used for later scaling along the features axis.
     */
    X?: ArrayLike[];
    /**
      Ignored.
     */
    y?: any;
}
export interface MinMaxScalerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface MinMaxScalerTransformOptions {
    /**
      Input data that will be transformed.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=MinMaxScaler.d.ts.map