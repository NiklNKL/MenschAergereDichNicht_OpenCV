import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Center an arbitrary kernel matrix \(K\).

  Let define a kernel \(K\) such that:

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KernelCenterer.html
 */
export declare class KernelCenterer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: KernelCentererOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit KernelCenterer.
     */
    fit(opts: KernelCentererFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: KernelCentererFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: KernelCentererGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: KernelCentererSetOutputOptions): Promise<any>;
    /**
      Center kernel matrix.
     */
    transform(opts: KernelCentererTransformOptions): Promise<NDArray[]>;
}
export interface KernelCentererOptions {
    /**
      Average of each column of kernel matrix.
     */
    K_fit_rows_?: NDArray;
    /**
      Average of kernel matrix.
     */
    K_fit_all_?: number;
    /**
      Number of features seen during fit.
     */
    n_features_in_?: number;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    feature_names_in_?: NDArray;
}
export interface KernelCentererFitOptions {
    /**
      Kernel matrix.
     */
    K?: NDArray[];
    /**
      Ignored.
     */
    y?: any;
}
export interface KernelCentererFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface KernelCentererGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface KernelCentererSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface KernelCentererTransformOptions {
    /**
      Kernel matrix.
     */
    K?: NDArray[];
    /**
      Set to False to perform inplace computation.
  
      @defaultValue `true`
     */
    copy?: boolean;
}
//# sourceMappingURL=KernelCenterer.d.ts.map