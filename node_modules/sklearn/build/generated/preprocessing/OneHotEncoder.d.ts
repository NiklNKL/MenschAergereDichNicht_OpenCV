import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Encode categorical features as a one-hot numeric array.

  The input to this transformer should be an array-like of integers or strings, denoting the values taken on by categorical (discrete) features. The features are encoded using a one-hot (aka ‘one-of-K’ or ‘dummy’) encoding scheme. This creates a binary column for each category and returns a sparse matrix or dense array (depending on the sparse_output parameter)

  By default, the encoder derives the categories based on the unique values in each feature. Alternatively, you can also specify the categories manually.

  This encoding is needed for feeding categorical data to many scikit-learn estimators, notably linear models and SVMs with the standard kernels.

  Note: a one-hot encoding of y labels should use a LabelBinarizer instead.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html
 */
export declare class OneHotEncoder {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: OneHotEncoderOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit OneHotEncoder to X.
     */
    fit(opts: OneHotEncoderFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: OneHotEncoderFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: OneHotEncoderGetFeatureNamesOutOptions): Promise<any>;
    /**
      Convert the data back to the original representation.
  
      When unknown categories are encountered (all zeros in the one-hot encoding), None is used to represent this category. If the feature with the unknown category has a dropped category, the dropped category will be its inverse.
  
      For a given input feature, if there is an infrequent category, ‘infrequent_sklearn’ will be used to represent the infrequent category.
     */
    inverse_transform(opts: OneHotEncoderInverseTransformOptions): Promise<NDArray[]>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: OneHotEncoderSetOutputOptions): Promise<any>;
    /**
      Transform X using one-hot encoding.
  
      If there are infrequent categories for a feature, the infrequent categories will be grouped into a single category.
     */
    transform(opts: OneHotEncoderTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      The categories of each feature determined during fitting (in order of the features in X and corresponding with the output of transform). This includes the category specified in drop (if any).
     */
    get categories_(): Promise<any>;
    /**
      drop_idx_[i] is the index in categories_[i] of the category to be dropped for each feature.
     */
    get drop_idx_(): Promise<any[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface OneHotEncoderOptions {
    /**
      Categories (unique values) per feature:
  
      @defaultValue `'auto'`
     */
    categories?: 'auto';
    /**
      Specifies a methodology to use to drop one of the categories per feature. This is useful in situations where perfectly collinear features cause problems, such as when feeding the resulting data into an unregularized linear regression model.
  
      However, dropping one category breaks the symmetry of the original representation and can therefore induce a bias in downstream models, for instance for penalized linear classification or regression models.
     */
    drop?: 'first' | 'if_binary' | any[];
    /**
      Will return sparse matrix if set True else will return an array.
  
      @defaultValue `true`
     */
    sparse?: boolean;
    /**
      Will return sparse matrix if set True else will return an array.
  
      @defaultValue `true`
     */
    sparse_output?: boolean;
    /**
      Desired dtype of output.
     */
    dtype?: any;
    /**
      Specifies the way unknown categories are handled during transform.
  
      @defaultValue `'error'`
     */
    handle_unknown?: 'error' | 'ignore' | 'infrequent_if_exist';
    /**
      Specifies the minimum frequency below which a category will be considered infrequent.
     */
    min_frequency?: number;
    /**
      Specifies an upper limit to the number of output features for each input feature when considering infrequent categories. If there are infrequent categories, max_categories includes the category representing the infrequent categories along with the frequent categories. If None, there is no limit to the number of output features.
     */
    max_categories?: number;
}
export interface OneHotEncoderFitOptions {
    /**
      The data to determine the categories of each feature.
     */
    X?: ArrayLike[];
    /**
      Ignored. This parameter exists only for compatibility with Pipeline.
     */
    y?: any;
}
export interface OneHotEncoderFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface OneHotEncoderGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface OneHotEncoderInverseTransformOptions {
    /**
      The transformed data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface OneHotEncoderSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface OneHotEncoderTransformOptions {
    /**
      The data to encode.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=OneHotEncoder.d.ts.map