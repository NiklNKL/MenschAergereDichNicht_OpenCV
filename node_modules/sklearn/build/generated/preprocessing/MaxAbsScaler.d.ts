import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Scale each feature by its maximum absolute value.

  This estimator scales and translates each feature individually such that the maximal absolute value of each feature in the training set will be 1.0. It does not shift/center the data, and thus does not destroy any sparsity.

  This scaler can also be applied to sparse CSR or CSC matrices.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MaxAbsScaler.html
 */
export declare class MaxAbsScaler {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MaxAbsScalerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the maximum absolute value to be used for later scaling.
     */
    fit(opts: MaxAbsScalerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: MaxAbsScalerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: MaxAbsScalerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Scale back the data to the original representation.
     */
    inverse_transform(opts: MaxAbsScalerInverseTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Online computation of max absolute value of X for later scaling.
  
      All of X is processed as a single batch. This is intended for cases when fit is not feasible due to very large number of n_samples or because X is read from a continuous stream.
     */
    partial_fit(opts: MaxAbsScalerPartialFitOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: MaxAbsScalerSetOutputOptions): Promise<any>;
    /**
      Scale the data.
     */
    transform(opts: MaxAbsScalerTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Per feature relative scaling of the data.
     */
    get scale_(): Promise<NDArray>;
    /**
      Per feature maximum absolute value.
     */
    get max_abs_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of samples processed by the estimator. Will be reset on new calls to fit, but increments across partial_fit calls.
     */
    get n_samples_seen_(): Promise<number>;
}
export interface MaxAbsScalerOptions {
    /**
      Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).
  
      @defaultValue `true`
     */
    copy?: boolean;
}
export interface MaxAbsScalerFitOptions {
    /**
      The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Ignored.
     */
    y?: any;
}
export interface MaxAbsScalerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface MaxAbsScalerGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface MaxAbsScalerInverseTransformOptions {
    /**
      The data that should be transformed back.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface MaxAbsScalerPartialFitOptions {
    /**
      The data used to compute the mean and standard deviation used for later scaling along the features axis.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Ignored.
     */
    y?: any;
}
export interface MaxAbsScalerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface MaxAbsScalerTransformOptions {
    /**
      The data that should be scaled.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=MaxAbsScaler.d.ts.map