import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Agglomerative Clustering.

  Recursively merges pair of clusters of sample data; uses linkage distance.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html
 */
export declare class AgglomerativeClustering {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: AgglomerativeClusteringOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the hierarchical clustering from features, or distance matrix.
     */
    fit(opts: AgglomerativeClusteringFitOptions): Promise<any>;
    /**
      Fit and return the result of each sample’s clustering assignment.
  
      In addition to fitting, this method also return the result of the clustering assignment for each sample in the training set.
     */
    fit_predict(opts: AgglomerativeClusteringFitPredictOptions): Promise<NDArray>;
    /**
      The number of clusters found by the algorithm. If distance_threshold=None, it will be equal to the given n_clusters.
     */
    get n_clusters_(): Promise<number>;
    /**
      Cluster labels for each point.
     */
    get labels_(): Promise<NDArray>;
    /**
      Number of leaves in the hierarchical tree.
     */
    get n_leaves_(): Promise<number>;
    /**
      The estimated number of connected components in the graph.
     */
    get n_connected_components_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The children of each non-leaf node. Values less than n_samples correspond to leaves of the tree which are the original samples. A node i greater than or equal to n_samples is a non-leaf node and has children children_[i - n_samples]. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node n_samples + i.
     */
    get children_(): Promise<ArrayLike[]>;
    /**
      Distances between nodes in the corresponding place in children_. Only computed if distance_threshold is used or compute_distances is set to True.
     */
    get distances_(): Promise<ArrayLike>;
}
export interface AgglomerativeClusteringOptions {
    /**
      The number of clusters to find. It must be None if distance_threshold is not None.
  
      @defaultValue `2`
     */
    n_clusters?: number;
    /**
      The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by sklearn.metrics.pairwise_distances for its metric parameter. If linkage is “ward”, only “euclidean” is accepted. If “precomputed”, a distance matrix (instead of a similarity matrix) is needed as input for the fit method.
  
      @defaultValue `'euclidean'`
     */
    affinity?: string;
    /**
      Metric used to compute the linkage. Can be “euclidean”, “l1”, “l2”, “manhattan”, “cosine”, or “precomputed”. If set to None then “euclidean” is used. If linkage is “ward”, only “euclidean” is accepted. If “precomputed”, a distance matrix is needed as input for the fit method.
     */
    metric?: string;
    /**
      Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.
     */
    memory?: string;
    /**
      Connectivity matrix. Defines for each sample the neighboring samples following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from kneighbors_graph. Default is None, i.e, the hierarchical clustering algorithm is unstructured.
     */
    connectivity?: ArrayLike;
    /**
      Stop early the construction of the tree at n_clusters. This is useful to decrease computation time if the number of clusters is not small compared to the number of samples. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be True if distance_threshold is not None. By default compute_full_tree is “auto”, which is equivalent to True when distance_threshold is not None or that n_clusters is inferior to the maximum between 100 or 0.02 * n_samples. Otherwise, “auto” is equivalent to False.
  
      @defaultValue `'auto'`
     */
    compute_full_tree?: 'auto' | boolean;
    /**
      Which linkage criterion to use. The linkage criterion determines which distance to use between sets of observation. The algorithm will merge the pairs of cluster that minimize this criterion.
  
      @defaultValue `'ward'`
     */
    linkage?: 'ward' | 'complete' | 'average' | 'single';
    /**
      The linkage distance threshold at or above which clusters will not be merged. If not None, n_clusters must be None and compute_full_tree must be True.
     */
    distance_threshold?: number;
    /**
      Computes distances between clusters even if distance_threshold is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.
  
      @defaultValue `false`
     */
    compute_distances?: boolean;
}
export interface AgglomerativeClusteringFitOptions {
    /**
      Training instances to cluster, or distances between instances if metric='precomputed'.
     */
    X?: ArrayLike;
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface AgglomerativeClusteringFitPredictOptions {
    /**
      Training instances to cluster, or distances between instances if affinity='precomputed'.
     */
    X?: ArrayLike[];
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
//# sourceMappingURL=AgglomerativeClustering.d.ts.map