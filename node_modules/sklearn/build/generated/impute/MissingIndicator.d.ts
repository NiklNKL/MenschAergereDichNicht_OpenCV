import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Binary indicators for missing values.

  Note that this component typically should not be used in a vanilla Pipeline consisting of transformers and a classifier, but rather could be added using a FeatureUnion or ColumnTransformer.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html
 */
export declare class MissingIndicator {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MissingIndicatorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the transformer on X.
     */
    fit(opts: MissingIndicatorFitOptions): Promise<any>;
    /**
      Generate missing values indicator for X.
     */
    fit_transform(opts: MissingIndicatorFitTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: MissingIndicatorGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: MissingIndicatorSetOutputOptions): Promise<any>;
    /**
      Generate missing values indicator for X.
     */
    transform(opts: MissingIndicatorTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      The features indices which will be returned when calling transform. They are computed during fit. If features='all', features_ is equal to range(n_features).
     */
    get features_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface MissingIndicatorOptions {
    /**
      The placeholder for the missing values. All occurrences of missing_values will be imputed. For pandasâ€™ dataframes with nullable integer dtypes with missing values, missing_values should be set to np.nan, since pd.NA will be converted to np.nan.
     */
    missing_values?: number | string;
    /**
      Whether the imputer mask should represent all or a subset of features.
  
      @defaultValue `'missing-only'`
     */
    features?: 'missing-only' | 'all';
    /**
      Whether the imputer mask format should be sparse or dense.
  
      @defaultValue `'auto'`
     */
    sparse?: boolean | 'auto';
    /**
      If True, transform will raise an error when there are features with missing values that have no missing values in fit. This is applicable only when features='missing-only'.
  
      @defaultValue `true`
     */
    error_on_new?: boolean;
}
export interface MissingIndicatorFitOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface MissingIndicatorFitTransformOptions {
    /**
      The input data to complete.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface MissingIndicatorGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface MissingIndicatorSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface MissingIndicatorTransformOptions {
    /**
      The input data to complete.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=MissingIndicator.d.ts.map