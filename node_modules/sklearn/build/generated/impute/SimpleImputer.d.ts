import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Univariate imputer for completing missing values with simple strategies.

  Replace missing values using a descriptive statistic (e.g. mean, median, or most frequent) along each column, or using a constant value.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html
 */
export declare class SimpleImputer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SimpleImputerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the imputer on X.
     */
    fit(opts: SimpleImputerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: SimpleImputerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: SimpleImputerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Convert the data back to the original representation.
  
      Inverts the transform operation performed on an array. This operation can only be performed after SimpleImputer is instantiated with add_indicator=True.
  
      Note that inverse_transform can only invert the transform in features that have binary indicators for missing values. If a feature has no missing values at fit time, the feature won’t have a binary indicator, and the imputation done at transform time won’t be inverted.
     */
    inverse_transform(opts: SimpleImputerInverseTransformOptions): Promise<NDArray[]>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: SimpleImputerSetOutputOptions): Promise<any>;
    /**
      Impute all missing values in X.
     */
    transform(opts: SimpleImputerTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      The imputation fill value for each feature. Computing statistics can result in np.nan values. During transform, features corresponding to np.nan statistics will be discarded.
     */
    get statistics_(): Promise<any[]>;
    /**
      Indicator used to add binary indicators for missing values. None if add_indicator=False.
     */
    get indicator_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface SimpleImputerOptions {
    /**
      The placeholder for the missing values. All occurrences of missing_values will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, missing_values can be set to either np.nan or pd.NA.
     */
    missing_values?: number | string;
    /**
      The imputation strategy.
  
      @defaultValue `'mean'`
     */
    strategy?: string;
    /**
      When strategy == “constant”, fill_value is used to replace all occurrences of missing_values. For string or object data types, fill_value must be a string. If None, fill_value will be 0 when imputing numerical data and “missing_value” for strings or object data types.
     */
    fill_value?: string;
    /**
      Controls the verbosity of the imputer.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      If True, a copy of X will be created. If False, imputation will be done in-place whenever possible. Note that, in the following cases, a new copy will always be made, even if copy=False:
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      If True, a MissingIndicator transform will stack onto output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.
  
      @defaultValue `false`
     */
    add_indicator?: boolean;
    /**
      If True, features that consist exclusively of missing values when fit is called are returned in results when transform is called. The imputed value is always 0 except when strategy="constant" in which case fill_value will be used instead.
  
      @defaultValue `false`
     */
    keep_empty_features?: boolean;
}
export interface SimpleImputerFitOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface SimpleImputerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SimpleImputerGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface SimpleImputerInverseTransformOptions {
    /**
      The imputed data to be reverted to original data. It has to be an augmented array of imputed data and the missing indicator mask.
     */
    X?: ArrayLike[];
}
export interface SimpleImputerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface SimpleImputerTransformOptions {
    /**
      The input data to complete.
     */
    X?: ArrayLike | SparseMatrix;
}
//# sourceMappingURL=SimpleImputer.d.ts.map