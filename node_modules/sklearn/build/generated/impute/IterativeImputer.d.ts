import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Multivariate imputer that estimates each feature from all the others.

  A strategy for imputing missing values by modeling each feature with missing values as a function of other features in a round-robin fashion.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html
 */
export declare class IterativeImputer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: IterativeImputerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the imputer on X and return self.
     */
    fit(opts: IterativeImputerFitOptions): Promise<any>;
    /**
      Fit the imputer on X and return the transformed X.
     */
    fit_transform(opts: IterativeImputerFitTransformOptions): Promise<ArrayLike>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: IterativeImputerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: IterativeImputerSetOutputOptions): Promise<any>;
    /**
      Impute all missing values in X.
  
      Note that this is stochastic, and that if random_state is not fixed, repeated calls, or permuted input, results will differ.
     */
    transform(opts: IterativeImputerTransformOptions): Promise<ArrayLike>;
    /**
      Imputer used to initialize the missing values.
     */
    get initial_imputer_(): Promise<any>;
    /**
      Each tuple has (feat_idx, neighbor_feat_idx, estimator), where feat_idx is the current feature to be imputed, neighbor_feat_idx is the array of other features used to impute the current feature, and estimator is the trained estimator used for the imputation. Length is self.n_features_with_missing_ * self.n_iter_.
     */
    get imputation_sequence_(): Promise<any>;
    /**
      Number of iteration rounds that occurred. Will be less than self.max_iter if early stopping criterion was reached.
     */
    get n_iter_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Number of features with missing values.
     */
    get n_features_with_missing_(): Promise<number>;
    /**
      Indicator used to add binary indicators for missing values. None if add_indicator=False.
     */
    get indicator_(): Promise<any>;
    /**
      RandomState instance that is generated either from a seed, the random number generator or by np.random.
     */
    get random_state_(): Promise<any>;
}
export interface IterativeImputerOptions {
    /**
      The estimator to use at each step of the round-robin imputation. If sample_posterior=True, the estimator must support return_std in its predict method.
     */
    estimator?: any;
    /**
      The placeholder for the missing values. All occurrences of missing_values will be imputed. For pandas’ dataframes with nullable integer dtypes with missing values, missing_values should be set to np.nan, since pd.NA will be converted to np.nan.
     */
    missing_values?: number;
    /**
      Whether to sample from the (Gaussian) predictive posterior of the fitted estimator for each imputation. Estimator must support return_std in its predict method if set to True. Set to True if using IterativeImputer for multiple imputations.
  
      @defaultValue `false`
     */
    sample_posterior?: boolean;
    /**
      Maximum number of imputation rounds to perform before returning the imputations computed during the final round. A round is a single imputation of each feature with missing values. The stopping criterion is met once max(abs(X_t - X_{t-1}))/max(abs(X[known_vals])) < tol, where X_t is X at iteration t. Note that early stopping is only applied if sample_posterior=False.
  
      @defaultValue `10`
     */
    max_iter?: number;
    /**
      Tolerance of the stopping condition.
  
      @defaultValue `0.001`
     */
    tol?: number;
    /**
      Number of other features to use to estimate the missing values of each feature column. Nearness between features is measured using the absolute correlation coefficient between each feature pair (after initial imputation). To ensure coverage of features throughout the imputation process, the neighbor features are not necessarily nearest, but are drawn with probability proportional to correlation for each imputed target feature. Can provide significant speed-up when the number of features is huge. If None, all features will be used.
     */
    n_nearest_features?: number;
    /**
      Which strategy to use to initialize the missing values. Same as the strategy parameter in SimpleImputer.
  
      @defaultValue `'mean'`
     */
    initial_strategy?: 'mean' | 'median' | 'most_frequent' | 'constant';
    /**
      The order in which the features will be imputed. Possible values:
  
      @defaultValue `'ascending'`
     */
    imputation_order?: 'ascending' | 'descending' | 'roman' | 'arabic' | 'random';
    /**
      If True then features with missing values during transform which did not have any missing values during fit will be imputed with the initial imputation method only. Set to True if you have many features with no missing values at both fit and transform time to save compute.
  
      @defaultValue `false`
     */
    skip_complete?: boolean;
    /**
      Minimum possible imputed value. Broadcast to shape (n_features,) if scalar. If array-like, expects shape (n_features,), one min value for each feature. The default is -np.inf.
     */
    min_value?: number | ArrayLike;
    /**
      Maximum possible imputed value. Broadcast to shape (n_features,) if scalar. If array-like, expects shape (n_features,), one max value for each feature. The default is np.inf.
     */
    max_value?: number | ArrayLike;
    /**
      Verbosity flag, controls the debug messages that are issued as functions are evaluated. The higher, the more verbose. Can be 0, 1, or 2.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      The seed of the pseudo random number generator to use. Randomizes selection of estimator features if n_nearest_features is not None, the imputation_order if random, and the sampling from posterior if sample_posterior=True. Use an integer for determinism. See the Glossary.
     */
    random_state?: number;
    /**
      If True, a MissingIndicator transform will stack onto output of the imputer’s transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won’t appear on the missing indicator even if there are missing values at transform/test time.
  
      @defaultValue `false`
     */
    add_indicator?: boolean;
    /**
      If True, features that consist exclusively of missing values when fit is called are returned in results when transform is called. The imputed value is always 0 except when initial_strategy="constant" in which case fill_value will be used instead.
  
      @defaultValue `false`
     */
    keep_empty_features?: boolean;
}
export interface IterativeImputerFitOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface IterativeImputerFitTransformOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface IterativeImputerGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface IterativeImputerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface IterativeImputerTransformOptions {
    /**
      The input data to complete.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=IterativeImputer.d.ts.map