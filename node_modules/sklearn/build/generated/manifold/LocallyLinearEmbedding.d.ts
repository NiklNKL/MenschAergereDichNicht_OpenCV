import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Locally Linear Embedding.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.manifold.LocallyLinearEmbedding.html
 */
export declare class LocallyLinearEmbedding {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: LocallyLinearEmbeddingOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the embedding vectors for data X.
     */
    fit(opts: LocallyLinearEmbeddingFitOptions): Promise<any>;
    /**
      Compute the embedding vectors for data X and transform X.
     */
    fit_transform(opts: LocallyLinearEmbeddingFitTransformOptions): Promise<ArrayLike>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: LocallyLinearEmbeddingGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: LocallyLinearEmbeddingSetOutputOptions): Promise<any>;
    /**
      Transform new points into embedding space.
     */
    transform(opts: LocallyLinearEmbeddingTransformOptions): Promise<NDArray[]>;
    /**
      Stores the embedding vectors
     */
    get embedding_(): Promise<ArrayLike>;
    /**
      Reconstruction error associated with embedding_
     */
    get reconstruction_error_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      Stores nearest neighbors instance, including BallTree or KDtree if applicable.
     */
    get nbrs_(): Promise<any>;
}
export interface LocallyLinearEmbeddingOptions {
    /**
      Number of neighbors to consider for each point.
  
      @defaultValue `5`
     */
    n_neighbors?: number;
    /**
      Number of coordinates for the manifold.
  
      @defaultValue `2`
     */
    n_components?: number;
    /**
      Regularization constant, multiplies the trace of the local covariance matrix of the distances.
  
      @defaultValue `0.001`
     */
    reg?: number;
    /**
      The solver used to compute the eigenvectors. The available options are:
  
      @defaultValue `'auto'`
     */
    eigen_solver?: 'auto' | 'arpack' | 'dense';
    /**
      Tolerance for ‘arpack’ method Not used if eigen_solver==’dense’.
  
      @defaultValue `0.000001`
     */
    tol?: number;
    /**
      Maximum number of iterations for the arpack solver. Not used if eigen_solver==’dense’.
  
      @defaultValue `100`
     */
    max_iter?: number;
    /**
      standard: use the standard locally linear embedding algorithm. see reference [1]
  
      @defaultValue `'standard'`
     */
    method?: 'standard' | 'hessian' | 'modified' | 'ltsa';
    /**
      Tolerance for Hessian eigenmapping method. Only used if method == 'hessian'.
  
      @defaultValue `0.0001`
     */
    hessian_tol?: number;
    /**
      Tolerance for modified LLE method. Only used if method == 'modified'.
  
      @defaultValue `1e-12`
     */
    modified_tol?: number;
    /**
      Algorithm to use for nearest neighbors search, passed to NearestNeighbors instance.
  
      @defaultValue `'auto'`
     */
    neighbors_algorithm?: 'auto' | 'brute' | 'kd_tree' | 'ball_tree';
    /**
      Determines the random number generator when eigen_solver == ‘arpack’. Pass an int for reproducible results across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      The number of parallel jobs to run. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
}
export interface LocallyLinearEmbeddingFitOptions {
    /**
      Training set.
     */
    X?: ArrayLike[];
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface LocallyLinearEmbeddingFitTransformOptions {
    /**
      Training set.
     */
    X?: ArrayLike[];
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface LocallyLinearEmbeddingGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface LocallyLinearEmbeddingSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface LocallyLinearEmbeddingTransformOptions {
    /**
      Training set.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=LocallyLinearEmbedding.d.ts.map