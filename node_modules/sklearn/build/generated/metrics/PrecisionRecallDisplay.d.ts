import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Precision Recall visualization.

  It is recommend to use from_estimator or from_predictions to create a PredictionRecallDisplay. All parameters are stored as attributes.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.metrics.PrecisionRecallDisplay.html
 */
export declare class PrecisionRecallDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: PrecisionRecallDisplayOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot precision-recall curve given an estimator and some data.
     */
    from_estimator(opts: PrecisionRecallDisplayFromEstimatorOptions): Promise<any>;
    /**
      Plot precision-recall curve given binary class predictions.
     */
    from_predictions(opts: PrecisionRecallDisplayFromPredictionsOptions): Promise<any>;
    /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s plot.
     */
    plot(opts: PrecisionRecallDisplayPlotOptions): Promise<any>;
    /**
      Precision recall curve.
     */
    get line_(): Promise<any>;
    /**
      Axes with precision recall curve.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the curve.
     */
    get figure_(): Promise<any>;
}
export interface PrecisionRecallDisplayOptions {
    /**
      Precision values.
     */
    precision?: NDArray;
    /**
      Recall values.
     */
    recall?: NDArray;
    /**
      Average precision. If None, the average precision is not shown.
     */
    average_precision?: number;
    /**
      Name of estimator. If None, then the estimator name is not shown.
     */
    estimator_name?: string;
    /**
      The class considered as the positive class. If None, the class will not be shown in the legend.
     */
    pos_label?: string | number;
}
export interface PrecisionRecallDisplayFromEstimatorOptions {
    /**
      Fitted classifier or a fitted Pipeline in which the last estimator is a classifier.
     */
    estimator?: any;
    /**
      Input values.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      The class considered as the positive class when computing the precision and recall metrics. By default, estimators.classes_[1] is considered as the positive class.
     */
    pos_label?: string | number;
    /**
      Specifies whether to use predict_proba or decision_function as the target response. If set to ‘auto’, predict_proba is tried first and if it does not exist decision_function is tried next.
  
      @defaultValue `'auto'`
     */
    response_method?: 'predict_proba' | 'decision_function' | 'auto';
    /**
      Name for labeling curve. If None, no name is used.
     */
    name?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Keyword arguments to be passed to matplotlib’s plot.
     */
    kwargs?: any;
}
export interface PrecisionRecallDisplayFromPredictionsOptions {
    /**
      True binary labels.
     */
    y_true?: ArrayLike;
    /**
      Estimated probabilities or output of decision function.
     */
    y_pred?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      The class considered as the positive class when computing the precision and recall metrics.
     */
    pos_label?: string | number;
    /**
      Name for labeling curve. If None, name will be set to "Classifier".
     */
    name?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Keyword arguments to be passed to matplotlib’s plot.
     */
    kwargs?: any;
}
export interface PrecisionRecallDisplayPlotOptions {
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Name of precision recall curve for labeling. If None, use estimator_name if not None, otherwise no labeling is shown.
     */
    name?: string;
    /**
      Keyword arguments to be passed to matplotlib’s plot.
     */
    kwargs?: any;
}
//# sourceMappingURL=PrecisionRecallDisplay.d.ts.map