import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  ROC Curve visualization.

  It is recommend to use from_estimator or from_predictions to create a RocCurveDisplay. All parameters are stored as attributes.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.metrics.RocCurveDisplay.html
 */
export declare class RocCurveDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: RocCurveDisplayOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Create a ROC Curve display from an estimator.
     */
    from_estimator(opts: RocCurveDisplayFromEstimatorOptions): Promise<any>;
    /**
      Plot ROC curve given the true and predicted values.
     */
    from_predictions(opts: RocCurveDisplayFromPredictionsOptions): Promise<any>;
    /**
      Plot visualization.
  
      Extra keyword arguments will be passed to matplotlib’s plot.
     */
    plot(opts: RocCurveDisplayPlotOptions): Promise<any>;
    /**
      ROC Curve.
     */
    get line_(): Promise<any>;
    /**
      Axes with ROC Curve.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the curve.
     */
    get figure_(): Promise<any>;
}
export interface RocCurveDisplayOptions {
    /**
      False positive rate.
     */
    fpr?: NDArray;
    /**
      True positive rate.
     */
    tpr?: NDArray;
    /**
      Area under ROC curve. If None, the roc_auc score is not shown.
     */
    roc_auc?: number;
    /**
      Name of estimator. If None, the estimator name is not shown.
     */
    estimator_name?: string;
    /**
      The class considered as the positive class when computing the roc auc metrics. By default, estimators.classes_[1] is considered as the positive class.
     */
    pos_label?: string | number;
}
export interface RocCurveDisplayFromEstimatorOptions {
    /**
      Fitted classifier or a fitted Pipeline in which the last estimator is a classifier.
     */
    estimator?: any;
    /**
      Input values.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      Whether to drop some suboptimal thresholds which would not appear on a plotted ROC curve. This is useful in order to create lighter ROC curves.
  
      @defaultValue `true`
     */
    drop_intermediate?: boolean;
    /**
      Specifies whether to use predict_proba or decision_function as the target response. If set to ‘auto’, predict_proba is tried first and if it does not exist decision_function is tried next.
     */
    response_method?: 'decision_function' | 'auto’} default=’auto';
    /**
      The class considered as the positive class when computing the roc auc metrics. By default, estimators.classes_[1] is considered as the positive class.
     */
    pos_label?: string | number;
    /**
      Name of ROC Curve for labeling. If None, use the name of the estimator.
     */
    name?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Keyword arguments to be passed to matplotlib’s plot.
     */
    kwargs?: any;
}
export interface RocCurveDisplayFromPredictionsOptions {
    /**
      True labels.
     */
    y_true?: ArrayLike;
    /**
      Target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions (as returned by “decision_function” on some classifiers).
     */
    y_pred?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      Whether to drop some suboptimal thresholds which would not appear on a plotted ROC curve. This is useful in order to create lighter ROC curves.
  
      @defaultValue `true`
     */
    drop_intermediate?: boolean;
    /**
      The label of the positive class. When pos_label=None, if y_true is in {-1, 1} or {0, 1}, pos_label is set to 1, otherwise an error will be raised.
     */
    pos_label?: string | number;
    /**
      Name of ROC curve for labeling. If None, name will be set to "Classifier".
     */
    name?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Additional keywords arguments passed to matplotlib plot function.
     */
    kwargs?: any;
}
export interface RocCurveDisplayPlotOptions {
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Name of ROC Curve for labeling. If None, use estimator_name if not None, otherwise no labeling is shown.
     */
    name?: string;
    /**
      Keyword arguments to be passed to matplotlib’s plot.
     */
    kwargs?: any;
}
//# sourceMappingURL=RocCurveDisplay.d.ts.map