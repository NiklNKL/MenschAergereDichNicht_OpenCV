import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  DET curve visualization.

  It is recommend to use from_estimator or from_predictions to create a visualizer. All parameters are stored as attributes.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DetCurveDisplay.html
 */
export declare class DetCurveDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: DetCurveDisplayOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Plot DET curve given an estimator and data.
     */
    from_estimator(opts: DetCurveDisplayFromEstimatorOptions): Promise<any>;
    /**
      Plot the DET curve given the true and predicted labels.
     */
    from_predictions(opts: DetCurveDisplayFromPredictionsOptions): Promise<any>;
    /**
      Plot visualization.
     */
    plot(opts: DetCurveDisplayPlotOptions): Promise<any>;
    /**
      DET Curve.
     */
    get line_(): Promise<any>;
    /**
      Axes with DET Curve.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the curve.
     */
    get figure_(): Promise<any>;
}
export interface DetCurveDisplayOptions {
    /**
      False positive rate.
     */
    fpr?: NDArray;
    /**
      False negative rate.
     */
    fnr?: NDArray;
    /**
      Name of estimator. If None, the estimator name is not shown.
     */
    estimator_name?: string;
    /**
      The label of the positive class.
     */
    pos_label?: string | number;
}
export interface DetCurveDisplayFromEstimatorOptions {
    /**
      Fitted classifier or a fitted Pipeline in which the last estimator is a classifier.
     */
    estimator?: any;
    /**
      Input values.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      Specifies whether to use predict_proba or decision_function as the predicted target response. If set to ‘auto’, predict_proba is tried first and if it does not exist decision_function is tried next.
     */
    response_method?: 'decision_function' | 'auto’} default=’auto';
    /**
      The label of the positive class. When pos_label=None, if y_true is in {-1, 1} or {0, 1}, pos_label is set to 1, otherwise an error will be raised.
     */
    pos_label?: string | number;
    /**
      Name of DET curve for labeling. If None, use the name of the estimator.
     */
    name?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Additional keywords arguments passed to matplotlib plot function.
     */
    kwargs?: any;
}
export interface DetCurveDisplayFromPredictionsOptions {
    /**
      True labels.
     */
    y_true?: ArrayLike;
    /**
      Target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions (as returned by decision_function on some classifiers).
     */
    y_pred?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      The label of the positive class. When pos_label=None, if y_true is in {-1, 1} or {0, 1}, pos_label is set to 1, otherwise an error will be raised.
     */
    pos_label?: string | number;
    /**
      Name of DET curve for labeling. If None, name will be set to "Classifier".
     */
    name?: string;
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Additional keywords arguments passed to matplotlib plot function.
     */
    kwargs?: any;
}
export interface DetCurveDisplayPlotOptions {
    /**
      Axes object to plot on. If None, a new figure and axes is created.
     */
    ax?: any;
    /**
      Name of DET curve for labeling. If None, use estimator_name if it is not None, otherwise no labeling is shown.
     */
    name?: string;
    /**
      Additional keywords arguments passed to matplotlib plot function.
     */
    kwargs?: any;
}
//# sourceMappingURL=DetCurveDisplay.d.ts.map