import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Meta-transformer for selecting features based on importance weights.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectFromModel.html
 */
export declare class SelectFromModel {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SelectFromModelOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the SelectFromModel meta-transformer.
     */
    fit(opts: SelectFromModelFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: SelectFromModelFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: SelectFromModelGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: SelectFromModelGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: SelectFromModelInverseTransformOptions): Promise<any>;
    /**
      Fit the SelectFromModel meta-transformer only once.
     */
    partial_fit(opts: SelectFromModelPartialFitOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: SelectFromModelSetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: SelectFromModelTransformOptions): Promise<any>;
    /**
      The base estimator from which the transformer is built. This attribute exist only when fit has been called.
     */
    get estimator_(): Promise<any>;
    /**
      Maximum number of features calculated during fit. Only defined if the max_features is not None.
     */
    get max_features_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface SelectFromModelOptions {
    /**
      The base estimator from which the transformer is built. This can be both a fitted (if prefit is set to True) or a non-fitted estimator. The estimator should have a feature_importances_ or coef_ attribute after fitting. Otherwise, the importance_getter parameter should be used.
     */
    estimator?: any;
    /**
      The threshold value to use for feature selection. Features whose absolute importance value is greater or equal are kept while the others are discarded. If “median” (resp. “mean”), then the threshold value is the median (resp. the mean) of the feature importances. A scaling factor (e.g., “1.25*mean”) may also be used. If None and if the estimator has a parameter penalty set to l1, either explicitly or implicitly (e.g, Lasso), the threshold used is 1e-5. Otherwise, “mean” is used by default.
     */
    threshold?: string | number;
    /**
      Whether a prefit model is expected to be passed into the constructor directly or not. If True, estimator must be a fitted estimator. If False, estimator is fitted and updated by calling fit and partial_fit, respectively.
  
      @defaultValue `false`
     */
    prefit?: boolean;
    /**
      Order of the norm used to filter the vectors of coefficients below threshold in the case where the coef_ attribute of the estimator is of dimension 2.
  
      @defaultValue `1`
     */
    norm_order?: any;
    /**
      The maximum number of features to select.
     */
    max_features?: number;
    /**
      If ‘auto’, uses the feature importance either through a coef_ attribute or feature_importances_ attribute of estimator.
  
      Also accepts a string that specifies an attribute name/path for extracting feature importance (implemented with attrgetter). For example, give regressor_.coef_ in case of TransformedTargetRegressor  or named_steps.clf.feature_importances_ in case of Pipeline with its last step named clf.
  
      If callable, overrides the default feature importance getter. The callable is passed with the fitted estimator and it should return importance for each feature.
  
      @defaultValue `'auto'`
     */
    importance_getter?: string;
}
export interface SelectFromModelFitOptions {
    /**
      The training input samples.
     */
    X?: ArrayLike[];
    /**
      The target values (integers that correspond to classes in classification, real numbers in regression).
     */
    y?: ArrayLike;
    /**
      Other estimator specific parameters.
     */
    fit_params?: any;
}
export interface SelectFromModelFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SelectFromModelGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface SelectFromModelGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface SelectFromModelInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface SelectFromModelPartialFitOptions {
    /**
      The training input samples.
     */
    X?: ArrayLike[];
    /**
      The target values (integers that correspond to classes in classification, real numbers in regression).
     */
    y?: ArrayLike;
    /**
      Other estimator specific parameters.
     */
    fit_params?: any;
}
export interface SelectFromModelSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface SelectFromModelTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=SelectFromModel.d.ts.map