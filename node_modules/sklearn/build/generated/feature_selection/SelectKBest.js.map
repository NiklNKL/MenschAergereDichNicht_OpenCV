{"version":3,"sources":["../../../src/generated/feature_selection/SelectKBest.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Select features according to the k highest scores.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html\n */\nexport class SelectKBest {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: SelectKBestOptions) {\n    this.id = `SelectKBest${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('SelectKBest.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_selection import SelectKBest\ntry: bridgeSelectKBest\nexcept NameError: bridgeSelectKBest = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_SelectKBest = {'score_func': ${\n      this.opts['score_func'] ?? undefined\n    }, 'k': ${this.opts['k'] ?? undefined}}\n\nctor_SelectKBest = {k: v for k, v in ctor_SelectKBest.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeSelectKBest[${this.id}] = SelectKBest(**ctor_SelectKBest)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeSelectKBest[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Run score function on (X, y) and get the appropriate features.\n   */\n  async fit(opts: SelectKBestFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SelectKBest_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_SelectKBest_fit = {k: v for k, v in pms_SelectKBest_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_fit = bridgeSelectKBest[${this.id}].fit(**pms_SelectKBest_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_fit.tolist() if hasattr(res_SelectKBest_fit, 'tolist') else res_SelectKBest_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.\n   */\n  async fit_transform(opts: SelectKBestFitTransformOptions): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SelectKBest_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_SelectKBest_fit_transform = {k: v for k, v in pms_SelectKBest_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_fit_transform = bridgeSelectKBest[${this.id}].fit_transform(**pms_SelectKBest_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_fit_transform.tolist() if hasattr(res_SelectKBest_fit_transform, 'tolist') else res_SelectKBest_fit_transform`\n  }\n\n  /**\n    Mask feature names according to selected features.\n   */\n  async get_feature_names_out(\n    opts: SelectKBestGetFeatureNamesOutOptions\n  ): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SelectKBest must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectKBest_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_SelectKBest_get_feature_names_out = {k: v for k, v in pms_SelectKBest_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_get_feature_names_out = bridgeSelectKBest[${this.id}].get_feature_names_out(**pms_SelectKBest_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_get_feature_names_out.tolist() if hasattr(res_SelectKBest_get_feature_names_out, 'tolist') else res_SelectKBest_get_feature_names_out`\n  }\n\n  /**\n    Get a mask, or integer index, of the features selected.\n   */\n  async get_support(opts: SelectKBestGetSupportOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before get_support()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SelectKBest_get_support = {'indices': ${\n      opts['indices'] ?? undefined\n    }}\n\npms_SelectKBest_get_support = {k: v for k, v in pms_SelectKBest_get_support.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_get_support = bridgeSelectKBest[${this.id}].get_support(**pms_SelectKBest_get_support)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_get_support.tolist() if hasattr(res_SelectKBest_get_support, 'tolist') else res_SelectKBest_get_support`\n  }\n\n  /**\n    Reverse the transformation operation.\n   */\n  async inverse_transform(\n    opts: SelectKBestInverseTransformOptions\n  ): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before inverse_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SelectKBest_inverse_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_SelectKBest_inverse_transform = {k: v for k, v in pms_SelectKBest_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_inverse_transform = bridgeSelectKBest[${this.id}].inverse_transform(**pms_SelectKBest_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_inverse_transform.tolist() if hasattr(res_SelectKBest_inverse_transform, 'tolist') else res_SelectKBest_inverse_transform`\n  }\n\n  /**\n    Set output container.\n\n    See Introducing the set_output API for an example on how to use the API.\n   */\n  async set_output(opts: SelectKBestSetOutputOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SelectKBest_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_SelectKBest_set_output = {k: v for k, v in pms_SelectKBest_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_set_output = bridgeSelectKBest[${this.id}].set_output(**pms_SelectKBest_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_set_output.tolist() if hasattr(res_SelectKBest_set_output, 'tolist') else res_SelectKBest_set_output`\n  }\n\n  /**\n    Reduce X to the selected features.\n   */\n  async transform(opts: SelectKBestTransformOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SelectKBest_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None}\n\npms_SelectKBest_transform = {k: v for k, v in pms_SelectKBest_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectKBest_transform = bridgeSelectKBest[${this.id}].transform(**pms_SelectKBest_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectKBest_transform.tolist() if hasattr(res_SelectKBest_transform, 'tolist') else res_SelectKBest_transform`\n  }\n\n  /**\n    Scores of features.\n   */\n  get scores_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before accessing scores_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SelectKBest_scores_ = bridgeSelectKBest[${this.id}].scores_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SelectKBest_scores_.tolist() if hasattr(attr_SelectKBest_scores_, 'tolist') else attr_SelectKBest_scores_`\n    })()\n  }\n\n  /**\n    p-values of feature scores, None if score_func returned only scores.\n   */\n  get pvalues_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectKBest must call init() before accessing pvalues_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SelectKBest_pvalues_ = bridgeSelectKBest[${this.id}].pvalues_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SelectKBest_pvalues_.tolist() if hasattr(attr_SelectKBest_pvalues_, 'tolist') else attr_SelectKBest_pvalues_`\n    })()\n  }\n\n  /**\n    Number of features seen during fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SelectKBest must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SelectKBest_n_features_in_ = bridgeSelectKBest[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SelectKBest_n_features_in_.tolist() if hasattr(attr_SelectKBest_n_features_in_, 'tolist') else attr_SelectKBest_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during fit. Defined only when X has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This SelectKBest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SelectKBest must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SelectKBest_feature_names_in_ = bridgeSelectKBest[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SelectKBest_feature_names_in_.tolist() if hasattr(attr_SelectKBest_feature_names_in_, 'tolist') else attr_SelectKBest_feature_names_in_`\n    })()\n  }\n}\n\nexport interface SelectKBestOptions {\n  /**\n    Function taking two arrays X and y, and returning a pair of arrays (scores, pvalues) or a single array with scores. Default is f_classif (see below “See Also”). The default function only works with classification tasks.\n   */\n  score_func?: any\n\n  /**\n    Number of top features to select. The “all” option bypasses selection, for use in a parameter search.\n\n    @defaultValue `10`\n   */\n  k?: number | 'all'\n}\n\nexport interface SelectKBestFitOptions {\n  /**\n    The training input samples.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target values (class labels in classification, real numbers in regression).\n   */\n  y?: ArrayLike\n}\n\nexport interface SelectKBestFitTransformOptions {\n  /**\n    Input samples.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target values (None for unsupervised transformations).\n   */\n  y?: ArrayLike\n\n  /**\n    Additional fit parameters.\n   */\n  fit_params?: any\n}\n\nexport interface SelectKBestGetFeatureNamesOutOptions {\n  /**\n    Input features.\n   */\n  input_features?: any\n}\n\nexport interface SelectKBestGetSupportOptions {\n  /**\n    If True, the return value will be an array of integers, rather than a boolean mask.\n\n    @defaultValue `false`\n   */\n  indices?: boolean\n}\n\nexport interface SelectKBestInverseTransformOptions {\n  /**\n    The input samples.\n   */\n  X?: any\n}\n\nexport interface SelectKBestSetOutputOptions {\n  /**\n    Configure output of transform and fit_transform.\n   */\n  transform?: 'default' | 'pandas'\n}\n\nexport interface SelectKBestTransformOptions {\n  /**\n    The input samples.\n   */\n  X?: any\n}\n"],"mappings":"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","names":[]}