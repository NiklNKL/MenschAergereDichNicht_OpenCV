import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Transformer that performs Sequential Feature Selection.

  This Sequential Feature Selector adds (forward selection) or removes (backward selection) features to form a feature subset in a greedy fashion. At each stage, this estimator chooses the best feature to add or remove based on the cross-validation score of an estimator. In the case of unsupervised learning, this Sequential Feature Selector looks only at the features (X), not the desired outputs (y).

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SequentialFeatureSelector.html
 */
export declare class SequentialFeatureSelector {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SequentialFeatureSelectorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Learn the features to select from X.
     */
    fit(opts: SequentialFeatureSelectorFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: SequentialFeatureSelectorFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: SequentialFeatureSelectorGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: SequentialFeatureSelectorGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: SequentialFeatureSelectorInverseTransformOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: SequentialFeatureSelectorSetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: SequentialFeatureSelectorTransformOptions): Promise<any>;
    /**
      Number of features seen during fit. Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of features that were selected.
     */
    get n_features_to_select_(): Promise<number>;
    /**
      The mask of selected features.
     */
    get support_(): Promise<NDArray>;
}
export interface SequentialFeatureSelectorOptions {
    /**
      An unfitted estimator.
     */
    estimator?: any;
    /**
      If "auto", the behaviour depends on the tol parameter:
  
      @defaultValue `'warn'`
     */
    n_features_to_select?: 'auto' | number | number;
    /**
      If the score is not incremented by at least tol between two consecutive feature additions or removals, stop adding or removing.
  
      tol can be negative when removing features using direction="backward". It can be useful to reduce the number of features at the cost of a small decrease in the score.
  
      tol is enabled only when n_features_to_select is "auto".
     */
    tol?: number;
    /**
      Whether to perform forward selection or backward selection.
  
      @defaultValue `'forward'`
     */
    direction?: 'forward' | 'backward';
    /**
      A single str (see The scoring parameter: defining model evaluation rules) or a callable (see Defining your scoring strategy from metric functions) to evaluate the predictions on the test set.
  
      NOTE that when using a custom scorer, it should return a single value.
  
      If None, the estimatorâ€™s score method is used.
     */
    scoring?: string;
    /**
      Determines the cross-validation splitting strategy. Possible inputs for cv are:
     */
    cv?: number;
    /**
      Number of jobs to run in parallel. When evaluating a new feature to add or remove, the cross-validation procedure is parallel over the folds. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
}
export interface SequentialFeatureSelectorFitOptions {
    /**
      Training vectors, where n_samples is the number of samples and n_features is the number of predictors.
     */
    X?: ArrayLike[];
    /**
      Target values. This parameter may be ignored for unsupervised learning.
     */
    y?: ArrayLike;
}
export interface SequentialFeatureSelectorFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SequentialFeatureSelectorGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface SequentialFeatureSelectorGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface SequentialFeatureSelectorInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface SequentialFeatureSelectorSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface SequentialFeatureSelectorTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=SequentialFeatureSelector.d.ts.map