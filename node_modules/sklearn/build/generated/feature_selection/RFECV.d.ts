import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Recursive feature elimination with cross-validation to select features.

  See glossary entry for cross-validation estimator.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFECV.html
 */
export declare class RFECV {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: RFECVOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the decision function of X.
     */
    decision_function(opts: RFECVDecisionFunctionOptions): Promise<any>;
    /**
      Fit the RFE model and automatically tune the number of selected features.
     */
    fit(opts: RFECVFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: RFECVFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: RFECVGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: RFECVGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: RFECVInverseTransformOptions): Promise<any>;
    /**
      Reduce X to the selected features and predict using the estimator.
     */
    predict(opts: RFECVPredictOptions): Promise<any>;
    /**
      Predict class log-probabilities for X.
     */
    predict_log_proba(opts: RFECVPredictLogProbaOptions): Promise<any[]>;
    /**
      Predict class probabilities for X.
     */
    predict_proba(opts: RFECVPredictProbaOptions): Promise<any[]>;
    /**
      Reduce X to the selected features and return the score of the estimator.
     */
    score(opts: RFECVScoreOptions): Promise<number>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: RFECVSetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: RFECVTransformOptions): Promise<any>;
    /**
      The fitted estimator used to select features.
     */
    get estimator_(): Promise<any>;
    /**
      A dict with keys:
     */
    get cv_results_(): Promise<any>;
    /**
      The number of selected features with cross-validation.
     */
    get n_features_(): Promise<number>;
    /**
      Number of features seen during fit. Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The feature ranking, such that ranking_[i] corresponds to the ranking position of the i-th feature. Selected (i.e., estimated best) features are assigned rank 1.
     */
    get ranking_(): Promise<any[]>;
    /**
      The mask of selected features.
     */
    get support_(): Promise<NDArray>;
}
export interface RFECVOptions {
    /**
      A supervised learning estimator with a fit method that provides information about feature importance either through a coef_ attribute or through a feature_importances_ attribute.
     */
    estimator?: any;
    /**
      If greater than or equal to 1, then step corresponds to the (integer) number of features to remove at each iteration. If within (0.0, 1.0), then step corresponds to the percentage (rounded down) of features to remove at each iteration. Note that the last iteration may remove fewer than step features in order to reach min_features_to_select.
  
      @defaultValue `1`
     */
    step?: number;
    /**
      The minimum number of features to be selected. This number of features will always be scored, even if the difference between the original feature count and min_features_to_select isn’t divisible by step.
  
      @defaultValue `1`
     */
    min_features_to_select?: number;
    /**
      Determines the cross-validation splitting strategy. Possible inputs for cv are:
     */
    cv?: number;
    /**
      A string (see model evaluation documentation) or a scorer callable object / function with signature scorer(estimator, X, y).
     */
    scoring?: string;
    /**
      Controls verbosity of output.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      Number of cores to run in parallel while fitting across folds. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      If ‘auto’, uses the feature importance either through a coef_ or feature_importances_ attributes of estimator.
  
      Also accepts a string that specifies an attribute name/path for extracting feature importance. For example, give regressor_.coef_ in case of TransformedTargetRegressor  or named_steps.clf.feature_importances_ in case of Pipeline with its last step named clf.
  
      If callable, overrides the default feature importance getter. The callable is passed with the fitted estimator and it should return importance for each feature.
  
      @defaultValue `'auto'`
     */
    importance_getter?: string;
}
export interface RFECVDecisionFunctionOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: any[];
}
export interface RFECVFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the total number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values (integers for classification, real numbers for regression).
     */
    y?: ArrayLike;
    /**
      Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).
     */
    groups?: ArrayLike;
}
export interface RFECVFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface RFECVGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface RFECVGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface RFECVInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface RFECVPredictOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface RFECVPredictLogProbaOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface RFECVPredictProbaOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: any[];
}
export interface RFECVScoreOptions {
    /**
      The input samples.
     */
    X?: any;
    /**
      The target values.
     */
    y?: any;
    /**
      Parameters to pass to the score method of the underlying estimator.
     */
    fit_params?: any;
}
export interface RFECVSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface RFECVTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=RFECV.d.ts.map