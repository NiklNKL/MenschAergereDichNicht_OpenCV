import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Feature selector that removes all low-variance features.

  This feature selection algorithm looks only at the features (X), not the desired outputs (y), and can thus be used for unsupervised learning.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.VarianceThreshold.html
 */
export declare class VarianceThreshold {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: VarianceThresholdOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Learn empirical variances from X.
     */
    fit(opts: VarianceThresholdFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: VarianceThresholdFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: VarianceThresholdGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: VarianceThresholdGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: VarianceThresholdInverseTransformOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: VarianceThresholdSetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: VarianceThresholdTransformOptions): Promise<any>;
    /**
      Variances of individual features.
     */
    get variances_(): Promise<any>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface VarianceThresholdOptions {
    /**
      Features with a training-set variance lower than this threshold will be removed. The default is to keep all features with non-zero variance, i.e. remove the features that have the same value in all samples.
  
      @defaultValue `0`
     */
    threshold?: number;
}
export interface VarianceThresholdFitOptions {
    /**
      Data from which to compute variances, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Ignored. This parameter exists only for compatibility with sklearn.pipeline.Pipeline.
     */
    y?: any;
}
export interface VarianceThresholdFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface VarianceThresholdGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface VarianceThresholdGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface VarianceThresholdInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface VarianceThresholdSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface VarianceThresholdTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=VarianceThreshold.d.ts.map