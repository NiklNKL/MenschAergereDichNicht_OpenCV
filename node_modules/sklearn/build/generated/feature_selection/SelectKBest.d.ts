import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Select features according to the k highest scores.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html
 */
export declare class SelectKBest {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SelectKBestOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Run score function on (X, y) and get the appropriate features.
     */
    fit(opts: SelectKBestFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: SelectKBestFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: SelectKBestGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: SelectKBestGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: SelectKBestInverseTransformOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: SelectKBestSetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: SelectKBestTransformOptions): Promise<any>;
    /**
      Scores of features.
     */
    get scores_(): Promise<ArrayLike>;
    /**
      p-values of feature scores, None if score_func returned only scores.
     */
    get pvalues_(): Promise<ArrayLike>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface SelectKBestOptions {
    /**
      Function taking two arrays X and y, and returning a pair of arrays (scores, pvalues) or a single array with scores. Default is f_classif (see below “See Also”). The default function only works with classification tasks.
     */
    score_func?: any;
    /**
      Number of top features to select. The “all” option bypasses selection, for use in a parameter search.
  
      @defaultValue `10`
     */
    k?: number | 'all';
}
export interface SelectKBestFitOptions {
    /**
      The training input samples.
     */
    X?: ArrayLike[];
    /**
      The target values (class labels in classification, real numbers in regression).
     */
    y?: ArrayLike;
}
export interface SelectKBestFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SelectKBestGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface SelectKBestGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface SelectKBestInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface SelectKBestSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface SelectKBestTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=SelectKBest.d.ts.map