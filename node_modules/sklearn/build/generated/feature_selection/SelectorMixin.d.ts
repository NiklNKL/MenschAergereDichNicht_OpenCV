import { PythonBridge, ArrayLike } from '@/sklearn/types';
/**
  Transformer mixin that performs feature selection given a support mask

  This mixin provides a feature selector implementation with transform and inverse_transform functionality given an implementation of _get_support_mask.

  Methods

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectorMixin.html
 */
export declare class SelectorMixin {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SelectorMixinOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: SelectorMixinFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: SelectorMixinGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: SelectorMixinGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: SelectorMixinInverseTransformOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: SelectorMixinSetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: SelectorMixinTransformOptions): Promise<any>;
    /**
      Transformed array.
     */
    get X_new(): Promise<any[]>;
}
export interface SelectorMixinOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SelectorMixinFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SelectorMixinGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface SelectorMixinGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface SelectorMixinInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface SelectorMixinSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface SelectorMixinTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=SelectorMixin.d.ts.map