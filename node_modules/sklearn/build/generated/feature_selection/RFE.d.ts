import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Feature ranking with recursive feature elimination.

  Given an external estimator that assigns weights to features (e.g., the coefficients of a linear model), the goal of recursive feature elimination (RFE) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and the importance of each feature is obtained either through any specific attribute or callable. Then, the least important features are pruned from current set of features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html
 */
export declare class RFE {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: RFEOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the decision function of X.
     */
    decision_function(opts: RFEDecisionFunctionOptions): Promise<any>;
    /**
      Fit the RFE model and then the underlying estimator on the selected features.
     */
    fit(opts: RFEFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: RFEFitTransformOptions): Promise<any[]>;
    /**
      Mask feature names according to selected features.
     */
    get_feature_names_out(opts: RFEGetFeatureNamesOutOptions): Promise<any>;
    /**
      Get a mask, or integer index, of the features selected.
     */
    get_support(opts: RFEGetSupportOptions): Promise<any>;
    /**
      Reverse the transformation operation.
     */
    inverse_transform(opts: RFEInverseTransformOptions): Promise<any>;
    /**
      Reduce X to the selected features and predict using the estimator.
     */
    predict(opts: RFEPredictOptions): Promise<any>;
    /**
      Predict class log-probabilities for X.
     */
    predict_log_proba(opts: RFEPredictLogProbaOptions): Promise<any[]>;
    /**
      Predict class probabilities for X.
     */
    predict_proba(opts: RFEPredictProbaOptions): Promise<any[]>;
    /**
      Reduce X to the selected features and return the score of the estimator.
     */
    score(opts: RFEScoreOptions): Promise<number>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: RFESetOutputOptions): Promise<any>;
    /**
      Reduce X to the selected features.
     */
    transform(opts: RFETransformOptions): Promise<any>;
    /**
      The fitted estimator used to select features.
     */
    get estimator_(): Promise<any>;
    /**
      The number of selected features.
     */
    get n_features_(): Promise<number>;
    /**
      Number of features seen during fit. Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The feature ranking, such that ranking_[i] corresponds to the ranking position of the i-th feature. Selected (i.e., estimated best) features are assigned rank 1.
     */
    get ranking_(): Promise<NDArray>;
    /**
      The mask of selected features.
     */
    get support_(): Promise<NDArray>;
}
export interface RFEOptions {
    /**
      A supervised learning estimator with a fit method that provides information about feature importance (e.g. coef_, feature_importances_).
     */
    estimator?: any;
    /**
      The number of features to select. If None, half of the features are selected. If integer, the parameter is the absolute number of features to select. If float between 0 and 1, it is the fraction of features to select.
     */
    n_features_to_select?: number;
    /**
      If greater than or equal to 1, then step corresponds to the (integer) number of features to remove at each iteration. If within (0.0, 1.0), then step corresponds to the percentage (rounded down) of features to remove at each iteration.
  
      @defaultValue `1`
     */
    step?: number;
    /**
      Controls verbosity of output.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      If ‘auto’, uses the feature importance either through a coef_ or feature_importances_ attributes of estimator.
  
      Also accepts a string that specifies an attribute name/path for extracting feature importance (implemented with attrgetter). For example, give regressor_.coef_ in case of TransformedTargetRegressor  or named_steps.clf.feature_importances_ in case of class:~sklearn.pipeline.Pipeline with its last step named clf.
  
      If callable, overrides the default feature importance getter. The callable is passed with the fitted estimator and it should return importance for each feature.
  
      @defaultValue `'auto'`
     */
    importance_getter?: string;
}
export interface RFEDecisionFunctionOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: any[];
}
export interface RFEFitOptions {
    /**
      The training input samples.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      The target values.
     */
    y?: ArrayLike;
    /**
      Additional parameters passed to the fit method of the underlying estimator.
     */
    fit_params?: any;
}
export interface RFEFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface RFEGetFeatureNamesOutOptions {
    /**
      Input features.
     */
    input_features?: any;
}
export interface RFEGetSupportOptions {
    /**
      If True, the return value will be an array of integers, rather than a boolean mask.
  
      @defaultValue `false`
     */
    indices?: boolean;
}
export interface RFEInverseTransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface RFEPredictOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface RFEPredictLogProbaOptions {
    /**
      The input samples.
     */
    X?: any;
}
export interface RFEPredictProbaOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: any[];
}
export interface RFEScoreOptions {
    /**
      The input samples.
     */
    X?: any;
    /**
      The target values.
     */
    y?: any;
    /**
      Parameters to pass to the score method of the underlying estimator.
     */
    fit_params?: any;
}
export interface RFESetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface RFETransformOptions {
    /**
      The input samples.
     */
    X?: any;
}
//# sourceMappingURL=RFE.d.ts.map