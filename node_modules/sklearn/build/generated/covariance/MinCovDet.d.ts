import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Minimum Covariance Determinant (MCD): robust estimator of covariance.

  The Minimum Covariance Determinant covariance estimator is to be applied on Gaussian-distributed data, but could still be relevant on data drawn from a unimodal, symmetric distribution. It is not meant to be used with multi-modal data (the algorithm used to fit a MinCovDet object is likely to fail in such a case). One should consider projection pursuit methods to deal with multi-modal datasets.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.covariance.MinCovDet.html
 */
export declare class MinCovDet {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MinCovDetOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Apply a correction to raw Minimum Covariance Determinant estimates.
  
      Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].
     */
    correct_covariance(opts: MinCovDetCorrectCovarianceOptions): Promise<NDArray[]>;
    /**
      Compute the Mean Squared Error between two covariance estimators.
     */
    error_norm(opts: MinCovDetErrorNormOptions): Promise<number>;
    /**
      Fit a Minimum Covariance Determinant with the FastMCD algorithm.
     */
    fit(opts: MinCovDetFitOptions): Promise<any>;
    /**
      Getter for the precision matrix.
     */
    get_precision(opts: MinCovDetGetPrecisionOptions): Promise<any>;
    /**
      Compute the squared Mahalanobis distances of given observations.
     */
    mahalanobis(opts: MinCovDetMahalanobisOptions): Promise<NDArray>;
    /**
      Re-weight raw Minimum Covariance Determinant estimates.
  
      Re-weight observations using Rousseeuw’s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].
     */
    reweight_covariance(opts: MinCovDetReweightCovarianceOptions): Promise<NDArray>;
    /**
      Compute the log-likelihood of X_test under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by self.location_ and self.covariance_.
     */
    score(opts: MinCovDetScoreOptions): Promise<number>;
    /**
      The raw robust estimated location before correction and re-weighting.
     */
    get raw_location_(): Promise<NDArray>;
    /**
      The raw robust estimated covariance before correction and re-weighting.
     */
    get raw_covariance_(): Promise<NDArray[]>;
    /**
      A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.
     */
    get raw_support_(): Promise<NDArray>;
    /**
      Estimated robust location.
     */
    get location_(): Promise<NDArray>;
    /**
      Estimated robust covariance matrix.
     */
    get covariance_(): Promise<NDArray[]>;
    /**
      Estimated pseudo inverse matrix. (stored only if store_precision is True)
     */
    get precision_(): Promise<NDArray[]>;
    /**
      A mask of the observations that have been used to compute the robust estimates of location and shape.
     */
    get support_(): Promise<NDArray>;
    /**
      Mahalanobis distances of the training set (on which fit is called) observations.
     */
    get dist_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface MinCovDetOptions {
    /**
      Specify if the estimated precision is stored.
  
      @defaultValue `true`
     */
    store_precision?: boolean;
    /**
      If True, the support of the robust location and the covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment.
  
      @defaultValue `false`
     */
    assume_centered?: boolean;
    /**
      The proportion of points to be included in the support of the raw MCD estimate. Default is None, which implies that the minimum value of support_fraction will be used within the algorithm: (n_sample + n_features + 1) / 2. The parameter must be in the range (0, 1].
     */
    support_fraction?: number;
    /**
      Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See Glossary.
     */
    random_state?: number;
}
export interface MinCovDetCorrectCovarianceOptions {
    /**
      The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.
     */
    data?: ArrayLike[];
}
export interface MinCovDetErrorNormOptions {
    /**
      The covariance to compare with.
     */
    comp_cov?: ArrayLike[];
    /**
      The type of norm used to compute the error. Available error types: - ‘frobenius’ (default): sqrt(tr(A^t.A)) - ‘spectral’: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).
  
      @defaultValue `'frobenius'`
     */
    norm?: 'frobenius' | 'spectral';
    /**
      If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.
  
      @defaultValue `true`
     */
    scaling?: boolean;
    /**
      Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.
  
      @defaultValue `true`
     */
    squared?: boolean;
}
export interface MinCovDetFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface MinCovDetGetPrecisionOptions {
    /**
      The precision matrix associated to the current covariance object.
     */
    precision_?: ArrayLike[];
}
export interface MinCovDetMahalanobisOptions {
    /**
      The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.
     */
    X?: ArrayLike[];
}
export interface MinCovDetReweightCovarianceOptions {
    /**
      The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.
     */
    data?: ArrayLike[];
}
export interface MinCovDetScoreOptions {
    /**
      Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).
     */
    X_test?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
//# sourceMappingURL=MinCovDet.d.ts.map