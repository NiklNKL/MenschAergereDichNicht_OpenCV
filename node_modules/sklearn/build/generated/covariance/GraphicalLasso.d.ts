import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Sparse inverse covariance estimation with an l1-penalized estimator.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.covariance.GraphicalLasso.html
 */
export declare class GraphicalLasso {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: GraphicalLassoOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the Mean Squared Error between two covariance estimators.
     */
    error_norm(opts: GraphicalLassoErrorNormOptions): Promise<number>;
    /**
      Fit the GraphicalLasso model to X.
     */
    fit(opts: GraphicalLassoFitOptions): Promise<any>;
    /**
      Getter for the precision matrix.
     */
    get_precision(opts: GraphicalLassoGetPrecisionOptions): Promise<any>;
    /**
      Compute the squared Mahalanobis distances of given observations.
     */
    mahalanobis(opts: GraphicalLassoMahalanobisOptions): Promise<NDArray>;
    /**
      Compute the log-likelihood of X_test under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by self.location_ and self.covariance_.
     */
    score(opts: GraphicalLassoScoreOptions): Promise<number>;
    /**
      Estimated location, i.e. the estimated mean.
     */
    get location_(): Promise<NDArray>;
    /**
      Estimated covariance matrix
     */
    get covariance_(): Promise<NDArray[]>;
    /**
      Estimated pseudo inverse matrix.
     */
    get precision_(): Promise<NDArray[]>;
    /**
      Number of iterations run.
     */
    get n_iter_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface GraphicalLassoOptions {
    /**
      The regularization parameter: the higher alpha, the more regularization, the sparser the inverse covariance. Range is (0, inf].
  
      @defaultValue `0.01`
     */
    alpha?: number;
    /**
      The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where p > n. Elsewhere prefer cd which is more numerically stable.
  
      @defaultValue `'cd'`
     */
    mode?: 'cd' | 'lars';
    /**
      The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped. Range is (0, inf].
  
      @defaultValue `0.0001`
     */
    tol?: number;
    /**
      The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode=’cd’. Range is (0, inf].
  
      @defaultValue `0.0001`
     */
    enet_tol?: number;
    /**
      The maximum number of iterations.
  
      @defaultValue `100`
     */
    max_iter?: number;
    /**
      If verbose is True, the objective function and dual gap are plotted at each iteration.
  
      @defaultValue `false`
     */
    verbose?: boolean;
    /**
      If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation.
  
      @defaultValue `false`
     */
    assume_centered?: boolean;
}
export interface GraphicalLassoErrorNormOptions {
    /**
      The covariance to compare with.
     */
    comp_cov?: ArrayLike[];
    /**
      The type of norm used to compute the error. Available error types: - ‘frobenius’ (default): sqrt(tr(A^t.A)) - ‘spectral’: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).
  
      @defaultValue `'frobenius'`
     */
    norm?: 'frobenius' | 'spectral';
    /**
      If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.
  
      @defaultValue `true`
     */
    scaling?: boolean;
    /**
      Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.
  
      @defaultValue `true`
     */
    squared?: boolean;
}
export interface GraphicalLassoFitOptions {
    /**
      Data from which to compute the covariance estimate.
     */
    X?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface GraphicalLassoGetPrecisionOptions {
    /**
      The precision matrix associated to the current covariance object.
     */
    precision_?: ArrayLike[];
}
export interface GraphicalLassoMahalanobisOptions {
    /**
      The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.
     */
    X?: ArrayLike[];
}
export interface GraphicalLassoScoreOptions {
    /**
      Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).
     */
    X_test?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
//# sourceMappingURL=GraphicalLasso.d.ts.map