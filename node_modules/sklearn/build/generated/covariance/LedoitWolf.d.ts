import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  LedoitWolf Estimator.

  Ledoit-Wolf is a particular form of shrinkage, where the shrinkage coefficient is computed using O. Ledoit and M. Wolf’s formula as described in “A Well-Conditioned Estimator for Large-Dimensional Covariance Matrices”, Ledoit and Wolf, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.covariance.LedoitWolf.html
 */
export declare class LedoitWolf {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: LedoitWolfOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Compute the Mean Squared Error between two covariance estimators.
     */
    error_norm(opts: LedoitWolfErrorNormOptions): Promise<number>;
    /**
      Fit the Ledoit-Wolf shrunk covariance model to X.
     */
    fit(opts: LedoitWolfFitOptions): Promise<any>;
    /**
      Getter for the precision matrix.
     */
    get_precision(opts: LedoitWolfGetPrecisionOptions): Promise<any>;
    /**
      Compute the squared Mahalanobis distances of given observations.
     */
    mahalanobis(opts: LedoitWolfMahalanobisOptions): Promise<NDArray>;
    /**
      Compute the log-likelihood of X_test under the estimated Gaussian model.
  
      The Gaussian model is defined by its mean and covariance matrix which are represented respectively by self.location_ and self.covariance_.
     */
    score(opts: LedoitWolfScoreOptions): Promise<number>;
    /**
      Estimated covariance matrix.
     */
    get covariance_(): Promise<NDArray[]>;
    /**
      Estimated location, i.e. the estimated mean.
     */
    get location_(): Promise<NDArray>;
    /**
      Estimated pseudo inverse matrix. (stored only if store_precision is True)
     */
    get precision_(): Promise<NDArray[]>;
    /**
      Coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].
     */
    get shrinkage_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface LedoitWolfOptions {
    /**
      Specify if the estimated precision is stored.
  
      @defaultValue `true`
     */
    store_precision?: boolean;
    /**
      If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation.
  
      @defaultValue `false`
     */
    assume_centered?: boolean;
    /**
      Size of blocks into which the covariance matrix will be split during its Ledoit-Wolf estimation. This is purely a memory optimization and does not affect results.
  
      @defaultValue `1000`
     */
    block_size?: number;
}
export interface LedoitWolfErrorNormOptions {
    /**
      The covariance to compare with.
     */
    comp_cov?: ArrayLike[];
    /**
      The type of norm used to compute the error. Available error types: - ‘frobenius’ (default): sqrt(tr(A^t.A)) - ‘spectral’: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).
  
      @defaultValue `'frobenius'`
     */
    norm?: 'frobenius' | 'spectral';
    /**
      If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.
  
      @defaultValue `true`
     */
    scaling?: boolean;
    /**
      Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.
  
      @defaultValue `true`
     */
    squared?: boolean;
}
export interface LedoitWolfFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface LedoitWolfGetPrecisionOptions {
    /**
      The precision matrix associated to the current covariance object.
     */
    precision_?: ArrayLike[];
}
export interface LedoitWolfMahalanobisOptions {
    /**
      The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.
     */
    X?: ArrayLike[];
}
export interface LedoitWolfScoreOptions {
    /**
      Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).
     */
    X_test?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
//# sourceMappingURL=LedoitWolf.d.ts.map