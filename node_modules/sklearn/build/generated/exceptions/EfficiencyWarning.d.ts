import { PythonBridge } from '@/sklearn/types';
/**
  Warning used to notify the user of inefficient computation.

  This warning notifies the user that the efficiency may not be optimal due to some reason which may be included as a part of the warning message. This may be subclassed into a more specific Warning class.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.exceptions.EfficiencyWarning.html
 */
export declare class EfficiencyWarning {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: EfficiencyWarningOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Exception.with_traceback(tb) â€“ set self.__traceback__ to tb and return self.
     */
    with_traceback(opts: EfficiencyWarningWithTracebackOptions): Promise<any>;
}
export interface EfficiencyWarningOptions {
    args?: any;
}
export interface EfficiencyWarningWithTracebackOptions {
}
//# sourceMappingURL=EfficiencyWarning.d.ts.map