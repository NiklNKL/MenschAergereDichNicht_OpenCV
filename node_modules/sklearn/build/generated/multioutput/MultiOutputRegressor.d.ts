import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Multi target regression.

  This strategy consists of fitting one regressor per target. This is a simple strategy for extending regressors that do not natively support multi-target regression.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputRegressor.html
 */
export declare class MultiOutputRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MultiOutputRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model to data, separately for each output variable.
     */
    fit(opts: MultiOutputRegressorFitOptions): Promise<any>;
    /**
      Incrementally fit the model to data, for each output variable.
     */
    partial_fit(opts: MultiOutputRegressorPartialFitOptions): Promise<any>;
    /**
      Predict multi-output variable using model for each target variable.
     */
    predict(opts: MultiOutputRegressorPredictOptions): Promise<ArrayLike | SparseMatrix[]>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: MultiOutputRegressorScoreOptions): Promise<number>;
    /**
      Estimators used for predictions.
     */
    get estimators_(): Promise<any>;
    /**
      Number of features seen during fit. Only defined if the underlying estimator exposes such an attribute when fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Only defined if the underlying estimators expose such an attribute when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface MultiOutputRegressorOptions {
    /**
      An estimator object implementing fit and predict.
     */
    estimator?: any;
    /**
      The number of jobs to run in parallel. fit, predict and partial_fit (if supported by the passed estimator) will be parallelized for each target.
  
      When individual estimators are fast to train or predict, using n_jobs > 1 can result in slower performance due to the parallelism overhead.
  
      None means 1 unless in a joblib.parallel_backend context. -1 means using all available processes / threads. See Glossary for more details.
     */
    n_jobs?: number;
}
export interface MultiOutputRegressorFitOptions {
    /**
      The input data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Multi-output targets. An indicator matrix turns on multilabel estimation.
     */
    y?: ArrayLike | SparseMatrix[];
    /**
      Sample weights. If None, then samples are equally weighted. Only supported if the underlying regressor supports sample weights.
     */
    sample_weight?: ArrayLike;
    /**
      Parameters passed to the estimator.fit method of each step.
     */
    fit_params?: any;
}
export interface MultiOutputRegressorPartialFitOptions {
    /**
      The input data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Multi-output targets.
     */
    y?: ArrayLike | SparseMatrix[];
    /**
      Sample weights. If None, then samples are equally weighted. Only supported if the underlying regressor supports sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface MultiOutputRegressorPredictOptions {
    /**
      The input data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface MultiOutputRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=MultiOutputRegressor.d.ts.map