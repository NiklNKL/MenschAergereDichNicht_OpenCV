{"version":3,"sources":["../../../src/generated/decomposition/SparseCoder.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Sparse coding.\n\n  Finds a sparse representation of data against a fixed, precomputed dictionary.\n\n  Each row of the result is the solution to a sparse coding problem. The goal is to find a sparse array code such that:\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.SparseCoder.html\n */\nexport class SparseCoder {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: SparseCoderOptions) {\n    this.id = `SparseCoder${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('SparseCoder.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.decomposition import SparseCoder\ntry: bridgeSparseCoder\nexcept NameError: bridgeSparseCoder = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_SparseCoder = {'dictionary': np.array(${\n      this.opts['dictionary'] ?? undefined\n    }) if ${\n      this.opts['dictionary'] !== undefined\n    } else None, 'transform_algorithm': ${\n      this.opts['transform_algorithm'] ?? undefined\n    }, 'transform_n_nonzero_coefs': ${\n      this.opts['transform_n_nonzero_coefs'] ?? undefined\n    }, 'transform_alpha': ${\n      this.opts['transform_alpha'] ?? undefined\n    }, 'split_sign': ${this.opts['split_sign'] ?? undefined}, 'n_jobs': ${\n      this.opts['n_jobs'] ?? undefined\n    }, 'positive_code': ${\n      this.opts['positive_code'] ?? undefined\n    }, 'transform_max_iter': ${this.opts['transform_max_iter'] ?? undefined}}\n\nctor_SparseCoder = {k: v for k, v in ctor_SparseCoder.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeSparseCoder[${this.id}] = SparseCoder(**ctor_SparseCoder)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeSparseCoder[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Do nothing and return the estimator unchanged.\n\n    This method is just there to implement the usual API and hence work in pipelines.\n   */\n  async fit(opts: SparseCoderFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SparseCoder must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SparseCoder_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}}\n\npms_SparseCoder_fit = {k: v for k, v in pms_SparseCoder_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SparseCoder_fit = bridgeSparseCoder[${this.id}].fit(**pms_SparseCoder_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SparseCoder_fit.tolist() if hasattr(res_SparseCoder_fit, 'tolist') else res_SparseCoder_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.\n   */\n  async fit_transform(opts: SparseCoderFitTransformOptions): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SparseCoder must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SparseCoder_fit_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_SparseCoder_fit_transform = {k: v for k, v in pms_SparseCoder_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SparseCoder_fit_transform = bridgeSparseCoder[${this.id}].fit_transform(**pms_SparseCoder_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SparseCoder_fit_transform.tolist() if hasattr(res_SparseCoder_fit_transform, 'tolist') else res_SparseCoder_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: [\"class_name0\", \"class_name1\", \"class_name2\"].\n   */\n  async get_feature_names_out(\n    opts: SparseCoderGetFeatureNamesOutOptions\n  ): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SparseCoder must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SparseCoder_get_feature_names_out = {'input_features': ${\n      opts['input_features'] ?? undefined\n    }}\n\npms_SparseCoder_get_feature_names_out = {k: v for k, v in pms_SparseCoder_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SparseCoder_get_feature_names_out = bridgeSparseCoder[${this.id}].get_feature_names_out(**pms_SparseCoder_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SparseCoder_get_feature_names_out.tolist() if hasattr(res_SparseCoder_get_feature_names_out, 'tolist') else res_SparseCoder_get_feature_names_out`\n  }\n\n  /**\n    Set output container.\n\n    See Introducing the set_output API for an example on how to use the API.\n   */\n  async set_output(opts: SparseCoderSetOutputOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SparseCoder must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SparseCoder_set_output = {'transform': ${\n      opts['transform'] ?? undefined\n    }}\n\npms_SparseCoder_set_output = {k: v for k, v in pms_SparseCoder_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SparseCoder_set_output = bridgeSparseCoder[${this.id}].set_output(**pms_SparseCoder_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SparseCoder_set_output.tolist() if hasattr(res_SparseCoder_set_output, 'tolist') else res_SparseCoder_set_output`\n  }\n\n  /**\n    Encode the data as a sparse combination of the dictionary atoms.\n\n    Coding method is determined by the object parameter transform_algorithm.\n   */\n  async transform(opts: SparseCoderTransformOptions): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SparseCoder must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_SparseCoder_transform = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_SparseCoder_transform = {k: v for k, v in pms_SparseCoder_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SparseCoder_transform = bridgeSparseCoder[${this.id}].transform(**pms_SparseCoder_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SparseCoder_transform.tolist() if hasattr(res_SparseCoder_transform, 'tolist') else res_SparseCoder_transform`\n  }\n\n  /**\n    Names of features seen during fit. Defined only when X has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This SparseCoder instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SparseCoder must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SparseCoder_feature_names_in_ = bridgeSparseCoder[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SparseCoder_feature_names_in_.tolist() if hasattr(attr_SparseCoder_feature_names_in_, 'tolist') else attr_SparseCoder_feature_names_in_`\n    })()\n  }\n}\n\nexport interface SparseCoderOptions {\n  /**\n    The dictionary atoms used for sparse coding. Lines are assumed to be normalized to unit norm.\n   */\n  dictionary?: NDArray[]\n\n  /**\n    Algorithm used to transform the data:\n\n    @defaultValue `'omp'`\n   */\n  transform_algorithm?: 'lasso_lars' | 'lasso_cd' | 'lars' | 'omp' | 'threshold'\n\n  /**\n    Number of nonzero coefficients to target in each column of the solution. This is only used by algorithm='lars' and algorithm='omp' and is overridden by alpha in the omp case. If None, then transform_n_nonzero_coefs=int(n_features / 10).\n   */\n  transform_n_nonzero_coefs?: number\n\n  /**\n    If algorithm='lasso_lars' or algorithm='lasso_cd', alpha is the penalty applied to the L1 norm. If algorithm='threshold', alpha is the absolute value of the threshold below which coefficients will be squashed to zero. If algorithm='omp', alpha is the tolerance parameter: the value of the reconstruction error targeted. In this case, it overrides n_nonzero_coefs. If None, default to 1.\n   */\n  transform_alpha?: number\n\n  /**\n    Whether to split the sparse feature vector into the concatenation of its negative part and its positive part. This can improve the performance of downstream classifiers.\n\n    @defaultValue `false`\n   */\n  split_sign?: boolean\n\n  /**\n    Number of parallel jobs to run. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    Whether to enforce positivity when finding the code.\n\n    @defaultValue `false`\n   */\n  positive_code?: boolean\n\n  /**\n    Maximum number of iterations to perform if algorithm='lasso_cd' or lasso_lars.\n\n    @defaultValue `1000`\n   */\n  transform_max_iter?: number\n}\n\nexport interface SparseCoderFitOptions {\n  /**\n    Not used, present for API consistency by convention.\n   */\n  X?: any\n\n  /**\n    Not used, present for API consistency by convention.\n   */\n  y?: any\n}\n\nexport interface SparseCoderFitTransformOptions {\n  /**\n    Input samples.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target values (None for unsupervised transformations).\n   */\n  y?: ArrayLike\n\n  /**\n    Additional fit parameters.\n   */\n  fit_params?: any\n}\n\nexport interface SparseCoderGetFeatureNamesOutOptions {\n  /**\n    Only used to validate feature names with the names seen in fit.\n   */\n  input_features?: any\n}\n\nexport interface SparseCoderSetOutputOptions {\n  /**\n    Configure output of transform and fit_transform.\n   */\n  transform?: 'default' | 'pandas'\n}\n\nexport interface SparseCoderTransformOptions {\n  /**\n    Training vector, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: NDArray[]\n\n  /**\n    Not used, present for API consistency by convention.\n   */\n  y?: any\n}\n"],"mappings":"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","names":[]}