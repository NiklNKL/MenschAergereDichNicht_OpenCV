import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Principal component analysis (PCA).

  Linear dimensionality reduction using Singular Value Decomposition of the data to project it to a lower dimensional space. The input data is centered but not scaled for each feature before applying the SVD.

  It uses the LAPACK implementation of the full SVD or a randomized truncated SVD by the method of Halko et al. 2009, depending on the shape of the input data and the number of components to extract.

  It can also use the scipy.sparse.linalg ARPACK implementation of the truncated SVD.

  Notice that this class does not support sparse input. See TruncatedSVD for an alternative with sparse data.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html
 */
export declare class PCA {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: PCAOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model with X.
     */
    fit(opts: PCAFitOptions): Promise<any>;
    /**
      Fit the model with X and apply the dimensionality reduction on X.
     */
    fit_transform(opts: PCAFitTransformOptions): Promise<NDArray[]>;
    /**
      Compute data covariance with the generative model.
  
      cov = components_.T * S**2 * components_ + sigma2 * eye(n_features) where S**2 contains the explained variances, and sigma2 contains the noise variances.
     */
    get_covariance(opts: PCAGetCovarianceOptions): Promise<any>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: PCAGetFeatureNamesOutOptions): Promise<any>;
    /**
      Compute data precision matrix with the generative model.
  
      Equals the inverse of the covariance but computed with the matrix inversion lemma for efficiency.
     */
    get_precision(opts: PCAGetPrecisionOptions): Promise<any>;
    /**
      Transform data back to its original space.
  
      In other words, return an input X_original whose transform would be X.
     */
    inverse_transform(opts: PCAInverseTransformOptions): Promise<any>;
    /**
      Return the average log-likelihood of all samples.
  
      See. “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf
     */
    score(opts: PCAScoreOptions): Promise<number>;
    /**
      Return the log-likelihood of each sample.
  
      See. “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf
     */
    score_samples(opts: PCAScoreSamplesOptions): Promise<NDArray>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: PCASetOutputOptions): Promise<any>;
    /**
      Apply dimensionality reduction to X.
  
      X is projected on the first principal components previously extracted from a training set.
     */
    transform(opts: PCATransformOptions): Promise<ArrayLike[]>;
    /**
      Principal axes in feature space, representing the directions of maximum variance in the data. Equivalently, the right singular vectors of the centered input data, parallel to its eigenvectors. The components are sorted by decreasing explained_variance_.
     */
    get components_(): Promise<NDArray[]>;
    /**
      The amount of variance explained by each of the selected components. The variance estimation uses n_samples - 1 degrees of freedom.
  
      Equal to n_components largest eigenvalues of the covariance matrix of X.
     */
    get explained_variance_(): Promise<NDArray>;
    /**
      Percentage of variance explained by each of the selected components.
  
      If n_components is not set then all components are stored and the sum of the ratios is equal to 1.0.
     */
    get explained_variance_ratio_(): Promise<NDArray>;
    /**
      The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the n_components variables in the lower-dimensional space.
     */
    get singular_values_(): Promise<NDArray>;
    /**
      Per-feature empirical mean, estimated from the training set.
  
      Equal to X.mean(axis=0).
     */
    get mean_(): Promise<NDArray>;
    /**
      The estimated number of components. When n_components is set to ‘mle’ or a number between 0 and 1 (with svd_solver == ‘full’) this number is estimated from input data. Otherwise it equals the parameter n_components, or the lesser value of n_features and n_samples if n_components is None.
     */
    get n_components_(): Promise<number>;
    /**
      Number of features in the training data.
     */
    get n_features_(): Promise<number>;
    /**
      Number of samples in the training data.
     */
    get n_samples_(): Promise<number>;
    /**
      The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf. It is required to compute the estimated data covariance and score samples.
  
      Equal to the average of (min(n_features, n_samples) - n_components) smallest eigenvalues of the covariance matrix of X.
     */
    get noise_variance_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface PCAOptions {
    /**
      Number of components to keep. if n_components is not set all components are kept:
     */
    n_components?: number | 'mle';
    /**
      If False, data passed to fit are overwritten and running fit(X).transform(X) will not yield the expected results, use fit_transform(X) instead.
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      When True (False by default) the components_ vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances.
  
      Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions.
  
      @defaultValue `false`
     */
    whiten?: boolean;
    /**
      The solver is selected by a default policy based on X.shape and n_components: if the input data is larger than 500x500 and the number of components to extract is lower than 80% of the smallest dimension of the data, then the more efficient ‘randomized’ method is enabled. Otherwise the exact full SVD is computed and optionally truncated afterwards.
  
      @defaultValue `'auto'`
     */
    svd_solver?: 'auto' | 'full' | 'arpack' | 'randomized';
    /**
      Tolerance for singular values computed by svd_solver == ‘arpack’. Must be of range [0.0, infinity).
  
      @defaultValue `0`
     */
    tol?: number;
    /**
      Number of iterations for the power method computed by svd_solver == ‘randomized’. Must be of range [0, infinity).
  
      @defaultValue `'auto'`
     */
    iterated_power?: number | 'auto';
    /**
      This parameter is only relevant when svd_solver="randomized". It corresponds to the additional number of random vectors to sample the range of X so as to ensure proper conditioning. See randomized_svd for more details.
  
      @defaultValue `10`
     */
    n_oversamples?: number;
    /**
      Power iteration normalizer for randomized SVD solver. Not used by ARPACK. See randomized_svd for more details.
  
      @defaultValue `'auto'`
     */
    power_iteration_normalizer?: 'auto' | 'QR' | 'LU' | 'none';
    /**
      Used when the ‘arpack’ or ‘randomized’ solvers are used. Pass an int for reproducible results across multiple function calls. See Glossary.
     */
    random_state?: number;
}
export interface PCAFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Ignored.
     */
    y?: any;
}
export interface PCAFitTransformOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Ignored.
     */
    y?: any;
}
export interface PCAGetCovarianceOptions {
    /**
      Estimated covariance of data.
     */
    cov?: any;
}
export interface PCAGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface PCAGetPrecisionOptions {
    /**
      Estimated precision of data.
     */
    precision?: any;
}
export interface PCAInverseTransformOptions {
    /**
      New data, where n_samples is the number of samples and n_components is the number of components.
     */
    X?: ArrayLike[];
}
export interface PCAScoreOptions {
    /**
      The data.
     */
    X?: ArrayLike[];
    /**
      Ignored.
     */
    y?: any;
}
export interface PCAScoreSamplesOptions {
    /**
      The data.
     */
    X?: ArrayLike[];
}
export interface PCASetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface PCATransformOptions {
    /**
      New data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=PCA.d.ts.map