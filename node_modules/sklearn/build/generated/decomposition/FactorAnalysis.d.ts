import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Factor Analysis (FA).

  A simple linear generative model with Gaussian latent variables.

  The observations are assumed to be caused by a linear transformation of lower dimensional latent factors and added Gaussian noise. Without loss of generality the factors are distributed according to a Gaussian with zero mean and unit covariance. The noise is also zero mean and has an arbitrary diagonal covariance matrix.

  If we would restrict the model further, by assuming that the Gaussian noise is even isotropic (all diagonal entries are the same) we would obtain PCA.

  FactorAnalysis performs a maximum likelihood estimate of the so-called loading matrix, the transformation of the latent variables to the observed ones, using SVD based approach.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.FactorAnalysis.html
 */
export declare class FactorAnalysis {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: FactorAnalysisOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the FactorAnalysis model to X using SVD based approach.
     */
    fit(opts: FactorAnalysisFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: FactorAnalysisFitTransformOptions): Promise<any[]>;
    /**
      Compute data covariance with the FactorAnalysis model.
  
      cov = components_.T * components_ + diag(noise_variance)
     */
    get_covariance(opts: FactorAnalysisGetCovarianceOptions): Promise<any>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: FactorAnalysisGetFeatureNamesOutOptions): Promise<any>;
    /**
      Compute data precision matrix with the FactorAnalysis model.
     */
    get_precision(opts: FactorAnalysisGetPrecisionOptions): Promise<any>;
    /**
      Compute the average log-likelihood of the samples.
     */
    score(opts: FactorAnalysisScoreOptions): Promise<number>;
    /**
      Compute the log-likelihood of each sample.
     */
    score_samples(opts: FactorAnalysisScoreSamplesOptions): Promise<NDArray>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: FactorAnalysisSetOutputOptions): Promise<any>;
    /**
      Apply dimensionality reduction to X using the model.
  
      Compute the expected mean of the latent variables. See Barber, 21.2.33 (or Bishop, 12.66).
     */
    transform(opts: FactorAnalysisTransformOptions): Promise<NDArray[]>;
    /**
      Components with maximum variance.
     */
    get components_(): Promise<NDArray[]>;
    /**
      The log likelihood at each iteration.
     */
    get loglike_(): Promise<any[]>;
    /**
      The estimated noise variance for each feature.
     */
    get noise_variance_(): Promise<NDArray>;
    /**
      Number of iterations run.
     */
    get n_iter_(): Promise<number>;
    /**
      Per-feature empirical mean, estimated from the training set.
     */
    get mean_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface FactorAnalysisOptions {
    /**
      Dimensionality of latent space, the number of components of X that are obtained after transform. If None, n_components is set to the number of features.
     */
    n_components?: number;
    /**
      Stopping tolerance for log-likelihood increase.
  
      @defaultValue `0.01`
     */
    tol?: number;
    /**
      Whether to make a copy of X. If False, the input X gets overwritten during fitting.
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      Maximum number of iterations.
  
      @defaultValue `1000`
     */
    max_iter?: number;
    /**
      The initial guess of the noise variance for each feature. If None, it defaults to np.ones(n_features).
     */
    noise_variance_init?: ArrayLike;
    /**
      Which SVD method to use. If ‘lapack’ use standard SVD from scipy.linalg, if ‘randomized’ use fast randomized_svd function. Defaults to ‘randomized’. For most applications ‘randomized’ will be sufficiently precise while providing significant speed gains. Accuracy can also be improved by setting higher values for iterated_power. If this is not sufficient, for maximum precision you should choose ‘lapack’.
  
      @defaultValue `'randomized'`
     */
    svd_method?: 'lapack' | 'randomized';
    /**
      Number of iterations for the power method. 3 by default. Only used if svd_method equals ‘randomized’.
  
      @defaultValue `3`
     */
    iterated_power?: number;
    /**
      If not None, apply the indicated rotation. Currently, varimax and quartimax are implemented. See “The varimax criterion for analytic rotation in factor analysis” H. F. Kaiser, 1958.
     */
    rotation?: 'varimax' | 'quartimax';
    /**
      Only used when svd_method equals ‘randomized’. Pass an int for reproducible results across multiple function calls. See Glossary.
  
      @defaultValue `0`
     */
    random_state?: number;
}
export interface FactorAnalysisFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike[];
    /**
      Ignored parameter.
     */
    y?: any;
}
export interface FactorAnalysisFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface FactorAnalysisGetCovarianceOptions {
    /**
      Estimated covariance of data.
     */
    cov?: NDArray[];
}
export interface FactorAnalysisGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface FactorAnalysisGetPrecisionOptions {
    /**
      Estimated precision of data.
     */
    precision?: NDArray[];
}
export interface FactorAnalysisScoreOptions {
    /**
      The data.
     */
    X?: NDArray[];
    /**
      Ignored parameter.
     */
    y?: any;
}
export interface FactorAnalysisScoreSamplesOptions {
    /**
      The data.
     */
    X?: NDArray[];
}
export interface FactorAnalysisSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface FactorAnalysisTransformOptions {
    /**
      Training data.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=FactorAnalysis.d.ts.map