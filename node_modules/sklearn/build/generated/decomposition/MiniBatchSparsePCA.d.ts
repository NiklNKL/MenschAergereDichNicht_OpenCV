import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Mini-batch Sparse Principal Components Analysis.

  Finds the set of sparse components that can optimally reconstruct the data.  The amount of sparseness is controllable by the coefficient of the L1 penalty, given by the parameter alpha.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.MiniBatchSparsePCA.html
 */
export declare class MiniBatchSparsePCA {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MiniBatchSparsePCAOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model from data in X.
     */
    fit(opts: MiniBatchSparsePCAFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: MiniBatchSparsePCAFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: MiniBatchSparsePCAGetFeatureNamesOutOptions): Promise<any>;
    /**
      Transform data from the latent space to the original space.
  
      This inversion is an approximation due to the loss of information induced by the forward decomposition.
     */
    inverse_transform(opts: MiniBatchSparsePCAInverseTransformOptions): Promise<NDArray[]>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: MiniBatchSparsePCASetOutputOptions): Promise<any>;
    /**
      Least Squares projection of the data onto the sparse components.
  
      To avoid instability issues in case the system is under-determined, regularization can be applied (Ridge regression) via the ridge_alpha parameter.
  
      Note that Sparse PCA components orthogonality is not enforced as in PCA hence one cannot use a simple linear projection.
     */
    transform(opts: MiniBatchSparsePCATransformOptions): Promise<NDArray[]>;
    /**
      Sparse components extracted from the data.
     */
    get components_(): Promise<NDArray[]>;
    /**
      Estimated number of components.
     */
    get n_components_(): Promise<number>;
    /**
      Number of iterations run.
     */
    get n_iter_(): Promise<number>;
    /**
      Per-feature empirical mean, estimated from the training set. Equal to X.mean(axis=0).
     */
    get mean_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface MiniBatchSparsePCAOptions {
    /**
      Number of sparse atoms to extract. If None, then n_components is set to n_features.
     */
    n_components?: number;
    /**
      Sparsity controlling parameter. Higher values lead to sparser components.
  
      @defaultValue `1`
     */
    alpha?: number;
    /**
      Amount of ridge shrinkage to apply in order to improve conditioning when calling the transform method.
  
      @defaultValue `0.01`
     */
    ridge_alpha?: number;
    /**
      Number of iterations to perform for each mini batch.
  
      @defaultValue `100`
     */
    n_iter?: number;
    /**
      Maximum number of iterations over the complete dataset before stopping independently of any early stopping criterion heuristics. If max_iter is not None, n_iter is ignored.
     */
    max_iter?: number;
    /**
      Callable that gets invoked every five iterations.
     */
    callback?: any;
    /**
      The number of features to take in each mini batch.
  
      @defaultValue `3`
     */
    batch_size?: number;
    /**
      Controls the verbosity; the higher, the more messages. Defaults to 0.
  
      @defaultValue `false`
     */
    verbose?: number | boolean;
    /**
      Whether to shuffle the data before splitting it in batches.
  
      @defaultValue `true`
     */
    shuffle?: boolean;
    /**
      Number of parallel jobs to run. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Method to be used for optimization. lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.
  
      @defaultValue `'lars'`
     */
    method?: 'lars' | 'cd';
    /**
      Used for random shuffling when shuffle is set to True, during online dictionary learning. Pass an int for reproducible results across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      Control early stopping based on the norm of the differences in the dictionary between 2 steps. Used only if max_iter is not None.
  
      To disable early stopping based on changes in the dictionary, set tol to 0.0.
  
      @defaultValue `0.001`
     */
    tol?: number;
    /**
      Control early stopping based on the consecutive number of mini batches that does not yield an improvement on the smoothed cost function. Used only if max_iter is not None.
  
      To disable convergence detection based on cost function, set max_no_improvement to None.
  
      @defaultValue `10`
     */
    max_no_improvement?: number;
}
export interface MiniBatchSparsePCAFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface MiniBatchSparsePCAFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface MiniBatchSparsePCAGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface MiniBatchSparsePCAInverseTransformOptions {
    /**
      Data in the latent space.
     */
    X?: NDArray[];
}
export interface MiniBatchSparsePCASetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface MiniBatchSparsePCATransformOptions {
    /**
      Test data to be transformed, must have the same number of features as the data used to train the model.
     */
    X?: NDArray[];
}
//# sourceMappingURL=MiniBatchSparsePCA.d.ts.map