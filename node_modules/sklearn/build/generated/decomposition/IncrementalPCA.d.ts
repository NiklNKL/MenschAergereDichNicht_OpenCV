import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Incremental principal components analysis (IPCA).

  Linear dimensionality reduction using Singular Value Decomposition of the data, keeping only the most significant singular vectors to project the data to a lower dimensional space. The input data is centered but not scaled for each feature before applying the SVD.

  Depending on the size of the input data, this algorithm can be much more memory efficient than a PCA, and allows sparse input.

  This algorithm has constant memory complexity, on the order of batch_size * n_features, enabling use of np.memmap files without loading the entire file into memory. For sparse matrices, the input is converted to dense in batches (in order to be able to subtract the mean) which avoids storing the entire dense matrix at any one time.

  The computational overhead of each SVD is O(batch_size * n_features ** 2), but only 2 * batch_size samples remain in memory at a time. There will be n_samples / batch_size SVD computations to get the principal components, versus 1 large SVD of complexity O(n_samples * n_features ** 2) for PCA.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.IncrementalPCA.html
 */
export declare class IncrementalPCA {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: IncrementalPCAOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model with X, using minibatches of size batch_size.
     */
    fit(opts: IncrementalPCAFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: IncrementalPCAFitTransformOptions): Promise<any[]>;
    /**
      Compute data covariance with the generative model.
  
      cov = components_.T * S**2 * components_ + sigma2 * eye(n_features) where S**2 contains the explained variances, and sigma2 contains the noise variances.
     */
    get_covariance(opts: IncrementalPCAGetCovarianceOptions): Promise<any>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: IncrementalPCAGetFeatureNamesOutOptions): Promise<any>;
    /**
      Compute data precision matrix with the generative model.
  
      Equals the inverse of the covariance but computed with the matrix inversion lemma for efficiency.
     */
    get_precision(opts: IncrementalPCAGetPrecisionOptions): Promise<any>;
    /**
      Transform data back to its original space.
  
      In other words, return an input X_original whose transform would be X.
     */
    inverse_transform(opts: IncrementalPCAInverseTransformOptions): Promise<any>;
    /**
      Incremental fit with X. All of X is processed as a single batch.
     */
    partial_fit(opts: IncrementalPCAPartialFitOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: IncrementalPCASetOutputOptions): Promise<any>;
    /**
      Apply dimensionality reduction to X.
  
      X is projected on the first principal components previously extracted from a training set, using minibatches of size batch_size if X is sparse.
     */
    transform(opts: IncrementalPCATransformOptions): Promise<NDArray[]>;
    /**
      Principal axes in feature space, representing the directions of maximum variance in the data. Equivalently, the right singular vectors of the centered input data, parallel to its eigenvectors. The components are sorted by decreasing explained_variance_.
     */
    get components_(): Promise<NDArray[]>;
    /**
      Variance explained by each of the selected components.
     */
    get explained_variance_(): Promise<NDArray>;
    /**
      Percentage of variance explained by each of the selected components. If all components are stored, the sum of explained variances is equal to 1.0.
     */
    get explained_variance_ratio_(): Promise<NDArray>;
    /**
      The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the n_components variables in the lower-dimensional space.
     */
    get singular_values_(): Promise<NDArray>;
    /**
      Per-feature empirical mean, aggregate over calls to partial_fit.
     */
    get mean_(): Promise<NDArray>;
    /**
      Per-feature empirical variance, aggregate over calls to partial_fit.
     */
    get var_(): Promise<NDArray>;
    /**
      The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf.
     */
    get noise_variance_(): Promise<number>;
    /**
      The estimated number of components. Relevant when n_components=None.
     */
    get n_components_(): Promise<number>;
    /**
      The number of samples processed by the estimator. Will be reset on new calls to fit, but increments across partial_fit calls.
     */
    get n_samples_seen_(): Promise<number>;
    /**
      Inferred batch size from batch_size.
     */
    get batch_size_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface IncrementalPCAOptions {
    /**
      Number of components to keep. If n_components is None, then n_components is set to min(n_samples, n_features).
     */
    n_components?: number;
    /**
      When True (False by default) the components_ vectors are divided by n_samples times components_ to ensure uncorrelated outputs with unit component-wise variances.
  
      Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometimes improve the predictive accuracy of the downstream estimators by making data respect some hard-wired assumptions.
  
      @defaultValue `false`
     */
    whiten?: boolean;
    /**
      If False, X will be overwritten. copy=False can be used to save memory but is unsafe for general use.
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      The number of samples to use for each batch. Only used when calling fit. If batch_size is None, then batch_size is inferred from the data and set to 5 * n_features, to provide a balance between approximation accuracy and memory consumption.
     */
    batch_size?: number;
}
export interface IncrementalPCAFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface IncrementalPCAFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface IncrementalPCAGetCovarianceOptions {
    /**
      Estimated covariance of data.
     */
    cov?: any;
}
export interface IncrementalPCAGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface IncrementalPCAGetPrecisionOptions {
    /**
      Estimated precision of data.
     */
    precision?: any;
}
export interface IncrementalPCAInverseTransformOptions {
    /**
      New data, where n_samples is the number of samples and n_components is the number of components.
     */
    X?: ArrayLike[];
}
export interface IncrementalPCAPartialFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
    /**
      Run check_array on X.
  
      @defaultValue `true`
     */
    check_input?: boolean;
}
export interface IncrementalPCASetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface IncrementalPCATransformOptions {
    /**
      New data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
}
//# sourceMappingURL=IncrementalPCA.d.ts.map