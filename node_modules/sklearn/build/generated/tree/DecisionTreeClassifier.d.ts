import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  A decision tree classifier.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html
 */
export declare class DecisionTreeClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: DecisionTreeClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Return the index of the leaf that each sample is predicted as.
     */
    apply(opts: DecisionTreeClassifierApplyOptions): Promise<ArrayLike>;
    /**
      Compute the pruning path during Minimal Cost-Complexity Pruning.
  
      See Minimal Cost-Complexity Pruning for details on the pruning process.
     */
    cost_complexity_pruning_path(opts: DecisionTreeClassifierCostComplexityPruningPathOptions): Promise<any>;
    /**
      Return the decision path in the tree.
     */
    decision_path(opts: DecisionTreeClassifierDecisionPathOptions): Promise<SparseMatrix[]>;
    /**
      Build a decision tree classifier from the training set (X, y).
     */
    fit(opts: DecisionTreeClassifierFitOptions): Promise<any>;
    /**
      Return the depth of the decision tree.
  
      The depth of a tree is the maximum distance between the root and any leaf.
     */
    get_depth(opts: DecisionTreeClassifierGetDepthOptions): Promise<any>;
    /**
      Return the number of leaves of the decision tree.
     */
    get_n_leaves(opts: DecisionTreeClassifierGetNLeavesOptions): Promise<any>;
    /**
      Predict class or regression value for X.
  
      For a classification model, the predicted class for each sample in X is returned. For a regression model, the predicted value based on X is returned.
     */
    predict(opts: DecisionTreeClassifierPredictOptions): Promise<ArrayLike>;
    /**
      Predict class log-probabilities of the input samples X.
     */
    predict_log_proba(opts: DecisionTreeClassifierPredictLogProbaOptions): Promise<NDArray[]>;
    /**
      Predict class probabilities of the input samples X.
  
      The predicted class probability is the fraction of samples of the same class in a leaf.
     */
    predict_proba(opts: DecisionTreeClassifierPredictProbaOptions): Promise<NDArray[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: DecisionTreeClassifierScoreOptions): Promise<number>;
    /**
      The classes labels (single output problem), or a list of arrays of class labels (multi-output problem).
     */
    get classes_(): Promise<NDArray>;
    /**
      The inferred value of max_features.
     */
    get max_features_(): Promise<number>;
    /**
      The number of classes (for single output problems), or a list containing the number of classes for each output (for multi-output problems).
     */
    get n_classes_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of outputs when fit is performed.
     */
    get n_outputs_(): Promise<number>;
    /**
      The underlying Tree object. Please refer to help(sklearn.tree._tree.Tree) for attributes of Tree object and Understanding the decision tree structure for basic usage of these attributes.
     */
    get tree_(): Promise<any>;
}
export interface DecisionTreeClassifierOptions {
    /**
      The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “log_loss” and “entropy” both for the Shannon information gain, see Mathematical formulation.
  
      @defaultValue `'gini'`
     */
    criterion?: 'gini' | 'entropy' | 'log_loss';
    /**
      The strategy used to choose the split at each node. Supported strategies are “best” to choose the best split and “random” to choose the best random split.
  
      @defaultValue `'best'`
     */
    splitter?: 'best' | 'random';
    /**
      The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.
     */
    max_depth?: number;
    /**
      The minimum number of samples required to split an internal node:
  
      @defaultValue `2`
     */
    min_samples_split?: number;
    /**
      The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.
  
      @defaultValue `1`
     */
    min_samples_leaf?: number;
    /**
      The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.
  
      @defaultValue `0`
     */
    min_weight_fraction_leaf?: number;
    /**
      The number of features to consider when looking for the best split:
     */
    max_features?: number | 'auto' | 'sqrt' | 'log2';
    /**
      Controls the randomness of the estimator. The features are always randomly permuted at each split, even if splitter is set to "best". When max_features < n_features, the algorithm will select max_features at random at each split before finding the best split among them. But the best found split may vary across different runs, even if max_features=n_features. That is the case, if the improvement of the criterion is identical for several splits and one split has to be selected at random. To obtain a deterministic behaviour during fitting, random_state has to be fixed to an integer. See Glossary for details.
     */
    random_state?: number;
    /**
      Grow a tree with max_leaf_nodes in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.
     */
    max_leaf_nodes?: number;
    /**
      A node will be split if this split induces a decrease of the impurity greater than or equal to this value.
  
      The weighted impurity decrease equation is the following:
  
      @defaultValue `0`
     */
    min_impurity_decrease?: number;
    /**
      Weights associated with classes in the form {class_label: weight}. If None, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.
  
      Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}].
  
      The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))
  
      For multi-output, the weights of each column of y will be multiplied.
  
      Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.
     */
    class_weight?: any | 'balanced';
    /**
      Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ccp_alpha will be chosen. By default, no pruning is performed. See Minimal Cost-Complexity Pruning for details.
  
      @defaultValue `0`
     */
    ccp_alpha?: any;
}
export interface DecisionTreeClassifierApplyOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Allow to bypass several input checking. Don’t use this parameter unless you know what you’re doing.
  
      @defaultValue `true`
     */
    check_input?: boolean;
}
export interface DecisionTreeClassifierCostComplexityPruningPathOptions {
    /**
      The training input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csc_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      The target values (class labels) as integers or strings.
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. Splits are also ignored if they would result in any single class carrying a negative weight in either child node.
     */
    sample_weight?: ArrayLike;
}
export interface DecisionTreeClassifierDecisionPathOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Allow to bypass several input checking. Don’t use this parameter unless you know what you’re doing.
  
      @defaultValue `true`
     */
    check_input?: boolean;
}
export interface DecisionTreeClassifierFitOptions {
    /**
      The training input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csc_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      The target values (class labels) as integers or strings.
     */
    y?: ArrayLike;
    /**
      Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. Splits are also ignored if they would result in any single class carrying a negative weight in either child node.
     */
    sample_weight?: ArrayLike;
    /**
      Allow to bypass several input checking. Don’t use this parameter unless you know what you’re doing.
  
      @defaultValue `true`
     */
    check_input?: boolean;
}
export interface DecisionTreeClassifierGetDepthOptions {
}
export interface DecisionTreeClassifierGetNLeavesOptions {
}
export interface DecisionTreeClassifierPredictOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Allow to bypass several input checking. Don’t use this parameter unless you know what you’re doing.
  
      @defaultValue `true`
     */
    check_input?: boolean;
}
export interface DecisionTreeClassifierPredictLogProbaOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface DecisionTreeClassifierPredictProbaOptions {
    /**
      The input samples. Internally, it will be converted to dtype=np.float32 and if a sparse matrix is provided to a sparse csr_matrix.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Allow to bypass several input checking. Don’t use this parameter unless you know what you’re doing.
  
      @defaultValue `true`
     */
    check_input?: boolean;
}
export interface DecisionTreeClassifierScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=DecisionTreeClassifier.d.ts.map