import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Extracts patches from a collection of images.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.image.PatchExtractor.html
 */
export declare class PatchExtractor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: PatchExtractorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Do nothing and return the estimator unchanged.
  
      This method is just there to implement the usual API and hence work in pipelines.
     */
    fit(opts: PatchExtractorFitOptions): Promise<any>;
    /**
      Transform the image samples in X into a matrix of patch data.
     */
    transform(opts: PatchExtractorTransformOptions): Promise<any[]>;
}
export interface PatchExtractorOptions {
    /**
      The dimensions of one patch.
     */
    patch_size?: any;
    /**
      The maximum number of patches per image to extract. If max_patches is a float in (0, 1), it is taken to mean a proportion of the total number of patches.
     */
    max_patches?: number;
    /**
      Determines the random number generator used for random sampling when max_patches is not None. Use an int to make the randomness deterministic. See Glossary.
     */
    random_state?: number;
}
export interface PatchExtractorFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike[];
    /**
      Not used, present for API consistency by convention.
     */
    y?: any;
}
export interface PatchExtractorTransformOptions {
    /**
      Array of images from which to extract patches. For color images, the last dimension specifies the channel: a RGB image would have n_channels=3.
     */
    X?: NDArray[][];
}
//# sourceMappingURL=PatchExtractor.d.ts.map