import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  The Sum kernel takes two kernels \(k_1\) and \(k_2\) and combines them via

  @see https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Sum.html
 */
export declare class Sum {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SumOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Return the kernel k(X, Y) and optionally its gradient.
     */
    __call__(opts: SumCallOptions): Promise<NDArray[]>;
    /**
      Returns a clone of self with given hyperparameters theta.
     */
    clone_with_theta(opts: SumCloneWithThetaOptions): Promise<any>;
    /**
      Returns the diagonal of the kernel k(X, X).
  
      The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.
     */
    diag(opts: SumDiagOptions): Promise<NDArray>;
    /**
      Returns whether the kernel is stationary.
     */
    is_stationary(opts: SumIsStationaryOptions): Promise<any>;
}
export interface SumOptions {
    /**
      The first base-kernel of the sum-kernel
     */
    k1?: any;
    /**
      The second base-kernel of the sum-kernel
     */
    k2?: any;
}
export interface SumCallOptions {
    /**
      Left argument of the returned kernel k(X, Y)
     */
    X?: ArrayLike[];
    /**
      Right argument of the returned kernel k(X, Y). If None, k(X, X) is evaluated instead.
     */
    Y?: ArrayLike[];
    /**
      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed.
  
      @defaultValue `false`
     */
    eval_gradient?: boolean;
}
export interface SumCloneWithThetaOptions {
    /**
      The hyperparameters
     */
    theta?: NDArray;
}
export interface SumDiagOptions {
    /**
      Argument to the kernel.
     */
    X?: ArrayLike[];
}
export interface SumIsStationaryOptions {
}
//# sourceMappingURL=Sum.d.ts.map