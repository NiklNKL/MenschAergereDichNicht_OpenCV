import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Reduce dimensionality through Gaussian random projection.

  The components of the random matrix are drawn from N(0, 1 / n_components).

  @see https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.GaussianRandomProjection.html
 */
export declare class GaussianRandomProjection {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: GaussianRandomProjectionOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Generate a sparse random projection matrix.
     */
    fit(opts: GaussianRandomProjectionFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: GaussianRandomProjectionFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: GaussianRandomProjectionGetFeatureNamesOutOptions): Promise<any>;
    /**
      Project data back to its original space.
  
      Returns an array X_original whose transform would be X. Note that even if X is sparse, X_original is dense: this may use a lot of RAM.
  
      If compute_inverse_components is False, the inverse of the components is computed during each call to inverse_transform which can be costly.
     */
    inverse_transform(opts: GaussianRandomProjectionInverseTransformOptions): Promise<NDArray[]>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: GaussianRandomProjectionSetOutputOptions): Promise<any>;
    /**
      Project the data by using matrix product with the random matrix.
     */
    transform(opts: GaussianRandomProjectionTransformOptions): Promise<NDArray[]>;
    /**
      Concrete number of components computed when n_components=”auto”.
     */
    get n_components_(): Promise<number>;
    /**
      Random matrix used for the projection.
     */
    get components_(): Promise<NDArray[]>;
    /**
      Pseudo-inverse of the components, only computed if compute_inverse_components is True.
     */
    get inverse_components_(): Promise<NDArray[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface GaussianRandomProjectionOptions {
    /**
      Dimensionality of the target projection space.
  
      n_components can be automatically adjusted according to the number of samples in the dataset and the bound given by the Johnson-Lindenstrauss lemma. In that case the quality of the embedding is controlled by the eps parameter.
  
      It should be noted that Johnson-Lindenstrauss lemma can yield very conservative estimated of the required number of components as it makes no assumption on the structure of the dataset.
  
      @defaultValue `'auto'`
     */
    n_components?: number | 'auto';
    /**
      Parameter to control the quality of the embedding according to the Johnson-Lindenstrauss lemma when n_components is set to ‘auto’. The value should be strictly positive.
  
      Smaller values lead to better embedding and higher number of dimensions (n_components) in the target projection space.
  
      @defaultValue `0.1`
     */
    eps?: number;
    /**
      Learn the inverse transform by computing the pseudo-inverse of the components during fit. Note that computing the pseudo-inverse does not scale well to large matrices.
  
      @defaultValue `false`
     */
    compute_inverse_components?: boolean;
    /**
      Controls the pseudo random number generator used to generate the projection matrix at fit time. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
}
export interface GaussianRandomProjectionFitOptions {
    /**
      Training set: only the shape is used to find optimal random matrix dimensions based on the theory referenced in the afore mentioned papers.
     */
    X?: NDArray | SparseMatrix[];
    /**
      Not used, present here for API consistency by convention.
     */
    y?: any;
}
export interface GaussianRandomProjectionFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface GaussianRandomProjectionGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface GaussianRandomProjectionInverseTransformOptions {
    /**
      Data to be transformed back.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface GaussianRandomProjectionSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface GaussianRandomProjectionTransformOptions {
    /**
      The input data to project into a smaller dimensional space.
     */
    X?: NDArray | SparseMatrix[];
}
//# sourceMappingURL=GaussianRandomProjection.d.ts.map