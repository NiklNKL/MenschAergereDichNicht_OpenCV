import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Cross-validated Orthogonal Matching Pursuit model (OMP).

  See glossary entry for cross-validation estimator.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.html
 */
export declare class OrthogonalMatchingPursuitCV {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: OrthogonalMatchingPursuitCVOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model using X, y as training data.
     */
    fit(opts: OrthogonalMatchingPursuitCVFitOptions): Promise<any>;
    /**
      Predict using the linear model.
     */
    predict(opts: OrthogonalMatchingPursuitCVPredictOptions): Promise<any>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: OrthogonalMatchingPursuitCVScoreOptions): Promise<number>;
    /**
      Independent term in decision function.
     */
    get intercept_(): Promise<number | NDArray>;
    /**
      Parameter vector (w in the problem formulation).
     */
    get coef_(): Promise<NDArray>;
    /**
      Estimated number of non-zero coefficients giving the best mean squared error over the cross-validation folds.
     */
    get n_nonzero_coefs_(): Promise<number>;
    /**
      Number of active features across every target for the model refit with the best hyperparameters got by cross-validating across all folds.
     */
    get n_iter_(): Promise<number | ArrayLike>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface OrthogonalMatchingPursuitCVOptions {
    /**
      Whether the design matrix X must be copied by the algorithm. A false value is only helpful if X is already Fortran-ordered, otherwise a copy is made anyway.
  
      @defaultValue `true`
     */
    copy?: boolean;
    /**
      Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered).
  
      @defaultValue `true`
     */
    fit_intercept?: boolean;
    /**
      This parameter is ignored when fit_intercept is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use StandardScaler before calling fit on an estimator with normalize=False.
  
      @defaultValue `false`
     */
    normalize?: boolean;
    /**
      Maximum numbers of iterations to perform, therefore maximum features to include. 10% of n_features but at least 5 if available.
     */
    max_iter?: number;
    /**
      Determines the cross-validation splitting strategy. Possible inputs for cv are:
     */
    cv?: number;
    /**
      Number of CPUs to use during the cross validation. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Sets the verbosity amount.
  
      @defaultValue `false`
     */
    verbose?: boolean | number;
}
export interface OrthogonalMatchingPursuitCVFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike[];
    /**
      Target values. Will be cast to Xâ€™s dtype if necessary.
     */
    y?: ArrayLike;
}
export interface OrthogonalMatchingPursuitCVPredictOptions {
    /**
      Samples.
     */
    X?: ArrayLike | SparseMatrix;
}
export interface OrthogonalMatchingPursuitCVScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=OrthogonalMatchingPursuitCV.d.ts.map