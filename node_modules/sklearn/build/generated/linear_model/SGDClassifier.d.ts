import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Linear classifiers (SVM, logistic regression, etc.) with SGD training.

  This estimator implements regularized linear models with stochastic gradient descent (SGD) learning: the gradient of the loss is estimated each sample at a time and the model is updated along the way with a decreasing strength schedule (aka learning rate). SGD allows minibatch (online/out-of-core) learning via the partial_fit method. For best results using the default learning rate schedule, the data should have zero mean and unit variance.

  This implementation works with data represented as dense or sparse arrays of floating point values for the features. The model it fits can be controlled with the loss parameter; by default, it fits a linear support vector machine (SVM).

  The regularizer is a penalty added to the loss function that shrinks model parameters towards the zero vector using either the squared euclidean norm L2 or the absolute norm L1 or a combination of both (Elastic Net). If the parameter update crosses the 0.0 value because of the regularizer, the update is truncated to 0.0 to allow for learning sparse models and achieve online feature selection.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html
 */
export declare class SGDClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SGDClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Predict confidence scores for samples.
  
      The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.
     */
    decision_function(opts: SGDClassifierDecisionFunctionOptions): Promise<NDArray>;
    /**
      Convert coefficient matrix to dense array format.
  
      Converts the coef_ member (back) to a numpy.ndarray. This is the default format of coef_ and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
    densify(opts: SGDClassifierDensifyOptions): Promise<any>;
    /**
      Fit linear model with Stochastic Gradient Descent.
     */
    fit(opts: SGDClassifierFitOptions): Promise<any>;
    /**
      Perform one epoch of stochastic gradient descent on given samples.
  
      Internally, this method uses max_iter = 1. Therefore, it is not guaranteed that a minimum of the cost function is reached after calling it once. Matters such as objective convergence, early stopping, and learning rate adjustments should be handled by the user.
     */
    partial_fit(opts: SGDClassifierPartialFitOptions): Promise<any>;
    /**
      Predict class labels for samples in X.
     */
    predict(opts: SGDClassifierPredictOptions): Promise<NDArray>;
    /**
      Log of probability estimates.
  
      This method is only available for log loss and modified Huber loss.
  
      When loss=”modified_huber”, probability estimates may be hard zeros and ones, so taking the logarithm is not possible.
  
      See predict_proba for details.
     */
    predict_log_proba(opts: SGDClassifierPredictLogProbaOptions): Promise<ArrayLike>;
    /**
      Probability estimates.
  
      This method is only available for log loss and modified Huber loss.
  
      Multiclass probability estimates are derived from binary (one-vs.-rest) estimates by simple normalization, as recommended by Zadrozny and Elkan.
  
      Binary probability estimates for loss=”modified_huber” are given by (clip(decision_function(X), -1, 1) + 1) / 2. For other loss functions it is necessary to perform proper probability calibration by wrapping the classifier with CalibratedClassifierCV instead.
     */
    predict_proba(opts: SGDClassifierPredictProbaOptions): Promise<any>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: SGDClassifierScoreOptions): Promise<number>;
    /**
      Convert coefficient matrix to sparse format.
  
      Converts the coef_ member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The intercept_ member is not converted.
     */
    sparsify(opts: SGDClassifierSparsifyOptions): Promise<any>;
    /**
      Weights assigned to the features.
     */
    get coef_(): Promise<NDArray[][]>;
    /**
      Constants in decision function.
     */
    get intercept_(): Promise<NDArray[]>;
    /**
      The actual number of iterations before reaching the stopping criterion. For multiclass fits, it is the maximum over every binary fit.
     */
    get n_iter_(): Promise<number>;
    get loss_function_(): Promise<any>;
    get classes_(): Promise<any[]>;
    /**
      Number of weight updates performed during training. Same as (n_iter_ * n_samples + 1).
     */
    get t_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface SGDClassifierOptions {
    /**
      The loss function to be used.
  
      @defaultValue `'hinge'`
     */
    loss?: 'hinge' | 'log_loss' | 'log' | 'modified_huber' | 'squared_hinge' | 'perceptron' | 'squared_error' | 'huber' | 'epsilon_insensitive' | 'squared_epsilon_insensitive';
    /**
      The penalty (aka regularization term) to be used. Defaults to ‘l2’ which is the standard regularizer for linear SVM models. ‘l1’ and ‘elasticnet’ might bring sparsity to the model (feature selection) not achievable with ‘l2’. No penalty is added when set to None.
  
      @defaultValue `'l2'`
     */
    penalty?: 'l2' | 'l1' | 'elasticnet';
    /**
      Constant that multiplies the regularization term. The higher the value, the stronger the regularization. Also used to compute the learning rate when learning_rate is set to ‘optimal’. Values must be in the range [0.0, inf).
  
      @defaultValue `0.0001`
     */
    alpha?: number;
    /**
      The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1. l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1. Only used if penalty is ‘elasticnet’. Values must be in the range [0.0, 1.0].
  
      @defaultValue `0.15`
     */
    l1_ratio?: number;
    /**
      Whether the intercept should be estimated or not. If False, the data is assumed to be already centered.
  
      @defaultValue `true`
     */
    fit_intercept?: boolean;
    /**
      The maximum number of passes over the training data (aka epochs). It only impacts the behavior in the fit method, and not the partial_fit method. Values must be in the range [1, inf).
  
      @defaultValue `1000`
     */
    max_iter?: number;
    /**
      The stopping criterion. If it is not None, training will stop when (loss > best_loss - tol) for n_iter_no_change consecutive epochs. Convergence is checked against the training loss or the validation loss depending on the early_stopping parameter. Values must be in the range [0.0, inf).
  
      @defaultValue `0.001`
     */
    tol?: number;
    /**
      Whether or not the training data should be shuffled after each epoch.
  
      @defaultValue `true`
     */
    shuffle?: boolean;
    /**
      The verbosity level. Values must be in the range [0, inf).
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      Epsilon in the epsilon-insensitive loss functions; only if loss is ‘huber’, ‘epsilon_insensitive’, or ‘squared_epsilon_insensitive’. For ‘huber’, determines the threshold at which it becomes less important to get the prediction exactly right. For epsilon-insensitive, any differences between the current prediction and the correct label are ignored if they are less than this threshold. Values must be in the range [0.0, inf).
  
      @defaultValue `0.1`
     */
    epsilon?: number;
    /**
      The number of CPUs to use to do the OVA (One Versus All, for multi-class problems) computation. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Used for shuffling the data, when shuffle is set to True. Pass an int for reproducible output across multiple function calls. See Glossary. Integer values must be in the range [0, 2**32 - 1].
     */
    random_state?: number;
    /**
      The learning rate schedule:
  
      @defaultValue `'optimal'`
     */
    learning_rate?: string;
    /**
      The initial learning rate for the ‘constant’, ‘invscaling’ or ‘adaptive’ schedules. The default value is 0.0 as eta0 is not used by the default schedule ‘optimal’. Values must be in the range (0.0, inf).
  
      @defaultValue `0`
     */
    eta0?: number;
    /**
      The exponent for inverse scaling learning rate [default 0.5]. Values must be in the range (-inf, inf).
  
      @defaultValue `0.5`
     */
    power_t?: number;
    /**
      Whether to use early stopping to terminate training when validation score is not improving. If set to True, it will automatically set aside a stratified fraction of training data as validation and terminate training when validation score returned by the score method is not improving by at least tol for n_iter_no_change consecutive epochs.
  
      @defaultValue `false`
     */
    early_stopping?: boolean;
    /**
      The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True. Values must be in the range (0.0, 1.0).
  
      @defaultValue `0.1`
     */
    validation_fraction?: number;
    /**
      Number of iterations with no improvement to wait before stopping fitting. Convergence is checked against the training loss or the validation loss depending on the early_stopping parameter. Integer values must be in the range [1, max_iter).
  
      @defaultValue `5`
     */
    n_iter_no_change?: number;
    /**
      Preset for the class_weight fit parameter.
  
      Weights associated with classes. If not given, all classes are supposed to have weight one.
  
      The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y)).
     */
    class_weight?: any | 'balanced';
    /**
      When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See the Glossary.
  
      Repeatedly calling fit or partial_fit when warm_start is True can result in a different solution than when calling fit a single time because of the way the data is shuffled. If a dynamic learning rate is used, the learning rate is adapted depending on the number of samples already seen. Calling fit resets this counter, while partial_fit will result in increasing the existing counter.
  
      @defaultValue `false`
     */
    warm_start?: boolean;
    /**
      When set to True, computes the averaged SGD weights across all updates and stores the result in the coef_ attribute. If set to an int greater than 1, averaging will begin once the total number of samples seen reaches average. So average=10 will begin averaging after seeing 10 samples. Integer values must be in the range [1, n_samples].
  
      @defaultValue `false`
     */
    average?: boolean | number;
}
export interface SGDClassifierDecisionFunctionOptions {
    /**
      The data matrix for which we want to get the confidence scores.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SGDClassifierDensifyOptions {
}
export interface SGDClassifierFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Target values.
     */
    y?: NDArray;
    /**
      The initial coefficients to warm-start the optimization.
     */
    coef_init?: NDArray[];
    /**
      The initial intercept to warm-start the optimization.
     */
    intercept_init?: NDArray;
    /**
      Weights applied to individual samples. If not provided, uniform weights are assumed. These weights will be multiplied with class_weight (passed through the constructor) if class_weight is specified.
     */
    sample_weight?: ArrayLike;
}
export interface SGDClassifierPartialFitOptions {
    /**
      Subset of the training data.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Subset of the target values.
     */
    y?: NDArray;
    /**
      Classes across all calls to partial_fit. Can be obtained by via np.unique(y_all), where y_all is the target vector of the entire dataset. This argument is required for the first call to partial_fit and can be omitted in the subsequent calls. Note that y doesn’t need to contain all labels in classes.
     */
    classes?: NDArray;
    /**
      Weights applied to individual samples. If not provided, uniform weights are assumed.
     */
    sample_weight?: ArrayLike;
}
export interface SGDClassifierPredictOptions {
    /**
      The data matrix for which we want to get the predictions.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SGDClassifierPredictLogProbaOptions {
    /**
      Input data for prediction.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface SGDClassifierPredictProbaOptions {
    /**
      Input data for prediction.
     */
    X?: ArrayLike | SparseMatrix;
}
export interface SGDClassifierScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface SGDClassifierSparsifyOptions {
}
//# sourceMappingURL=SGDClassifier.d.ts.map