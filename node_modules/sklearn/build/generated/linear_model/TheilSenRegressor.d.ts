import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Theil-Sen Estimator: robust multivariate regression model.

  The algorithm calculates least square solutions on subsets with size n_subsamples of the samples in X. Any value of n_subsamples between the number of features and samples leads to an estimator with a compromise between robustness and efficiency. Since the number of least square solutions is “n_samples choose n_subsamples”, it can be extremely large and can therefore be limited with max_subpopulation. If this limit is reached, the subsets are chosen randomly. In a final step, the spatial median (or L1 median) is calculated of all least square solutions.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.TheilSenRegressor.html
 */
export declare class TheilSenRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: TheilSenRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit linear model.
     */
    fit(opts: TheilSenRegressorFitOptions): Promise<any>;
    /**
      Predict using the linear model.
     */
    predict(opts: TheilSenRegressorPredictOptions): Promise<any>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: TheilSenRegressorScoreOptions): Promise<number>;
    /**
      Coefficients of the regression model (median of distribution).
     */
    get coef_(): Promise<NDArray>;
    /**
      Estimated intercept of regression model.
     */
    get intercept_(): Promise<number>;
    /**
      Approximated breakdown point.
     */
    get breakdown_(): Promise<number>;
    /**
      Number of iterations needed for the spatial median.
     */
    get n_iter_(): Promise<number>;
    /**
      Number of combinations taken into account from ‘n choose k’, where n is the number of samples and k is the number of subsamples.
     */
    get n_subpopulation_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface TheilSenRegressorOptions {
    /**
      Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations.
  
      @defaultValue `true`
     */
    fit_intercept?: boolean;
    /**
      If True, X will be copied; else, it may be overwritten.
  
      @defaultValue `true`
     */
    copy_X?: boolean;
    /**
      Instead of computing with a set of cardinality ‘n choose k’, where n is the number of samples and k is the number of subsamples (at least number of features), consider only a stochastic subpopulation of a given maximal size if ‘n choose k’ is larger than max_subpopulation. For other than small problem sizes this parameter will determine memory usage and runtime if n_subsamples is not changed. Note that the data type should be int but floats such as 1e4 can be accepted too.
  
      @defaultValue `10000`
     */
    max_subpopulation?: number;
    /**
      Number of samples to calculate the parameters. This is at least the number of features (plus 1 if fit_intercept=True) and the number of samples as a maximum. A lower number leads to a higher breakdown point and a low efficiency while a high number leads to a low breakdown point and a high efficiency. If None, take the minimum number of subsamples leading to maximal robustness. If n_subsamples is set to n_samples, Theil-Sen is identical to least squares.
     */
    n_subsamples?: number;
    /**
      Maximum number of iterations for the calculation of spatial median.
  
      @defaultValue `300`
     */
    max_iter?: number;
    /**
      Tolerance when calculating spatial median.
  
      @defaultValue `0.001`
     */
    tol?: number;
    /**
      A random number generator instance to define the state of the random permutations generator. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      Number of CPUs to use during the cross validation. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Verbose mode when fitting the model.
  
      @defaultValue `false`
     */
    verbose?: boolean;
}
export interface TheilSenRegressorFitOptions {
    /**
      Training data.
     */
    X?: NDArray[];
    /**
      Target values.
     */
    y?: NDArray;
}
export interface TheilSenRegressorPredictOptions {
    /**
      Samples.
     */
    X?: ArrayLike | SparseMatrix;
}
export interface TheilSenRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=TheilSenRegressor.d.ts.map