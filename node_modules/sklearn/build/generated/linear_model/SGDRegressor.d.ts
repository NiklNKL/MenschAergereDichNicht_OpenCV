import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Linear model fitted by minimizing a regularized empirical loss with SGD.

  SGD stands for Stochastic Gradient Descent: the gradient of the loss is estimated each sample at a time and the model is updated along the way with a decreasing strength schedule (aka learning rate).

  The regularizer is a penalty added to the loss function that shrinks model parameters towards the zero vector using either the squared euclidean norm L2 or the absolute norm L1 or a combination of both (Elastic Net). If the parameter update crosses the 0.0 value because of the regularizer, the update is truncated to 0.0 to allow for learning sparse models and achieve online feature selection.

  This implementation works with data represented as dense numpy arrays of floating point values for the features.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDRegressor.html
 */
export declare class SGDRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SGDRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Convert coefficient matrix to dense array format.
  
      Converts the coef_ member (back) to a numpy.ndarray. This is the default format of coef_ and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
    densify(opts: SGDRegressorDensifyOptions): Promise<any>;
    /**
      Fit linear model with Stochastic Gradient Descent.
     */
    fit(opts: SGDRegressorFitOptions): Promise<any>;
    /**
      Perform one epoch of stochastic gradient descent on given samples.
  
      Internally, this method uses max_iter = 1. Therefore, it is not guaranteed that a minimum of the cost function is reached after calling it once. Matters such as objective convergence and early stopping should be handled by the user.
     */
    partial_fit(opts: SGDRegressorPartialFitOptions): Promise<any>;
    /**
      Predict using the linear model.
     */
    predict(opts: SGDRegressorPredictOptions): Promise<any>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: SGDRegressorScoreOptions): Promise<number>;
    /**
      Convert coefficient matrix to sparse format.
  
      Converts the coef_ member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The intercept_ member is not converted.
     */
    sparsify(opts: SGDRegressorSparsifyOptions): Promise<any>;
    /**
      Weights assigned to the features.
     */
    get coef_(): Promise<NDArray>;
    /**
      The intercept term.
     */
    get intercept_(): Promise<NDArray>;
    /**
      The actual number of iterations before reaching the stopping criterion.
     */
    get n_iter_(): Promise<number>;
    /**
      Number of weight updates performed during training. Same as (n_iter_ * n_samples + 1).
     */
    get t_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface SGDRegressorOptions {
    /**
      The loss function to be used. The possible values are ‘squared_error’, ‘huber’, ‘epsilon_insensitive’, or ‘squared_epsilon_insensitive’
  
      The ‘squared_error’ refers to the ordinary least squares fit. ‘huber’ modifies ‘squared_error’ to focus less on getting outliers correct by switching from squared to linear loss past a distance of epsilon. ‘epsilon_insensitive’ ignores errors less than epsilon and is linear past that; this is the loss function used in SVR. ‘squared_epsilon_insensitive’ is the same but becomes squared loss past a tolerance of epsilon.
  
      More details about the losses formulas can be found in the User Guide.
  
      @defaultValue `'squared_error'`
     */
    loss?: string;
    /**
      The penalty (aka regularization term) to be used. Defaults to ‘l2’ which is the standard regularizer for linear SVM models. ‘l1’ and ‘elasticnet’ might bring sparsity to the model (feature selection) not achievable with ‘l2’. No penalty is added when set to None.
  
      @defaultValue `'l2'`
     */
    penalty?: 'l2' | 'l1' | 'elasticnet';
    /**
      Constant that multiplies the regularization term. The higher the value, the stronger the regularization. Also used to compute the learning rate when set to learning_rate is set to ‘optimal’.
  
      @defaultValue `0.0001`
     */
    alpha?: number;
    /**
      The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1. l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1. Only used if penalty is ‘elasticnet’.
  
      @defaultValue `0.15`
     */
    l1_ratio?: number;
    /**
      Whether the intercept should be estimated or not. If False, the data is assumed to be already centered.
  
      @defaultValue `true`
     */
    fit_intercept?: boolean;
    /**
      The maximum number of passes over the training data (aka epochs). It only impacts the behavior in the fit method, and not the partial_fit method.
  
      @defaultValue `1000`
     */
    max_iter?: number;
    /**
      The stopping criterion. If it is not None, training will stop when (loss > best_loss - tol) for n_iter_no_change consecutive epochs. Convergence is checked against the training loss or the validation loss depending on the early_stopping parameter.
  
      @defaultValue `0.001`
     */
    tol?: number;
    /**
      Whether or not the training data should be shuffled after each epoch.
  
      @defaultValue `true`
     */
    shuffle?: boolean;
    /**
      The verbosity level.
  
      @defaultValue `0`
     */
    verbose?: number;
    /**
      Epsilon in the epsilon-insensitive loss functions; only if loss is ‘huber’, ‘epsilon_insensitive’, or ‘squared_epsilon_insensitive’. For ‘huber’, determines the threshold at which it becomes less important to get the prediction exactly right. For epsilon-insensitive, any differences between the current prediction and the correct label are ignored if they are less than this threshold.
  
      @defaultValue `0.1`
     */
    epsilon?: number;
    /**
      Used for shuffling the data, when shuffle is set to True. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      The learning rate schedule:
  
      @defaultValue `'invscaling'`
     */
    learning_rate?: string;
    /**
      The initial learning rate for the ‘constant’, ‘invscaling’ or ‘adaptive’ schedules. The default value is 0.01.
  
      @defaultValue `0.01`
     */
    eta0?: number;
    /**
      The exponent for inverse scaling learning rate.
  
      @defaultValue `0.25`
     */
    power_t?: number;
    /**
      Whether to use early stopping to terminate training when validation score is not improving. If set to True, it will automatically set aside a fraction of training data as validation and terminate training when validation score returned by the score method is not improving by at least tol for n_iter_no_change consecutive epochs.
  
      @defaultValue `false`
     */
    early_stopping?: boolean;
    /**
      The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True.
  
      @defaultValue `0.1`
     */
    validation_fraction?: number;
    /**
      Number of iterations with no improvement to wait before stopping fitting. Convergence is checked against the training loss or the validation loss depending on the early_stopping parameter.
  
      @defaultValue `5`
     */
    n_iter_no_change?: number;
    /**
      When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See the Glossary.
  
      Repeatedly calling fit or partial_fit when warm_start is True can result in a different solution than when calling fit a single time because of the way the data is shuffled. If a dynamic learning rate is used, the learning rate is adapted depending on the number of samples already seen. Calling fit resets this counter, while partial_fit  will result in increasing the existing counter.
  
      @defaultValue `false`
     */
    warm_start?: boolean;
    /**
      When set to True, computes the averaged SGD weights across all updates and stores the result in the coef_ attribute. If set to an int greater than 1, averaging will begin once the total number of samples seen reaches average. So average=10 will begin averaging after seeing 10 samples.
  
      @defaultValue `false`
     */
    average?: boolean | number;
}
export interface SGDRegressorDensifyOptions {
}
export interface SGDRegressorFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Target values.
     */
    y?: NDArray;
    /**
      The initial coefficients to warm-start the optimization.
     */
    coef_init?: NDArray;
    /**
      The initial intercept to warm-start the optimization.
     */
    intercept_init?: NDArray;
    /**
      Weights applied to individual samples (1. for unweighted).
     */
    sample_weight?: ArrayLike;
}
export interface SGDRegressorPartialFitOptions {
    /**
      Subset of training data.
     */
    X?: ArrayLike | SparseMatrix;
    /**
      Subset of target values.
     */
    y?: any[];
    /**
      Weights applied to individual samples. If not provided, uniform weights are assumed.
     */
    sample_weight?: ArrayLike;
}
export interface SGDRegressorPredictOptions {
    /**
      Input data.
     */
    X?: ArrayLike | SparseMatrix;
}
export interface SGDRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface SGDRegressorSparsifyOptions {
}
//# sourceMappingURL=SGDRegressor.d.ts.map