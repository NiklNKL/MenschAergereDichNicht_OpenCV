import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Linear regression model that predicts conditional quantiles.

  The linear QuantileRegressor optimizes the pinball loss for a desired quantile and is robust to outliers.

  This model uses an L1 regularization like Lasso.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.QuantileRegressor.html
 */
export declare class QuantileRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: QuantileRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model according to the given training data.
     */
    fit(opts: QuantileRegressorFitOptions): Promise<any>;
    /**
      Predict using the linear model.
     */
    predict(opts: QuantileRegressorPredictOptions): Promise<any>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: QuantileRegressorScoreOptions): Promise<number>;
    /**
      Estimated coefficients for the features.
     */
    get coef_(): Promise<any[]>;
    /**
      The intercept of the model, aka bias term.
     */
    get intercept_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The actual number of iterations performed by the solver.
     */
    get n_iter_(): Promise<number>;
}
export interface QuantileRegressorOptions {
    /**
      The quantile that the model tries to predict. It must be strictly between 0 and 1. If 0.5 (default), the model predicts the 50% quantile, i.e. the median.
  
      @defaultValue `0.5`
     */
    quantile?: number;
    /**
      Regularization constant that multiplies the L1 penalty term.
  
      @defaultValue `1`
     */
    alpha?: number;
    /**
      Whether or not to fit the intercept.
  
      @defaultValue `true`
     */
    fit_intercept?: boolean;
    /**
      Method used by scipy.optimize.linprog to solve the linear programming formulation.
  
      From scipy>=1.6.0, it is recommended to use the highs methods because they are the fastest ones. Solvers “highs-ds”, “highs-ipm” and “highs” support sparse input data and, in fact, always convert to sparse csc.
  
      From scipy>=1.11.0, “interior-point” is not available anymore.
  
      @defaultValue `'interior-point'`
     */
    solver?: 'highs-ds' | 'highs-ipm' | 'highs' | 'interior-point' | 'revised simplex';
    /**
      Additional parameters passed to scipy.optimize.linprog as options. If None and if solver='interior-point', then {"lstsq": True} is passed to scipy.optimize.linprog for the sake of stability.
     */
    solver_options?: any;
}
export interface QuantileRegressorFitOptions {
    /**
      Training data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
export interface QuantileRegressorPredictOptions {
    /**
      Samples.
     */
    X?: ArrayLike | SparseMatrix;
}
export interface QuantileRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=QuantileRegressor.d.ts.map