import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Multi-layer Perceptron classifier.

  This model optimizes the log-loss function using LBFGS or stochastic gradient descent.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html
 */
export declare class MLPClassifier {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: MLPClassifierOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model to data matrix X and target(s) y.
     */
    fit(opts: MLPClassifierFitOptions): Promise<any>;
    /**
      Update the model with a single iteration over the given data.
     */
    partial_fit(opts: MLPClassifierPartialFitOptions): Promise<any>;
    /**
      Predict using the multi-layer perceptron classifier.
     */
    predict(opts: MLPClassifierPredictOptions): Promise<NDArray>;
    /**
      Return the log of probability estimates.
     */
    predict_log_proba(opts: MLPClassifierPredictLogProbaOptions): Promise<NDArray[]>;
    /**
      Probability estimates.
     */
    predict_proba(opts: MLPClassifierPredictProbaOptions): Promise<NDArray[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: MLPClassifierScoreOptions): Promise<number>;
    /**
      Class labels for each output.
     */
    get classes_(): Promise<NDArray | any[]>;
    /**
      The current loss computed with the loss function.
     */
    get loss_(): Promise<number>;
    /**
      The minimum loss reached by the solver throughout fitting. If early_stopping=True, this attribute is set ot None. Refer to the best_validation_score_ fitted attribute instead.
     */
    get best_loss_(): Promise<number>;
    /**
      The ith element in the list represents the loss at the ith iteration.
     */
    get loss_curve_(): Promise<any[]>;
    /**
      The score at each iteration on a held-out validation set. The score reported is the accuracy score. Only available if early_stopping=True, otherwise the attribute is set to None.
     */
    get validation_scores_(): Promise<any[]>;
    /**
      The best validation score (i.e. accuracy score) that triggered the early stopping. Only available if early_stopping=True, otherwise the attribute is set to None.
     */
    get best_validation_score_(): Promise<number>;
    /**
      The number of training samples seen by the solver during fitting.
     */
    get t_(): Promise<number>;
    /**
      The ith element in the list represents the weight matrix corresponding to layer i.
     */
    get coefs_(): Promise<any[]>;
    /**
      The ith element in the list represents the bias vector corresponding to layer i + 1.
     */
    get intercepts_(): Promise<any[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
    /**
      The number of iterations the solver has run.
     */
    get n_iter_(): Promise<number>;
    /**
      Number of layers.
     */
    get n_layers_(): Promise<number>;
    /**
      Number of outputs.
     */
    get n_outputs_(): Promise<number>;
    /**
      Name of the output activation function.
     */
    get out_activation_(): Promise<string>;
}
export interface MLPClassifierOptions {
    /**
      The ith element represents the number of neurons in the ith hidden layer.
     */
    hidden_layer_sizes?: any;
    /**
      Activation function for the hidden layer.
  
      @defaultValue `'relu'`
     */
    activation?: 'identity' | 'logistic' | 'tanh' | 'relu';
    /**
      The solver for weight optimization.
  
      @defaultValue `'adam'`
     */
    solver?: 'lbfgs' | 'sgd' | 'adam';
    /**
      Strength of the L2 regularization term. The L2 regularization term is divided by the sample size when added to the loss.
  
      @defaultValue `0.0001`
     */
    alpha?: number;
    /**
      Size of minibatches for stochastic optimizers. If the solver is ‘lbfgs’, the classifier will not use minibatch. When set to “auto”, batch_size=min(200, n_samples).
  
      @defaultValue `'auto'`
     */
    batch_size?: number;
    /**
      Learning rate schedule for weight updates.
  
      @defaultValue `'constant'`
     */
    learning_rate?: 'constant' | 'invscaling' | 'adaptive';
    /**
      The initial learning rate used. It controls the step-size in updating the weights. Only used when solver=’sgd’ or ‘adam’.
  
      @defaultValue `0.001`
     */
    learning_rate_init?: number;
    /**
      The exponent for inverse scaling learning rate. It is used in updating effective learning rate when the learning_rate is set to ‘invscaling’. Only used when solver=’sgd’.
  
      @defaultValue `0.5`
     */
    power_t?: number;
    /**
      Maximum number of iterations. The solver iterates until convergence (determined by ‘tol’) or this number of iterations. For stochastic solvers (‘sgd’, ‘adam’), note that this determines the number of epochs (how many times each data point will be used), not the number of gradient steps.
  
      @defaultValue `200`
     */
    max_iter?: number;
    /**
      Whether to shuffle samples in each iteration. Only used when solver=’sgd’ or ‘adam’.
  
      @defaultValue `true`
     */
    shuffle?: boolean;
    /**
      Determines random number generation for weights and bias initialization, train-test split if early stopping is used, and batch sampling when solver=’sgd’ or ‘adam’. Pass an int for reproducible results across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      Tolerance for the optimization. When the loss or score is not improving by at least tol for n_iter_no_change consecutive iterations, unless learning_rate is set to ‘adaptive’, convergence is considered to be reached and training stops.
  
      @defaultValue `0.0001`
     */
    tol?: number;
    /**
      Whether to print progress messages to stdout.
  
      @defaultValue `false`
     */
    verbose?: boolean;
    /**
      When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See the Glossary.
  
      @defaultValue `false`
     */
    warm_start?: boolean;
    /**
      Momentum for gradient descent update. Should be between 0 and 1. Only used when solver=’sgd’.
  
      @defaultValue `0.9`
     */
    momentum?: number;
    /**
      Whether to use Nesterov’s momentum. Only used when solver=’sgd’ and momentum > 0.
  
      @defaultValue `true`
     */
    nesterovs_momentum?: boolean;
    /**
      Whether to use early stopping to terminate training when validation score is not improving. If set to true, it will automatically set aside 10% of training data as validation and terminate training when validation score is not improving by at least tol for n_iter_no_change consecutive epochs. The split is stratified, except in a multilabel setting. If early stopping is False, then the training stops when the training loss does not improve by more than tol for n_iter_no_change consecutive passes over the training set. Only effective when solver=’sgd’ or ‘adam’.
  
      @defaultValue `false`
     */
    early_stopping?: boolean;
    /**
      The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True.
  
      @defaultValue `0.1`
     */
    validation_fraction?: number;
    /**
      Exponential decay rate for estimates of first moment vector in adam, should be in [0, 1). Only used when solver=’adam’.
  
      @defaultValue `0.9`
     */
    beta_1?: number;
    /**
      Exponential decay rate for estimates of second moment vector in adam, should be in [0, 1). Only used when solver=’adam’.
  
      @defaultValue `0.999`
     */
    beta_2?: number;
    /**
      Value for numerical stability in adam. Only used when solver=’adam’.
  
      @defaultValue `1e-8`
     */
    epsilon?: number;
    /**
      Maximum number of epochs to not meet tol improvement. Only effective when solver=’sgd’ or ‘adam’.
  
      @defaultValue `10`
     */
    n_iter_no_change?: number;
    /**
      Only used when solver=’lbfgs’. Maximum number of loss function calls. The solver iterates until convergence (determined by ‘tol’), number of iterations reaches max_iter, or this number of loss function calls. Note that number of loss function calls will be greater than or equal to the number of iterations for the MLPClassifier.
  
      @defaultValue `15000`
     */
    max_fun?: number;
}
export interface MLPClassifierFitOptions {
    /**
      The input data.
     */
    X?: NDArray | SparseMatrix[];
    /**
      The target values (class labels in classification, real numbers in regression).
     */
    y?: NDArray;
}
export interface MLPClassifierPartialFitOptions {
    /**
      The input data.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      The target values.
     */
    y?: ArrayLike;
    /**
      Classes across all calls to partial_fit. Can be obtained via np.unique(y_all), where y_all is the target vector of the entire dataset. This argument is required for the first call to partial_fit and can be omitted in the subsequent calls. Note that y doesn’t need to contain all labels in classes.
     */
    classes?: any[];
}
export interface MLPClassifierPredictOptions {
    /**
      The input data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface MLPClassifierPredictLogProbaOptions {
    /**
      The input data.
     */
    X?: NDArray[];
}
export interface MLPClassifierPredictProbaOptions {
    /**
      The input data.
     */
    X?: ArrayLike | SparseMatrix[];
}
export interface MLPClassifierScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=MLPClassifier.d.ts.map