import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Approximate feature map for “skewed chi-squared” kernel.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.html
 */
export declare class SkewedChi2Sampler {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: SkewedChi2SamplerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model with X.
  
      Samples random projection according to n_features.
     */
    fit(opts: SkewedChi2SamplerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: SkewedChi2SamplerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: SkewedChi2SamplerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: SkewedChi2SamplerSetOutputOptions): Promise<any>;
    /**
      Apply the approximate feature map to X.
     */
    transform(opts: SkewedChi2SamplerTransformOptions): Promise<ArrayLike>;
    /**
      Weight array, sampled from a secant hyperbolic distribution, which will be used to linearly transform the log of the data.
     */
    get random_weights_(): Promise<NDArray[]>;
    /**
      Bias term, which will be added to the data. It is uniformly distributed between 0 and 2*pi.
     */
    get random_offset_(): Promise<NDArray[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface SkewedChi2SamplerOptions {
    /**
      “skewedness” parameter of the kernel. Needs to be cross-validated.
  
      @defaultValue `1`
     */
    skewedness?: number;
    /**
      Number of Monte Carlo samples per original feature. Equals the dimensionality of the computed feature space.
  
      @defaultValue `100`
     */
    n_components?: number;
    /**
      Pseudo-random number generator to control the generation of the random weights and random offset when fitting the training data. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
}
export interface SkewedChi2SamplerFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
}
export interface SkewedChi2SamplerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface SkewedChi2SamplerGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface SkewedChi2SamplerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface SkewedChi2SamplerTransformOptions {
    /**
      New data, where n_samples is the number of samples and n_features is the number of features. All values of X must be strictly greater than “-skewedness”.
     */
    X?: ArrayLike;
}
//# sourceMappingURL=SkewedChi2Sampler.d.ts.map