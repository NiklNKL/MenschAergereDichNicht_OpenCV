import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Approximate a kernel map using a subset of the training data.

  Constructs an approximate feature map for an arbitrary kernel using a subset of the data as basis.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.Nystroem.html
 */
export declare class Nystroem {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: NystroemOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit estimator to data.
  
      Samples a subset of training points, computes kernel on these and computes normalization matrix.
     */
    fit(opts: NystroemFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: NystroemFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: NystroemGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: NystroemSetOutputOptions): Promise<any>;
    /**
      Apply feature map to X.
  
      Computes an approximate feature map using the kernel between some training points and X.
     */
    transform(opts: NystroemTransformOptions): Promise<NDArray[]>;
    /**
      Subset of training points used to construct the feature map.
     */
    get components_(): Promise<NDArray[]>;
    /**
      Indices of components_ in the training set.
     */
    get component_indices_(): Promise<NDArray>;
    /**
      Normalization matrix needed for embedding. Square root of the kernel matrix on components_.
     */
    get normalization_(): Promise<NDArray[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface NystroemOptions {
    /**
      Kernel map to be approximated. A callable should accept two arguments and the keyword arguments passed to this object as kernel_params, and should return a floating point number.
  
      @defaultValue `'rbf'`
     */
    kernel?: string;
    /**
      Gamma parameter for the RBF, laplacian, polynomial, exponential chi2 and sigmoid kernels. Interpretation of the default value is left to the kernel; see the documentation for sklearn.metrics.pairwise. Ignored by other kernels.
     */
    gamma?: number;
    /**
      Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels.
     */
    coef0?: number;
    /**
      Degree of the polynomial kernel. Ignored by other kernels.
     */
    degree?: number;
    /**
      Additional parameters (keyword arguments) for kernel function passed as callable object.
     */
    kernel_params?: any;
    /**
      Number of features to construct. How many data points will be used to construct the mapping.
  
      @defaultValue `100`
     */
    n_components?: number;
    /**
      Pseudo-random number generator to control the uniform sampling without replacement of n_components of the training data to construct the basis kernel. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      The number of jobs to use for the computation. This works by breaking down the kernel matrix into n_jobs even slices and computing them in parallel.
  
      None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
}
export interface NystroemFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
}
export interface NystroemFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface NystroemGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface NystroemSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface NystroemTransformOptions {
    /**
      Data to transform.
     */
    X?: ArrayLike[];
}
//# sourceMappingURL=Nystroem.d.ts.map