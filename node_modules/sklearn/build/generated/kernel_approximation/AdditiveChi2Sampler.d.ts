import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Approximate feature map for additive chi2 kernel.

  Uses sampling the fourier transform of the kernel characteristic at regular intervals.

  Since the kernel that is to be approximated is additive, the components of the input vectors can be treated separately.  Each entry in the original space is transformed into 2*sample_steps-1 features, where sample_steps is a parameter of the method. Typical values of sample_steps include 1, 2 and 3.

  Optimal choices for the sampling interval for certain data ranges can be computed (see the reference). The default values should be reasonable.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.html
 */
export declare class AdditiveChi2Sampler {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: AdditiveChi2SamplerOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Set the parameters.
     */
    fit(opts: AdditiveChi2SamplerFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: AdditiveChi2SamplerFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
     */
    get_feature_names_out(opts: AdditiveChi2SamplerGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: AdditiveChi2SamplerSetOutputOptions): Promise<any>;
    /**
      Apply approximate feature map to X.
     */
    transform(opts: AdditiveChi2SamplerTransformOptions): Promise<NDArray | SparseMatrix>;
    /**
      Stored sampling interval. Specified as a parameter if sample_steps not in {1,2,3}.
     */
    get sample_interval_(): Promise<number>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface AdditiveChi2SamplerOptions {
    /**
      Gives the number of (complex) sampling points.
  
      @defaultValue `2`
     */
    sample_steps?: number;
    /**
      Sampling interval. Must be specified when sample_steps not in {1,2,3}.
     */
    sample_interval?: number;
}
export interface AdditiveChi2SamplerFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
}
export interface AdditiveChi2SamplerFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface AdditiveChi2SamplerGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface AdditiveChi2SamplerSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface AdditiveChi2SamplerTransformOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix;
}
//# sourceMappingURL=AdditiveChi2Sampler.d.ts.map