import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Polynomial kernel approximation via Tensor Sketch.

  Implements Tensor Sketch, which approximates the feature map of the polynomial kernel:

  @see https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.html
 */
export declare class PolynomialCountSketch {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: PolynomialCountSketchOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model with X.
  
      Initializes the internal variables. The method needs no information about the distribution of data, so we only care about n_features in X.
     */
    fit(opts: PolynomialCountSketchFitOptions): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.
     */
    fit_transform(opts: PolynomialCountSketchFitTransformOptions): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: ["class_name0", "class_name1", "class_name2"].
     */
    get_feature_names_out(opts: PolynomialCountSketchGetFeatureNamesOutOptions): Promise<any>;
    /**
      Set output container.
  
      See Introducing the set_output API for an example on how to use the API.
     */
    set_output(opts: PolynomialCountSketchSetOutputOptions): Promise<any>;
    /**
      Generate the feature map approximation for X.
     */
    transform(opts: PolynomialCountSketchTransformOptions): Promise<ArrayLike>;
    /**
      Array of indexes in range [0, n_components) used to represent the 2-wise independent hash functions for Count Sketch computation.
     */
    get indexHash_(): Promise<NDArray[]>;
    /**
      Array with random entries in {+1, -1}, used to represent the 2-wise independent hash functions for Count Sketch computation.
     */
    get bitHash_(): Promise<NDArray[]>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface PolynomialCountSketchOptions {
    /**
      Parameter of the polynomial kernel whose feature map will be approximated.
  
      @defaultValue `1`
     */
    gamma?: number;
    /**
      Degree of the polynomial kernel whose feature map will be approximated.
  
      @defaultValue `2`
     */
    degree?: number;
    /**
      Constant term of the polynomial kernel whose feature map will be approximated.
  
      @defaultValue `0`
     */
    coef0?: number;
    /**
      Dimensionality of the output feature space. Usually, n_components should be greater than the number of features in input samples in order to achieve good performance. The optimal score / run time balance is typically achieved around n_components = 10 * n_features, but this depends on the specific dataset being used.
  
      @defaultValue `100`
     */
    n_components?: number;
    /**
      Determines random number generation for indexHash and bitHash initialization. Pass an int for reproducible results across multiple function calls. See Glossary.
     */
    random_state?: number;
}
export interface PolynomialCountSketchFitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
}
export interface PolynomialCountSketchFitTransformOptions {
    /**
      Input samples.
     */
    X?: ArrayLike[];
    /**
      Target values (None for unsupervised transformations).
     */
    y?: ArrayLike;
    /**
      Additional fit parameters.
     */
    fit_params?: any;
}
export interface PolynomialCountSketchGetFeatureNamesOutOptions {
    /**
      Only used to validate feature names with the names seen in fit.
     */
    input_features?: any;
}
export interface PolynomialCountSketchSetOutputOptions {
    /**
      Configure output of transform and fit_transform.
     */
    transform?: 'default' | 'pandas';
}
export interface PolynomialCountSketchTransformOptions {
    /**
      New data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
}
//# sourceMappingURL=PolynomialCountSketch.d.ts.map