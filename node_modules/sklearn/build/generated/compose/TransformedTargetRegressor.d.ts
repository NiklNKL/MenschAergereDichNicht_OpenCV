import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Meta-estimator to regress on a transformed target.

  Useful for applying a non-linear transformation to the target y in regression problems. This transformation can be given as a Transformer such as the QuantileTransformer or as a function and its inverse such as np.log and np.exp.

  The computation during fit is:

  @see https://scikit-learn.org/stable/modules/generated/sklearn.compose.TransformedTargetRegressor.html
 */
export declare class TransformedTargetRegressor {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: TransformedTargetRegressorOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit the model according to the given training data.
     */
    fit(opts: TransformedTargetRegressorFitOptions): Promise<any>;
    /**
      Predict using the base regressor, applying inverse.
  
      The regressor is used to predict and the inverse_func or inverse_transform is applied before returning the prediction.
     */
    predict(opts: TransformedTargetRegressorPredictOptions): Promise<NDArray>;
    /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \(R^2\) is defined as \((1 - \frac{u}{v})\), where \(u\) is the residual sum of squares ((y_true - y_pred)** 2).sum() and \(v\) is the total sum of squares ((y_true - y_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \(R^2\) score of 0.0.
     */
    score(opts: TransformedTargetRegressorScoreOptions): Promise<number>;
    /**
      Fitted regressor.
     */
    get regressor_(): Promise<any>;
    /**
      Transformer used in fit and predict.
     */
    get transformer_(): Promise<any>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface TransformedTargetRegressorOptions {
    /**
      Regressor object such as derived from RegressorMixin. This regressor will automatically be cloned each time prior to fitting. If regressor is None, LinearRegression is created and used.
     */
    regressor?: any;
    /**
      Estimator object such as derived from TransformerMixin. Cannot be set at the same time as func and inverse_func. If transformer is None as well as func and inverse_func, the transformer will be an identity transformer. Note that the transformer will be cloned during fitting. Also, the transformer is restricting y to be a numpy array.
     */
    transformer?: any;
    /**
      Function to apply to y before passing to fit. Cannot be set at the same time as transformer. The function needs to return a 2-dimensional array. If func is None, the function used will be the identity function.
     */
    func?: any;
    /**
      Function to apply to the prediction of the regressor. Cannot be set at the same time as transformer. The function needs to return a 2-dimensional array. The inverse function is used to return predictions to the same space of the original training labels.
     */
    inverse_func?: any;
    /**
      Whether to check that transform followed by inverse_transform or func followed by inverse_func leads to the original targets.
  
      @defaultValue `true`
     */
    check_inverse?: boolean;
}
export interface TransformedTargetRegressorFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Target values.
     */
    y?: ArrayLike;
    /**
      Parameters passed to the fit method of the underlying regressor.
     */
    fit_params?: any;
}
export interface TransformedTargetRegressorPredictOptions {
    /**
      Samples.
     */
    X?: ArrayLike | SparseMatrix[];
    /**
      Parameters passed to the predict method of the underlying regressor.
     */
    predict_params?: any;
}
export interface TransformedTargetRegressorScoreOptions {
    /**
      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.
     */
    X?: ArrayLike[];
    /**
      True values for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=TransformedTargetRegressor.d.ts.map