import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  K-fold iterator variant with non-overlapping groups.

  Each group will appear exactly once in the test set across all folds (the number of distinct groups has to be at least equal to the number of folds).

  The folds are approximately balanced in the sense that the number of distinct groups is approximately the same in each fold.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupKFold.html
 */
export declare class GroupKFold {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: GroupKFoldOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Returns the number of splitting iterations in the cross-validator
     */
    get_n_splits(opts: GroupKFoldGetNSplitsOptions): Promise<number>;
    /**
      Generate indices to split data into training and test set.
     */
    split(opts: GroupKFoldSplitOptions): Promise<NDArray>;
}
export interface GroupKFoldOptions {
    /**
      Number of folds. Must be at least 2.
  
      @defaultValue `5`
     */
    n_splits?: number;
}
export interface GroupKFoldGetNSplitsOptions {
    /**
      Always ignored, exists for compatibility.
     */
    X?: any;
    /**
      Always ignored, exists for compatibility.
     */
    y?: any;
    /**
      Always ignored, exists for compatibility.
     */
    groups?: any;
}
export interface GroupKFoldSplitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      The target variable for supervised learning problems.
     */
    y?: ArrayLike;
    /**
      Group labels for the samples used while splitting the dataset into train/test set.
     */
    groups?: ArrayLike;
}
//# sourceMappingURL=GroupKFold.d.ts.map