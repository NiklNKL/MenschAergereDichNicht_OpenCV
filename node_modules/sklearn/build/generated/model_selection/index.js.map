{"version":3,"sources":["../../../src/generated/model_selection/GroupKFold.ts","../../../src/generated/model_selection/LeavePGroupsOut.ts","../../../src/generated/model_selection/LeaveOneGroupOut.ts","../../../src/generated/model_selection/GroupShuffleSplit.ts","../../../src/generated/model_selection/KFold.ts","../../../src/generated/model_selection/LeaveOneOut.ts","../../../src/generated/model_selection/LeavePOut.ts","../../../src/generated/model_selection/PredefinedSplit.ts","../../../src/generated/model_selection/RepeatedKFold.ts","../../../src/generated/model_selection/ShuffleSplit.ts","../../../src/generated/model_selection/RepeatedStratifiedKFold.ts","../../../src/generated/model_selection/StratifiedKFold.ts","../../../src/generated/model_selection/StratifiedShuffleSplit.ts","../../../src/generated/model_selection/StratifiedGroupKFold.ts","../../../src/generated/model_selection/TimeSeriesSplit.ts","../../../src/generated/model_selection/GridSearchCV.ts","../../../src/generated/model_selection/HalvingGridSearchCV.ts","../../../src/generated/model_selection/ParameterGrid.ts","../../../src/generated/model_selection/ParameterSampler.ts","../../../src/generated/model_selection/RandomizedSearchCV.ts","../../../src/generated/model_selection/HalvingRandomSearchCV.ts","../../../src/generated/model_selection/LearningCurveDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  K-fold iterator variant with non-overlapping groups.\n\n  Each group will appear exactly once in the test set across all folds (the number of distinct groups has to be at least equal to the number of folds).\n\n  The folds are approximately balanced in the sense that the number of distinct groups is approximately the same in each fold.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupKFold.html\n */\nexport class GroupKFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: GroupKFoldOptions) {\n    this.id = `GroupKFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This GroupKFold instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('GroupKFold.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import GroupKFold\ntry: bridgeGroupKFold\nexcept NameError: bridgeGroupKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_GroupKFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }}\n\nctor_GroupKFold = {k: v for k, v in ctor_GroupKFold.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeGroupKFold[${this.id}] = GroupKFold(**ctor_GroupKFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeGroupKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: GroupKFoldGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This GroupKFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GroupKFold must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GroupKFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_GroupKFold_get_n_splits = {k: v for k, v in pms_GroupKFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GroupKFold_get_n_splits = bridgeGroupKFold[${this.id}].get_n_splits(**pms_GroupKFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GroupKFold_get_n_splits.tolist() if hasattr(res_GroupKFold_get_n_splits, 'tolist') else res_GroupKFold_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: GroupKFoldSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GroupKFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GroupKFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GroupKFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_GroupKFold_split = {k: v for k, v in pms_GroupKFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GroupKFold_split = bridgeGroupKFold[${this.id}].split(**pms_GroupKFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GroupKFold_split.tolist() if hasattr(res_GroupKFold_split, 'tolist') else res_GroupKFold_split`\n  }\n}\n\nexport interface GroupKFoldOptions {\n  /**\n    Number of folds. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n}\n\nexport interface GroupKFoldGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface GroupKFoldSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Leave P Group(s) Out cross-validator\n\n  Provides train/test indices to split data according to a third-party provided group. This group information can be used to encode arbitrary domain specific stratifications of the samples as integers.\n\n  For instance the groups could be the year of collection of the samples and thus allow for cross-validation against time-based splits.\n\n  The difference between LeavePGroupsOut and LeaveOneGroupOut is that the former builds the test sets with all the samples assigned to p different values of the groups while the latter uses samples all assigned the same groups.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeavePGroupsOut.html\n */\nexport class LeavePGroupsOut {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: LeavePGroupsOutOptions) {\n    this.id = `LeavePGroupsOut${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This LeavePGroupsOut instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LeavePGroupsOut.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import LeavePGroupsOut\ntry: bridgeLeavePGroupsOut\nexcept NameError: bridgeLeavePGroupsOut = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_LeavePGroupsOut = {'n_groups': ${\n      this.opts['n_groups'] ?? undefined\n    }}\n\nctor_LeavePGroupsOut = {k: v for k, v in ctor_LeavePGroupsOut.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeLeavePGroupsOut[${this.id}] = LeavePGroupsOut(**ctor_LeavePGroupsOut)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLeavePGroupsOut[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: LeavePGroupsOutGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LeavePGroupsOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeavePGroupsOut must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeavePGroupsOut_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeavePGroupsOut_get_n_splits = {k: v for k, v in pms_LeavePGroupsOut_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeavePGroupsOut_get_n_splits = bridgeLeavePGroupsOut[${this.id}].get_n_splits(**pms_LeavePGroupsOut_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeavePGroupsOut_get_n_splits.tolist() if hasattr(res_LeavePGroupsOut_get_n_splits, 'tolist') else res_LeavePGroupsOut_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: LeavePGroupsOutSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This LeavePGroupsOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeavePGroupsOut must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeavePGroupsOut_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeavePGroupsOut_split = {k: v for k, v in pms_LeavePGroupsOut_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeavePGroupsOut_split = bridgeLeavePGroupsOut[${this.id}].split(**pms_LeavePGroupsOut_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeavePGroupsOut_split.tolist() if hasattr(res_LeavePGroupsOut_split, 'tolist') else res_LeavePGroupsOut_split`\n  }\n}\n\nexport interface LeavePGroupsOutOptions {\n  /**\n    Number of groups (p) to leave out in the test split.\n   */\n  n_groups?: number\n}\n\nexport interface LeavePGroupsOutGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. This ‘groups’ parameter must always be specified to calculate the number of splits, though the other parameters can be omitted.\n   */\n  groups?: ArrayLike\n}\n\nexport interface LeavePGroupsOutSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Leave One Group Out cross-validator\n\n  Provides train/test indices to split data such that each training set is comprised of all samples except ones belonging to one specific group. Arbitrary domain specific group information is provided an array integers that encodes the group of each sample.\n\n  For instance the groups could be the year of collection of the samples and thus allow for cross-validation against time-based splits.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeaveOneGroupOut.html\n */\nexport class LeaveOneGroupOut {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: LeaveOneGroupOutOptions) {\n    this.id = `LeaveOneGroupOut${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LeaveOneGroupOut.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import LeaveOneGroupOut\ntry: bridgeLeaveOneGroupOut\nexcept NameError: bridgeLeaveOneGroupOut = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_LeaveOneGroupOut = {'X': ${\n      this.opts['X'] ?? undefined\n    }, 'y': ${this.opts['y'] ?? undefined}, 'groups': np.array(${\n      this.opts['groups'] ?? undefined\n    }) if ${this.opts['groups'] !== undefined} else None}\n\nctor_LeaveOneGroupOut = {k: v for k, v in ctor_LeaveOneGroupOut.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeLeaveOneGroupOut[${this.id}] = LeaveOneGroupOut(**ctor_LeaveOneGroupOut)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLeaveOneGroupOut[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: LeaveOneGroupOutGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneGroupOut must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeaveOneGroupOut_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeaveOneGroupOut_get_n_splits = {k: v for k, v in pms_LeaveOneGroupOut_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeaveOneGroupOut_get_n_splits = bridgeLeaveOneGroupOut[${this.id}].get_n_splits(**pms_LeaveOneGroupOut_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeaveOneGroupOut_get_n_splits.tolist() if hasattr(res_LeaveOneGroupOut_get_n_splits, 'tolist') else res_LeaveOneGroupOut_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: LeaveOneGroupOutSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneGroupOut must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeaveOneGroupOut_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeaveOneGroupOut_split = {k: v for k, v in pms_LeaveOneGroupOut_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeaveOneGroupOut_split = bridgeLeaveOneGroupOut[${this.id}].split(**pms_LeaveOneGroupOut_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeaveOneGroupOut_split.tolist() if hasattr(res_LeaveOneGroupOut_split, 'tolist') else res_LeaveOneGroupOut_split`\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator.\n   */\n  get n_splits(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LeaveOneGroupOut instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LeaveOneGroupOut must call init() before accessing n_splits'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LeaveOneGroupOut_n_splits = bridgeLeaveOneGroupOut[${this.id}].n_splits`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LeaveOneGroupOut_n_splits.tolist() if hasattr(attr_LeaveOneGroupOut_n_splits, 'tolist') else attr_LeaveOneGroupOut_n_splits`\n    })()\n  }\n}\n\nexport interface LeaveOneGroupOutOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. This ‘groups’ parameter must always be specified to calculate the number of splits, though the other parameters can be omitted.\n   */\n  groups?: ArrayLike\n}\n\nexport interface LeaveOneGroupOutGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. This ‘groups’ parameter must always be specified to calculate the number of splits, though the other parameters can be omitted.\n   */\n  groups?: ArrayLike\n}\n\nexport interface LeaveOneGroupOutSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Shuffle-Group(s)-Out cross-validation iterator\n\n  Provides randomized train/test indices to split data according to a third-party provided group. This group information can be used to encode arbitrary domain specific stratifications of the samples as integers.\n\n  For instance the groups could be the year of collection of the samples and thus allow for cross-validation against time-based splits.\n\n  The difference between LeavePGroupsOut and GroupShuffleSplit is that the former generates splits using all subsets of size p unique groups, whereas GroupShuffleSplit generates a user-determined number of random test splits, each with a user-determined fraction of unique groups.\n\n  For example, a less computationally intensive alternative to LeavePGroupsOut(p=10) would be GroupShuffleSplit(test_size=10, n_splits=100).\n\n  Note: The parameters test_size and train_size refer to groups, and not to samples, as in ShuffleSplit.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupShuffleSplit.html\n */\nexport class GroupShuffleSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: GroupShuffleSplitOptions) {\n    this.id = `GroupShuffleSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GroupShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('GroupShuffleSplit.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import GroupShuffleSplit\ntry: bridgeGroupShuffleSplit\nexcept NameError: bridgeGroupShuffleSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_GroupShuffleSplit = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'test_size': ${this.opts['test_size'] ?? undefined}, 'train_size': ${\n      this.opts['train_size'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_GroupShuffleSplit = {k: v for k, v in ctor_GroupShuffleSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeGroupShuffleSplit[${this.id}] = GroupShuffleSplit(**ctor_GroupShuffleSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeGroupShuffleSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(\n    opts: GroupShuffleSplitGetNSplitsOptions\n  ): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GroupShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GroupShuffleSplit must call init() before get_n_splits()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_GroupShuffleSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_GroupShuffleSplit_get_n_splits = {k: v for k, v in pms_GroupShuffleSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GroupShuffleSplit_get_n_splits = bridgeGroupShuffleSplit[${this.id}].get_n_splits(**pms_GroupShuffleSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GroupShuffleSplit_get_n_splits.tolist() if hasattr(res_GroupShuffleSplit_get_n_splits, 'tolist') else res_GroupShuffleSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: GroupShuffleSplitSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This GroupShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GroupShuffleSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GroupShuffleSplit_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_GroupShuffleSplit_split = {k: v for k, v in pms_GroupShuffleSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GroupShuffleSplit_split = bridgeGroupShuffleSplit[${this.id}].split(**pms_GroupShuffleSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GroupShuffleSplit_split.tolist() if hasattr(res_GroupShuffleSplit_split, 'tolist') else res_GroupShuffleSplit_split`\n  }\n}\n\nexport interface GroupShuffleSplitOptions {\n  /**\n    Number of re-shuffling & splitting iterations.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    If float, should be between 0.0 and 1.0 and represent the proportion of groups to include in the test split (rounded up). If int, represents the absolute number of test groups. If None, the value is set to the complement of the train size. The default will change in version 0.21. It will remain 0.2 only if train_size is unspecified, otherwise it will complement the specified train_size.\n\n    @defaultValue `0.2`\n   */\n  test_size?: number\n\n  /**\n    If float, should be between 0.0 and 1.0 and represent the proportion of the groups to include in the train split. If int, represents the absolute number of train groups. If None, the value is automatically set to the complement of the test size.\n   */\n  train_size?: number\n\n  /**\n    Controls the randomness of the training and testing indices produced. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface GroupShuffleSplitGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface GroupShuffleSplitSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  K-Folds cross-validator\n\n  Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds (without shuffling by default).\n\n  Each fold is then used once as a validation while the k - 1 remaining folds form the training set.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html\n */\nexport class KFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: KFoldOptions) {\n    this.id = `KFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('KFold.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import KFold\ntry: bridgeKFold\nexcept NameError: bridgeKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_KFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'shuffle': ${this.opts['shuffle'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_KFold = {k: v for k, v in ctor_KFold.items() if v is not None}`\n\n    await this._py.ex`bridgeKFold[${this.id}] = KFold(**ctor_KFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: KFoldGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KFold must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_KFold_get_n_splits = {k: v for k, v in pms_KFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KFold_get_n_splits = bridgeKFold[${this.id}].get_n_splits(**pms_KFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KFold_get_n_splits.tolist() if hasattr(res_KFold_get_n_splits, 'tolist') else res_KFold_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: KFoldSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_KFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_KFold_split = {k: v for k, v in pms_KFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KFold_split = bridgeKFold[${this.id}].split(**pms_KFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KFold_split.tolist() if hasattr(res_KFold_split, 'tolist') else res_KFold_split`\n  }\n}\n\nexport interface KFoldOptions {\n  /**\n    Number of folds. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    Whether to shuffle the data before splitting into batches. Note that the samples within each split will not be shuffled.\n\n    @defaultValue `false`\n   */\n  shuffle?: boolean\n\n  /**\n    When shuffle is True, random_state affects the ordering of the indices, which controls the randomness of each fold. Otherwise, this parameter has no effect. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface KFoldGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface KFoldSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Leave-One-Out cross-validator\n\n  Provides train/test indices to split data in train/test sets. Each sample is used once as a test set (singleton) while the remaining samples form the training set.\n\n  Note: LeaveOneOut() is equivalent to KFold(n_splits=n) and LeavePOut(p=1) where n is the number of samples.\n\n  Due to the high number of test sets (which is the same as the number of samples) this cross-validation method can be very costly. For large datasets one should favor KFold, ShuffleSplit or StratifiedKFold.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeaveOneOut.html\n */\nexport class LeaveOneOut {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: LeaveOneOutOptions) {\n    this.id = `LeaveOneOut${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This LeaveOneOut instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LeaveOneOut.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import LeaveOneOut\ntry: bridgeLeaveOneOut\nexcept NameError: bridgeLeaveOneOut = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_LeaveOneOut = {'X': np.array(${\n      this.opts['X'] ?? undefined\n    }) if ${this.opts['X'] !== undefined} else None, 'y': ${\n      this.opts['y'] ?? undefined\n    }, 'groups': ${this.opts['groups'] ?? undefined}}\n\nctor_LeaveOneOut = {k: v for k, v in ctor_LeaveOneOut.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeLeaveOneOut[${this.id}] = LeaveOneOut(**ctor_LeaveOneOut)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLeaveOneOut[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: LeaveOneOutGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LeaveOneOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneOut must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeaveOneOut_get_n_splits = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${\n      opts['y'] ?? undefined\n    }, 'groups': ${opts['groups'] ?? undefined}}\n\npms_LeaveOneOut_get_n_splits = {k: v for k, v in pms_LeaveOneOut_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeaveOneOut_get_n_splits = bridgeLeaveOneOut[${this.id}].get_n_splits(**pms_LeaveOneOut_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeaveOneOut_get_n_splits.tolist() if hasattr(res_LeaveOneOut_get_n_splits, 'tolist') else res_LeaveOneOut_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: LeaveOneOutSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This LeaveOneOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneOut must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeaveOneOut_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeaveOneOut_split = {k: v for k, v in pms_LeaveOneOut_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeaveOneOut_split = bridgeLeaveOneOut[${this.id}].split(**pms_LeaveOneOut_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeaveOneOut_split.tolist() if hasattr(res_LeaveOneOut_split, 'tolist') else res_LeaveOneOut_split`\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator.\n   */\n  get n_splits(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LeaveOneOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeaveOneOut must call init() before accessing n_splits')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LeaveOneOut_n_splits = bridgeLeaveOneOut[${this.id}].n_splits`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LeaveOneOut_n_splits.tolist() if hasattr(attr_LeaveOneOut_n_splits, 'tolist') else attr_LeaveOneOut_n_splits`\n    })()\n  }\n}\n\nexport interface LeaveOneOutOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface LeaveOneOutGetNSplitsOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface LeaveOneOutSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Leave-P-Out cross-validator\n\n  Provides train/test indices to split data in train/test sets. This results in testing on all distinct samples of size p, while the remaining n - p samples form the training set in each iteration.\n\n  Note: LeavePOut(p) is NOT equivalent to KFold(n_splits=n_samples // p) which creates non-overlapping test sets.\n\n  Due to the high number of iterations which grows combinatorically with the number of samples this cross-validation method can be very costly. For large datasets one should favor KFold, StratifiedKFold or ShuffleSplit.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeavePOut.html\n */\nexport class LeavePOut {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: LeavePOutOptions) {\n    this.id = `LeavePOut${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This LeavePOut instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LeavePOut.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import LeavePOut\ntry: bridgeLeavePOut\nexcept NameError: bridgeLeavePOut = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_LeavePOut = {'p': ${this.opts['p'] ?? undefined}}\n\nctor_LeavePOut = {k: v for k, v in ctor_LeavePOut.items() if v is not None}`\n\n    await this._py.ex`bridgeLeavePOut[${this.id}] = LeavePOut(**ctor_LeavePOut)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLeavePOut[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: LeavePOutGetNSplitsOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LeavePOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeavePOut must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeavePOut_get_n_splits = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': ${\n      opts['y'] ?? undefined\n    }, 'groups': ${opts['groups'] ?? undefined}}\n\npms_LeavePOut_get_n_splits = {k: v for k, v in pms_LeavePOut_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeavePOut_get_n_splits = bridgeLeavePOut[${this.id}].get_n_splits(**pms_LeavePOut_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeavePOut_get_n_splits.tolist() if hasattr(res_LeavePOut_get_n_splits, 'tolist') else res_LeavePOut_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: LeavePOutSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This LeavePOut instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LeavePOut must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LeavePOut_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_LeavePOut_split = {k: v for k, v in pms_LeavePOut_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LeavePOut_split = bridgeLeavePOut[${this.id}].split(**pms_LeavePOut_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LeavePOut_split.tolist() if hasattr(res_LeavePOut_split, 'tolist') else res_LeavePOut_split`\n  }\n}\n\nexport interface LeavePOutOptions {\n  /**\n    Size of the test sets. Must be strictly less than the number of samples.\n   */\n  p?: number\n}\n\nexport interface LeavePOutGetNSplitsOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface LeavePOutSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Predefined split cross-validator\n\n  Provides train/test indices to split data into train/test sets using a predefined scheme specified by the user with the test_fold parameter.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.PredefinedSplit.html\n */\nexport class PredefinedSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: PredefinedSplitOptions) {\n    this.id = `PredefinedSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This PredefinedSplit instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('PredefinedSplit.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import PredefinedSplit\ntry: bridgePredefinedSplit\nexcept NameError: bridgePredefinedSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_PredefinedSplit = {'test_fold': np.array(${\n      this.opts['test_fold'] ?? undefined\n    }) if ${this.opts['test_fold'] !== undefined} else None}\n\nctor_PredefinedSplit = {k: v for k, v in ctor_PredefinedSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePredefinedSplit[${this.id}] = PredefinedSplit(**ctor_PredefinedSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePredefinedSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: PredefinedSplitGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This PredefinedSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PredefinedSplit must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PredefinedSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_PredefinedSplit_get_n_splits = {k: v for k, v in pms_PredefinedSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredefinedSplit_get_n_splits = bridgePredefinedSplit[${this.id}].get_n_splits(**pms_PredefinedSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredefinedSplit_get_n_splits.tolist() if hasattr(res_PredefinedSplit_get_n_splits, 'tolist') else res_PredefinedSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: PredefinedSplitSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This PredefinedSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PredefinedSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PredefinedSplit_split = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_PredefinedSplit_split = {k: v for k, v in pms_PredefinedSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PredefinedSplit_split = bridgePredefinedSplit[${this.id}].split(**pms_PredefinedSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PredefinedSplit_split.tolist() if hasattr(res_PredefinedSplit_split, 'tolist') else res_PredefinedSplit_split`\n  }\n}\n\nexport interface PredefinedSplitOptions {\n  /**\n    The entry test_fold[i] represents the index of the test set that sample i belongs to. It is possible to exclude sample i from any test set (i.e. include sample i in every training set) by setting test_fold[i] equal to -1.\n   */\n  test_fold?: ArrayLike\n}\n\nexport interface PredefinedSplitGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface PredefinedSplitSplitOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Repeated K-Fold cross validator.\n\n  Repeats K-Fold n times with different randomization in each repetition.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RepeatedKFold.html\n */\nexport class RepeatedKFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: RepeatedKFoldOptions) {\n    this.id = `RepeatedKFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This RepeatedKFold instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('RepeatedKFold.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import RepeatedKFold\ntry: bridgeRepeatedKFold\nexcept NameError: bridgeRepeatedKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_RepeatedKFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'n_repeats': ${this.opts['n_repeats'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_RepeatedKFold = {k: v for k, v in ctor_RepeatedKFold.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRepeatedKFold[${this.id}] = RepeatedKFold(**ctor_RepeatedKFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRepeatedKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: RepeatedKFoldGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This RepeatedKFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RepeatedKFold must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RepeatedKFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_RepeatedKFold_get_n_splits = {k: v for k, v in pms_RepeatedKFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RepeatedKFold_get_n_splits = bridgeRepeatedKFold[${this.id}].get_n_splits(**pms_RepeatedKFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RepeatedKFold_get_n_splits.tolist() if hasattr(res_RepeatedKFold_get_n_splits, 'tolist') else res_RepeatedKFold_get_n_splits`\n  }\n\n  /**\n    Generates indices to split data into training and test set.\n   */\n  async split(opts: RepeatedKFoldSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This RepeatedKFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RepeatedKFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RepeatedKFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_RepeatedKFold_split = {k: v for k, v in pms_RepeatedKFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RepeatedKFold_split = bridgeRepeatedKFold[${this.id}].split(**pms_RepeatedKFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RepeatedKFold_split.tolist() if hasattr(res_RepeatedKFold_split, 'tolist') else res_RepeatedKFold_split`\n  }\n}\n\nexport interface RepeatedKFoldOptions {\n  /**\n    Number of folds. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    Number of times cross-validator needs to be repeated.\n\n    @defaultValue `10`\n   */\n  n_repeats?: number\n\n  /**\n    Controls the randomness of each repeated cross-validation instance. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface RepeatedKFoldGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility. np.zeros(n_samples) may be used as a placeholder.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility. np.zeros(n_samples) may be used as a placeholder.\n   */\n  y?: any\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n\nexport interface RepeatedKFoldSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Random permutation cross-validator\n\n  Yields indices to split data into training and test sets.\n\n  Note: contrary to other cross-validation strategies, random splits do not guarantee that all folds will be different, although this is still very likely for sizeable datasets.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ShuffleSplit.html\n */\nexport class ShuffleSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: ShuffleSplitOptions) {\n    this.id = `ShuffleSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This ShuffleSplit instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ShuffleSplit.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import ShuffleSplit\ntry: bridgeShuffleSplit\nexcept NameError: bridgeShuffleSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_ShuffleSplit = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'test_size': ${this.opts['test_size'] ?? undefined}, 'train_size': ${\n      this.opts['train_size'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_ShuffleSplit = {k: v for k, v in ctor_ShuffleSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeShuffleSplit[${this.id}] = ShuffleSplit(**ctor_ShuffleSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeShuffleSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: ShuffleSplitGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This ShuffleSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ShuffleSplit must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_ShuffleSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_ShuffleSplit_get_n_splits = {k: v for k, v in pms_ShuffleSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ShuffleSplit_get_n_splits = bridgeShuffleSplit[${this.id}].get_n_splits(**pms_ShuffleSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ShuffleSplit_get_n_splits.tolist() if hasattr(res_ShuffleSplit_get_n_splits, 'tolist') else res_ShuffleSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: ShuffleSplitSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This ShuffleSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ShuffleSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_ShuffleSplit_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_ShuffleSplit_split = {k: v for k, v in pms_ShuffleSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ShuffleSplit_split = bridgeShuffleSplit[${this.id}].split(**pms_ShuffleSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ShuffleSplit_split.tolist() if hasattr(res_ShuffleSplit_split, 'tolist') else res_ShuffleSplit_split`\n  }\n}\n\nexport interface ShuffleSplitOptions {\n  /**\n    Number of re-shuffling & splitting iterations.\n\n    @defaultValue `10`\n   */\n  n_splits?: number\n\n  /**\n    If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If train_size is also None, it will be set to 0.1.\n   */\n  test_size?: number\n\n  /**\n    If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.\n   */\n  train_size?: number\n\n  /**\n    Controls the randomness of the training and testing indices produced. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface ShuffleSplitGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface ShuffleSplitSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Repeated Stratified K-Fold cross validator.\n\n  Repeats Stratified K-Fold n times with different randomization in each repetition.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.html\n */\nexport class RepeatedStratifiedKFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: RepeatedStratifiedKFoldOptions) {\n    this.id = `RepeatedStratifiedKFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RepeatedStratifiedKFold instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'RepeatedStratifiedKFold.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import RepeatedStratifiedKFold\ntry: bridgeRepeatedStratifiedKFold\nexcept NameError: bridgeRepeatedStratifiedKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_RepeatedStratifiedKFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'n_repeats': ${this.opts['n_repeats'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_RepeatedStratifiedKFold = {k: v for k, v in ctor_RepeatedStratifiedKFold.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRepeatedStratifiedKFold[${this.id}] = RepeatedStratifiedKFold(**ctor_RepeatedStratifiedKFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRepeatedStratifiedKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(\n    opts: RepeatedStratifiedKFoldGetNSplitsOptions\n  ): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RepeatedStratifiedKFold instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RepeatedStratifiedKFold must call init() before get_n_splits()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RepeatedStratifiedKFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_RepeatedStratifiedKFold_get_n_splits = {k: v for k, v in pms_RepeatedStratifiedKFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RepeatedStratifiedKFold_get_n_splits = bridgeRepeatedStratifiedKFold[${this.id}].get_n_splits(**pms_RepeatedStratifiedKFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RepeatedStratifiedKFold_get_n_splits.tolist() if hasattr(res_RepeatedStratifiedKFold_get_n_splits, 'tolist') else res_RepeatedStratifiedKFold_get_n_splits`\n  }\n\n  /**\n    Generates indices to split data into training and test set.\n   */\n  async split(opts: RepeatedStratifiedKFoldSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RepeatedStratifiedKFold instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RepeatedStratifiedKFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RepeatedStratifiedKFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_RepeatedStratifiedKFold_split = {k: v for k, v in pms_RepeatedStratifiedKFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RepeatedStratifiedKFold_split = bridgeRepeatedStratifiedKFold[${this.id}].split(**pms_RepeatedStratifiedKFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RepeatedStratifiedKFold_split.tolist() if hasattr(res_RepeatedStratifiedKFold_split, 'tolist') else res_RepeatedStratifiedKFold_split`\n  }\n}\n\nexport interface RepeatedStratifiedKFoldOptions {\n  /**\n    Number of folds. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    Number of times cross-validator needs to be repeated.\n\n    @defaultValue `10`\n   */\n  n_repeats?: number\n\n  /**\n    Controls the generation of the random states for each repetition. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface RepeatedStratifiedKFoldGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility. np.zeros(n_samples) may be used as a placeholder.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility. np.zeros(n_samples) may be used as a placeholder.\n   */\n  y?: any\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n\nexport interface RepeatedStratifiedKFoldSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stratified K-Folds cross-validator.\n\n  Provides train/test indices to split data in train/test sets.\n\n  This cross-validation object is a variation of KFold that returns stratified folds. The folds are made by preserving the percentage of samples for each class.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedKFold.html\n */\nexport class StratifiedKFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: StratifiedKFoldOptions) {\n    this.id = `StratifiedKFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This StratifiedKFold instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('StratifiedKFold.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold\ntry: bridgeStratifiedKFold\nexcept NameError: bridgeStratifiedKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_StratifiedKFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'shuffle': ${this.opts['shuffle'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_StratifiedKFold = {k: v for k, v in ctor_StratifiedKFold.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeStratifiedKFold[${this.id}] = StratifiedKFold(**ctor_StratifiedKFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeStratifiedKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: StratifiedKFoldGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This StratifiedKFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('StratifiedKFold must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedKFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_StratifiedKFold_get_n_splits = {k: v for k, v in pms_StratifiedKFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedKFold_get_n_splits = bridgeStratifiedKFold[${this.id}].get_n_splits(**pms_StratifiedKFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedKFold_get_n_splits.tolist() if hasattr(res_StratifiedKFold_get_n_splits, 'tolist') else res_StratifiedKFold_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: StratifiedKFoldSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This StratifiedKFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('StratifiedKFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedKFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': ${\n      opts['groups'] ?? undefined\n    }}\n\npms_StratifiedKFold_split = {k: v for k, v in pms_StratifiedKFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedKFold_split = bridgeStratifiedKFold[${this.id}].split(**pms_StratifiedKFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedKFold_split.tolist() if hasattr(res_StratifiedKFold_split, 'tolist') else res_StratifiedKFold_split`\n  }\n}\n\nexport interface StratifiedKFoldOptions {\n  /**\n    Number of folds. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    Whether to shuffle each class’s samples before splitting into batches. Note that the samples within each split will not be shuffled.\n\n    @defaultValue `false`\n   */\n  shuffle?: boolean\n\n  /**\n    When shuffle is True, random_state affects the ordering of the indices, which controls the randomness of each fold for each class. Otherwise, leave random_state as None. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface StratifiedKFoldGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface StratifiedKFoldSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n\n    Note that providing y is sufficient to generate the splits and hence np.zeros(n_samples) may be used as a placeholder for X instead of actual training data.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems. Stratification is done based on the y labels.\n   */\n  y?: ArrayLike\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stratified ShuffleSplit cross-validator\n\n  Provides train/test indices to split data in train/test sets.\n\n  This cross-validation object is a merge of StratifiedKFold and ShuffleSplit, which returns stratified randomized folds. The folds are made by preserving the percentage of samples for each class.\n\n  Note: like the ShuffleSplit strategy, stratified random splits do not guarantee that all folds will be different, although this is still very likely for sizeable datasets.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedShuffleSplit.html\n */\nexport class StratifiedShuffleSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: StratifiedShuffleSplitOptions) {\n    this.id = `StratifiedShuffleSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'StratifiedShuffleSplit.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import StratifiedShuffleSplit\ntry: bridgeStratifiedShuffleSplit\nexcept NameError: bridgeStratifiedShuffleSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_StratifiedShuffleSplit = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'test_size': ${this.opts['test_size'] ?? undefined}, 'train_size': ${\n      this.opts['train_size'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_StratifiedShuffleSplit = {k: v for k, v in ctor_StratifiedShuffleSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeStratifiedShuffleSplit[${this.id}] = StratifiedShuffleSplit(**ctor_StratifiedShuffleSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeStratifiedShuffleSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(\n    opts: StratifiedShuffleSplitGetNSplitsOptions\n  ): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'StratifiedShuffleSplit must call init() before get_n_splits()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedShuffleSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_StratifiedShuffleSplit_get_n_splits = {k: v for k, v in pms_StratifiedShuffleSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedShuffleSplit_get_n_splits = bridgeStratifiedShuffleSplit[${this.id}].get_n_splits(**pms_StratifiedShuffleSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedShuffleSplit_get_n_splits.tolist() if hasattr(res_StratifiedShuffleSplit_get_n_splits, 'tolist') else res_StratifiedShuffleSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: StratifiedShuffleSplitSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedShuffleSplit instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('StratifiedShuffleSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedShuffleSplit_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': ${\n      opts['groups'] ?? undefined\n    }}\n\npms_StratifiedShuffleSplit_split = {k: v for k, v in pms_StratifiedShuffleSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedShuffleSplit_split = bridgeStratifiedShuffleSplit[${this.id}].split(**pms_StratifiedShuffleSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedShuffleSplit_split.tolist() if hasattr(res_StratifiedShuffleSplit_split, 'tolist') else res_StratifiedShuffleSplit_split`\n  }\n}\n\nexport interface StratifiedShuffleSplitOptions {\n  /**\n    Number of re-shuffling & splitting iterations.\n\n    @defaultValue `10`\n   */\n  n_splits?: number\n\n  /**\n    If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If train_size is also None, it will be set to 0.1.\n   */\n  test_size?: number\n\n  /**\n    If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.\n   */\n  train_size?: number\n\n  /**\n    Controls the randomness of the training and testing indices produced. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface StratifiedShuffleSplitGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface StratifiedShuffleSplitSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n\n    Note that providing y is sufficient to generate the splits and hence np.zeros(n_samples) may be used as a placeholder for X instead of actual training data.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems. Stratification is done based on the y labels.\n   */\n  y?: ArrayLike\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stratified K-Folds iterator variant with non-overlapping groups.\n\n  This cross-validation object is a variation of StratifiedKFold attempts to return stratified folds with non-overlapping groups. The folds are made by preserving the percentage of samples for each class.\n\n  Each group will appear exactly once in the test set across all folds (the number of distinct groups has to be at least equal to the number of folds).\n\n  The difference between GroupKFold and StratifiedGroupKFold is that the former attempts to create balanced folds such that the number of distinct groups is approximately the same in each fold, whereas StratifiedGroupKFold attempts to create folds which preserve the percentage of samples for each class as much as possible given the constraint of non-overlapping groups between splits.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedGroupKFold.html\n */\nexport class StratifiedGroupKFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: StratifiedGroupKFoldOptions) {\n    this.id = `StratifiedGroupKFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedGroupKFold instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'StratifiedGroupKFold.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import StratifiedGroupKFold\ntry: bridgeStratifiedGroupKFold\nexcept NameError: bridgeStratifiedGroupKFold = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_StratifiedGroupKFold = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'shuffle': ${this.opts['shuffle'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_StratifiedGroupKFold = {k: v for k, v in ctor_StratifiedGroupKFold.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeStratifiedGroupKFold[${this.id}] = StratifiedGroupKFold(**ctor_StratifiedGroupKFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeStratifiedGroupKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(\n    opts: StratifiedGroupKFoldGetNSplitsOptions\n  ): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedGroupKFold instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'StratifiedGroupKFold must call init() before get_n_splits()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedGroupKFold_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_StratifiedGroupKFold_get_n_splits = {k: v for k, v in pms_StratifiedGroupKFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedGroupKFold_get_n_splits = bridgeStratifiedGroupKFold[${this.id}].get_n_splits(**pms_StratifiedGroupKFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedGroupKFold_get_n_splits.tolist() if hasattr(res_StratifiedGroupKFold_get_n_splits, 'tolist') else res_StratifiedGroupKFold_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: StratifiedGroupKFoldSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This StratifiedGroupKFold instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('StratifiedGroupKFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_StratifiedGroupKFold_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_StratifiedGroupKFold_split = {k: v for k, v in pms_StratifiedGroupKFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_StratifiedGroupKFold_split = bridgeStratifiedGroupKFold[${this.id}].split(**pms_StratifiedGroupKFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_StratifiedGroupKFold_split.tolist() if hasattr(res_StratifiedGroupKFold_split, 'tolist') else res_StratifiedGroupKFold_split`\n  }\n}\n\nexport interface StratifiedGroupKFoldOptions {\n  /**\n    Number of folds. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    Whether to shuffle each class’s samples before splitting into batches. Note that the samples within each split will not be shuffled. This implementation can only shuffle groups that have approximately the same y distribution, no global shuffle will be performed.\n\n    @defaultValue `false`\n   */\n  shuffle?: boolean\n\n  /**\n    When shuffle is True, random_state affects the ordering of the indices, which controls the randomness of each fold for each class. Otherwise, leave random_state as None. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n\nexport interface StratifiedGroupKFoldGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface StratifiedGroupKFoldSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    The target variable for supervised learning problems.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Time Series cross-validator\n\n  Provides train/test indices to split time series data samples that are observed at fixed time intervals, in train/test sets. In each split, test indices must be higher than before, and thus shuffling in cross validator is inappropriate.\n\n  This cross-validation object is a variation of KFold. In the kth split, it returns first k folds as train set and the (k+1)th fold as test set.\n\n  Note that unlike standard cross-validation methods, successive training sets are supersets of those that come before them.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html\n */\nexport class TimeSeriesSplit {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: TimeSeriesSplitOptions) {\n    this.id = `TimeSeriesSplit${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This TimeSeriesSplit instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('TimeSeriesSplit.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import TimeSeriesSplit\ntry: bridgeTimeSeriesSplit\nexcept NameError: bridgeTimeSeriesSplit = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_TimeSeriesSplit = {'n_splits': ${\n      this.opts['n_splits'] ?? undefined\n    }, 'max_train_size': ${\n      this.opts['max_train_size'] ?? undefined\n    }, 'test_size': ${this.opts['test_size'] ?? undefined}, 'gap': ${\n      this.opts['gap'] ?? undefined\n    }}\n\nctor_TimeSeriesSplit = {k: v for k, v in ctor_TimeSeriesSplit.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeTimeSeriesSplit[${this.id}] = TimeSeriesSplit(**ctor_TimeSeriesSplit)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeTimeSeriesSplit[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator\n   */\n  async get_n_splits(opts: TimeSeriesSplitGetNSplitsOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This TimeSeriesSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TimeSeriesSplit must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TimeSeriesSplit_get_n_splits = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_TimeSeriesSplit_get_n_splits = {k: v for k, v in pms_TimeSeriesSplit_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TimeSeriesSplit_get_n_splits = bridgeTimeSeriesSplit[${this.id}].get_n_splits(**pms_TimeSeriesSplit_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TimeSeriesSplit_get_n_splits.tolist() if hasattr(res_TimeSeriesSplit_get_n_splits, 'tolist') else res_TimeSeriesSplit_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: TimeSeriesSplitSplitOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This TimeSeriesSplit instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('TimeSeriesSplit must call init() before split()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_TimeSeriesSplit_split = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None}\n\npms_TimeSeriesSplit_split = {k: v for k, v in pms_TimeSeriesSplit_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TimeSeriesSplit_split = bridgeTimeSeriesSplit[${this.id}].split(**pms_TimeSeriesSplit_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TimeSeriesSplit_split.tolist() if hasattr(res_TimeSeriesSplit_split, 'tolist') else res_TimeSeriesSplit_split`\n  }\n}\n\nexport interface TimeSeriesSplitOptions {\n  /**\n    Number of splits. Must be at least 2.\n\n    @defaultValue `5`\n   */\n  n_splits?: number\n\n  /**\n    Maximum size for a single training set.\n   */\n  max_train_size?: number\n\n  /**\n    Used to limit the size of the test set. Defaults to n_samples // (n_splits + 1), which is the maximum allowed value with gap=0.\n   */\n  test_size?: number\n\n  /**\n    Number of samples to exclude from the end of each train set before the test set.\n\n    @defaultValue `0`\n   */\n  gap?: number\n}\n\nexport interface TimeSeriesSplitGetNSplitsOptions {\n  /**\n    Always ignored, exists for compatibility.\n   */\n  X?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: any\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: any\n}\n\nexport interface TimeSeriesSplitSplitOptions {\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  y?: ArrayLike\n\n  /**\n    Always ignored, exists for compatibility.\n   */\n  groups?: ArrayLike\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Exhaustive search over specified parameter values for an estimator.\n\n  Important members are fit, predict.\n\n  GridSearchCV implements a “fit” and a “score” method. It also implements “score_samples”, “predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform” if they are implemented in the estimator used.\n\n  The parameters of the estimator used to apply these methods are optimized by cross-validated grid-search over a parameter grid.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html\n */\nexport class GridSearchCV {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: GridSearchCVOptions) {\n    this.id = `GridSearchCV${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('GridSearchCV.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\ntry: bridgeGridSearchCV\nexcept NameError: bridgeGridSearchCV = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_GridSearchCV = {'estimator': ${\n      this.opts['estimator'] ?? undefined\n    }, 'param_grid': ${this.opts['param_grid'] ?? undefined}, 'scoring': ${\n      this.opts['scoring'] ?? undefined\n    }, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}, 'refit': ${\n      this.opts['refit'] ?? undefined\n    }, 'cv': ${this.opts['cv'] ?? undefined}, 'verbose': ${\n      this.opts['verbose'] ?? undefined\n    }, 'pre_dispatch': ${\n      this.opts['pre_dispatch'] ?? undefined\n    }, 'error_score': ${\n      this.opts['error_score'] ?? undefined\n    }, 'return_train_score': ${this.opts['return_train_score'] ?? undefined}}\n\nctor_GridSearchCV = {k: v for k, v in ctor_GridSearchCV.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeGridSearchCV[${this.id}] = GridSearchCV(**ctor_GridSearchCV)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeGridSearchCV[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Call decision_function on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports decision_function.\n   */\n  async decision_function(\n    opts: GridSearchCVDecisionFunctionOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_decision_function = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_GridSearchCV_decision_function = {k: v for k, v in pms_GridSearchCV_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_decision_function = bridgeGridSearchCV[${this.id}].decision_function(**pms_GridSearchCV_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_decision_function.tolist() if hasattr(res_GridSearchCV_decision_function, 'tolist') else res_GridSearchCV_decision_function`\n  }\n\n  /**\n    Run fit with all sets of parameters.\n   */\n  async fit(opts: GridSearchCVFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_GridSearchCV_fit = {k: v for k, v in pms_GridSearchCV_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_fit = bridgeGridSearchCV[${this.id}].fit(**pms_GridSearchCV_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_fit.tolist() if hasattr(res_GridSearchCV_fit, 'tolist') else res_GridSearchCV_fit`\n  }\n\n  /**\n    Call inverse_transform on the estimator with the best found params.\n\n    Only available if the underlying estimator implements inverse_transform and refit=True.\n   */\n  async inverse_transform(\n    opts: GridSearchCVInverseTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_inverse_transform = {'Xt': ${\n      opts['Xt'] ?? undefined\n    }}\n\npms_GridSearchCV_inverse_transform = {k: v for k, v in pms_GridSearchCV_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_inverse_transform = bridgeGridSearchCV[${this.id}].inverse_transform(**pms_GridSearchCV_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_inverse_transform.tolist() if hasattr(res_GridSearchCV_inverse_transform, 'tolist') else res_GridSearchCV_inverse_transform`\n  }\n\n  /**\n    Call predict on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict.\n   */\n  async predict(opts: GridSearchCVPredictOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_predict = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_GridSearchCV_predict = {k: v for k, v in pms_GridSearchCV_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_predict = bridgeGridSearchCV[${this.id}].predict(**pms_GridSearchCV_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_predict.tolist() if hasattr(res_GridSearchCV_predict, 'tolist') else res_GridSearchCV_predict`\n  }\n\n  /**\n    Call predict_log_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_log_proba.\n   */\n  async predict_log_proba(\n    opts: GridSearchCVPredictLogProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_predict_log_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_GridSearchCV_predict_log_proba = {k: v for k, v in pms_GridSearchCV_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_predict_log_proba = bridgeGridSearchCV[${this.id}].predict_log_proba(**pms_GridSearchCV_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_predict_log_proba.tolist() if hasattr(res_GridSearchCV_predict_log_proba, 'tolist') else res_GridSearchCV_predict_log_proba`\n  }\n\n  /**\n    Call predict_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_proba.\n   */\n  async predict_proba(opts: GridSearchCVPredictProbaOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before predict_proba()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_predict_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_GridSearchCV_predict_proba = {k: v for k, v in pms_GridSearchCV_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_predict_proba = bridgeGridSearchCV[${this.id}].predict_proba(**pms_GridSearchCV_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_predict_proba.tolist() if hasattr(res_GridSearchCV_predict_proba, 'tolist') else res_GridSearchCV_predict_proba`\n  }\n\n  /**\n    Return the score on the given data, if the estimator has been refit.\n\n    This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.\n   */\n  async score(opts: GridSearchCVScoreOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_GridSearchCV_score = {k: v for k, v in pms_GridSearchCV_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_score = bridgeGridSearchCV[${this.id}].score(**pms_GridSearchCV_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_score.tolist() if hasattr(res_GridSearchCV_score, 'tolist') else res_GridSearchCV_score`\n  }\n\n  /**\n    Call score_samples on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports score_samples.\n   */\n  async score_samples(opts: GridSearchCVScoreSamplesOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before score_samples()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_score_samples = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_GridSearchCV_score_samples = {k: v for k, v in pms_GridSearchCV_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_score_samples = bridgeGridSearchCV[${this.id}].score_samples(**pms_GridSearchCV_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_score_samples.tolist() if hasattr(res_GridSearchCV_score_samples, 'tolist') else res_GridSearchCV_score_samples`\n  }\n\n  /**\n    Call transform on the estimator with the best found parameters.\n\n    Only available if the underlying estimator supports transform and refit=True.\n   */\n  async transform(\n    opts: GridSearchCVTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_GridSearchCV_transform = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_GridSearchCV_transform = {k: v for k, v in pms_GridSearchCV_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_GridSearchCV_transform = bridgeGridSearchCV[${this.id}].transform(**pms_GridSearchCV_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_GridSearchCV_transform.tolist() if hasattr(res_GridSearchCV_transform, 'tolist') else res_GridSearchCV_transform`\n  }\n\n  /**\n    A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame.\n\n    For instance the below given table\n   */\n  get cv_results_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing cv_results_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_cv_results_ = bridgeGridSearchCV[${this.id}].cv_results_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_cv_results_.tolist() if hasattr(attr_GridSearchCV_cv_results_, 'tolist') else attr_GridSearchCV_cv_results_`\n    })()\n  }\n\n  /**\n    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.\n\n    See refit parameter for more information on allowed values.\n   */\n  get best_estimator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing best_estimator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_best_estimator_ = bridgeGridSearchCV[${this.id}].best_estimator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_best_estimator_.tolist() if hasattr(attr_GridSearchCV_best_estimator_, 'tolist') else attr_GridSearchCV_best_estimator_`\n    })()\n  }\n\n  /**\n    Mean cross-validated score of the best_estimator\n\n    For multi-metric evaluation, this is present only if refit is specified.\n\n    This attribute is not available if refit is a function.\n   */\n  get best_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing best_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_best_score_ = bridgeGridSearchCV[${this.id}].best_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_best_score_.tolist() if hasattr(attr_GridSearchCV_best_score_, 'tolist') else attr_GridSearchCV_best_score_`\n    })()\n  }\n\n  /**\n    Parameter setting that gave the best results on the hold out data.\n\n    For multi-metric evaluation, this is present only if refit is specified.\n   */\n  get best_params_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing best_params_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_best_params_ = bridgeGridSearchCV[${this.id}].best_params_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_best_params_.tolist() if hasattr(attr_GridSearchCV_best_params_, 'tolist') else attr_GridSearchCV_best_params_`\n    })()\n  }\n\n  /**\n    The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.\n\n    The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).\n\n    For multi-metric evaluation, this is present only if refit is specified.\n   */\n  get best_index_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing best_index_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_best_index_ = bridgeGridSearchCV[${this.id}].best_index_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_best_index_.tolist() if hasattr(attr_GridSearchCV_best_index_, 'tolist') else attr_GridSearchCV_best_index_`\n    })()\n  }\n\n  /**\n    Scorer function used on the held out data to choose the best parameters for the model.\n\n    For multi-metric evaluation, this attribute holds the validated scoring dict which maps the scorer key to the scorer callable.\n   */\n  get scorer_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('GridSearchCV must call init() before accessing scorer_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_scorer_ = bridgeGridSearchCV[${this.id}].scorer_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_scorer_.tolist() if hasattr(attr_GridSearchCV_scorer_, 'tolist') else attr_GridSearchCV_scorer_`\n    })()\n  }\n\n  /**\n    The number of cross-validation splits (folds/iterations).\n   */\n  get n_splits_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing n_splits_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_n_splits_ = bridgeGridSearchCV[${this.id}].n_splits_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_n_splits_.tolist() if hasattr(attr_GridSearchCV_n_splits_, 'tolist') else attr_GridSearchCV_n_splits_`\n    })()\n  }\n\n  /**\n    Seconds used for refitting the best model on the whole dataset.\n\n    This is present only if refit is not False.\n   */\n  get refit_time_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing refit_time_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_refit_time_ = bridgeGridSearchCV[${this.id}].refit_time_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_refit_time_.tolist() if hasattr(attr_GridSearchCV_refit_time_, 'tolist') else attr_GridSearchCV_refit_time_`\n    })()\n  }\n\n  /**\n    Whether or not the scorers compute several metrics.\n   */\n  get multimetric_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing multimetric_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_multimetric_ = bridgeGridSearchCV[${this.id}].multimetric_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_multimetric_.tolist() if hasattr(attr_GridSearchCV_multimetric_, 'tolist') else attr_GridSearchCV_multimetric_`\n    })()\n  }\n\n  /**\n    Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This GridSearchCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'GridSearchCV must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_GridSearchCV_feature_names_in_ = bridgeGridSearchCV[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_GridSearchCV_feature_names_in_.tolist() if hasattr(attr_GridSearchCV_feature_names_in_, 'tolist') else attr_GridSearchCV_feature_names_in_`\n    })()\n  }\n}\n\nexport interface GridSearchCVOptions {\n  /**\n    This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.\n   */\n  estimator?: any\n\n  /**\n    Dictionary with parameters names (str) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.\n   */\n  param_grid?: any\n\n  /**\n    Strategy to evaluate the performance of the cross-validated model on the test set.\n\n    If scoring represents a single score, one can use:\n   */\n  scoring?: string | any[] | any\n\n  /**\n    Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    Refit an estimator using the best found parameters on the whole dataset.\n\n    For multiple metric evaluation, this needs to be a str denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.\n\n    Where there are considerations other than maximum score in choosing a best estimator, refit can be set to a function which returns the selected best_index_ given cv_results_. In that case, the best_estimator_ and best_params_ will be set according to the returned best_index_ while the best_score_ attribute will not be available.\n\n    The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this GridSearchCV instance.\n\n    Also for multiple metric evaluation, the attributes best_index_, best_score_ and best_params_ will only be available if refit is set and all of them will be determined w.r.t this specific scorer.\n\n    See scoring parameter to know more about multiple metric evaluation.\n\n    See Custom refit strategy of a grid search with cross-validation to see how to design a custom selection strategy using a callable via refit.\n\n    @defaultValue `true`\n   */\n  refit?: boolean\n\n  /**\n    Determines the cross-validation splitting strategy. Possible inputs for cv are:\n   */\n  cv?: number\n\n  /**\n    Controls the verbosity: the higher, the more messages.\n   */\n  verbose?: number\n\n  /**\n    Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:\n\n    @defaultValue `'2*n_jobs'`\n   */\n  pre_dispatch?: string\n\n  /**\n    Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error.\n   */\n  error_score?: 'raise'\n\n  /**\n    If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.\n\n    @defaultValue `false`\n   */\n  return_train_score?: boolean\n}\n\nexport interface GridSearchCVDecisionFunctionOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface GridSearchCVFitOptions {\n  /**\n    Training vector, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike[]\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).\n   */\n  groups?: ArrayLike\n\n  /**\n    Parameters passed to the fit method of the estimator.\n\n    If a fit parameter is an array-like whose length is equal to num_samples then it will be split across CV groups along with X and y. For example, the sample_weight parameter is split because len(sample_weights) = len(X).\n   */\n  fit_params?: any\n}\n\nexport interface GridSearchCVInverseTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  Xt?: any\n}\n\nexport interface GridSearchCVPredictOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface GridSearchCVPredictLogProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface GridSearchCVPredictProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface GridSearchCVScoreOptions {\n  /**\n    Input data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike[]\n}\n\nexport interface GridSearchCVScoreSamplesOptions {\n  /**\n    Data to predict on. Must fulfill input requirements of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface GridSearchCVTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Search over specified parameter values with successive halving.\n\n  The search strategy starts evaluating all the candidates with a small amount of resources and iteratively selects the best candidates, using more and more resources.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingGridSearchCV.html\n */\nexport class HalvingGridSearchCV {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: HalvingGridSearchCVOptions) {\n    this.id = `HalvingGridSearchCV${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'HalvingGridSearchCV.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import HalvingGridSearchCV\ntry: bridgeHalvingGridSearchCV\nexcept NameError: bridgeHalvingGridSearchCV = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_HalvingGridSearchCV = {'estimator': ${\n      this.opts['estimator'] ?? undefined\n    }, 'param_grid': ${this.opts['param_grid'] ?? undefined}, 'factor': ${\n      this.opts['factor'] ?? undefined\n    }, 'resource': ${this.opts['resource'] ?? undefined}, 'max_resources': ${\n      this.opts['max_resources'] ?? undefined\n    }, 'min_resources': ${\n      this.opts['min_resources'] ?? undefined\n    }, 'aggressive_elimination': ${\n      this.opts['aggressive_elimination'] ?? undefined\n    }, 'cv': ${this.opts['cv'] ?? undefined}, 'scoring': ${\n      this.opts['scoring'] ?? undefined\n    }, 'refit': ${this.opts['refit'] ?? undefined}, 'error_score': ${\n      this.opts['error_score'] ?? undefined\n    }, 'return_train_score': ${\n      this.opts['return_train_score'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}, 'n_jobs': ${\n      this.opts['n_jobs'] ?? undefined\n    }, 'verbose': ${this.opts['verbose'] ?? undefined}}\n\nctor_HalvingGridSearchCV = {k: v for k, v in ctor_HalvingGridSearchCV.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeHalvingGridSearchCV[${this.id}] = HalvingGridSearchCV(**ctor_HalvingGridSearchCV)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeHalvingGridSearchCV[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Call decision_function on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports decision_function.\n   */\n  async decision_function(\n    opts: HalvingGridSearchCVDecisionFunctionOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_decision_function = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_decision_function = {k: v for k, v in pms_HalvingGridSearchCV_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_decision_function = bridgeHalvingGridSearchCV[${this.id}].decision_function(**pms_HalvingGridSearchCV_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_decision_function.tolist() if hasattr(res_HalvingGridSearchCV_decision_function, 'tolist') else res_HalvingGridSearchCV_decision_function`\n  }\n\n  /**\n    Run fit with all sets of parameters.\n   */\n  async fit(opts: HalvingGridSearchCVFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingGridSearchCV must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_fit = {k: v for k, v in pms_HalvingGridSearchCV_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_fit = bridgeHalvingGridSearchCV[${this.id}].fit(**pms_HalvingGridSearchCV_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_fit.tolist() if hasattr(res_HalvingGridSearchCV_fit, 'tolist') else res_HalvingGridSearchCV_fit`\n  }\n\n  /**\n    Call inverse_transform on the estimator with the best found params.\n\n    Only available if the underlying estimator implements inverse_transform and refit=True.\n   */\n  async inverse_transform(\n    opts: HalvingGridSearchCVInverseTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_inverse_transform = {'Xt': ${\n      opts['Xt'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_inverse_transform = {k: v for k, v in pms_HalvingGridSearchCV_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_inverse_transform = bridgeHalvingGridSearchCV[${this.id}].inverse_transform(**pms_HalvingGridSearchCV_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_inverse_transform.tolist() if hasattr(res_HalvingGridSearchCV_inverse_transform, 'tolist') else res_HalvingGridSearchCV_inverse_transform`\n  }\n\n  /**\n    Call predict on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict.\n   */\n  async predict(opts: HalvingGridSearchCVPredictOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingGridSearchCV must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_predict = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_predict = {k: v for k, v in pms_HalvingGridSearchCV_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_predict = bridgeHalvingGridSearchCV[${this.id}].predict(**pms_HalvingGridSearchCV_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_predict.tolist() if hasattr(res_HalvingGridSearchCV_predict, 'tolist') else res_HalvingGridSearchCV_predict`\n  }\n\n  /**\n    Call predict_log_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_log_proba.\n   */\n  async predict_log_proba(\n    opts: HalvingGridSearchCVPredictLogProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_predict_log_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_predict_log_proba = {k: v for k, v in pms_HalvingGridSearchCV_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_predict_log_proba = bridgeHalvingGridSearchCV[${this.id}].predict_log_proba(**pms_HalvingGridSearchCV_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_predict_log_proba.tolist() if hasattr(res_HalvingGridSearchCV_predict_log_proba, 'tolist') else res_HalvingGridSearchCV_predict_log_proba`\n  }\n\n  /**\n    Call predict_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_proba.\n   */\n  async predict_proba(\n    opts: HalvingGridSearchCVPredictProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before predict_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_predict_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_predict_proba = {k: v for k, v in pms_HalvingGridSearchCV_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_predict_proba = bridgeHalvingGridSearchCV[${this.id}].predict_proba(**pms_HalvingGridSearchCV_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_predict_proba.tolist() if hasattr(res_HalvingGridSearchCV_predict_proba, 'tolist') else res_HalvingGridSearchCV_predict_proba`\n  }\n\n  /**\n    Return the score on the given data, if the estimator has been refit.\n\n    This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.\n   */\n  async score(opts: HalvingGridSearchCVScoreOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingGridSearchCV must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_HalvingGridSearchCV_score = {k: v for k, v in pms_HalvingGridSearchCV_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_score = bridgeHalvingGridSearchCV[${this.id}].score(**pms_HalvingGridSearchCV_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_score.tolist() if hasattr(res_HalvingGridSearchCV_score, 'tolist') else res_HalvingGridSearchCV_score`\n  }\n\n  /**\n    Call score_samples on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports score_samples.\n   */\n  async score_samples(\n    opts: HalvingGridSearchCVScoreSamplesOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before score_samples()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_score_samples = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_score_samples = {k: v for k, v in pms_HalvingGridSearchCV_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_score_samples = bridgeHalvingGridSearchCV[${this.id}].score_samples(**pms_HalvingGridSearchCV_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_score_samples.tolist() if hasattr(res_HalvingGridSearchCV_score_samples, 'tolist') else res_HalvingGridSearchCV_score_samples`\n  }\n\n  /**\n    Call transform on the estimator with the best found parameters.\n\n    Only available if the underlying estimator supports transform and refit=True.\n   */\n  async transform(\n    opts: HalvingGridSearchCVTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingGridSearchCV must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingGridSearchCV_transform = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingGridSearchCV_transform = {k: v for k, v in pms_HalvingGridSearchCV_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingGridSearchCV_transform = bridgeHalvingGridSearchCV[${this.id}].transform(**pms_HalvingGridSearchCV_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingGridSearchCV_transform.tolist() if hasattr(res_HalvingGridSearchCV_transform, 'tolist') else res_HalvingGridSearchCV_transform`\n  }\n\n  /**\n    The amount of resources used at each iteration.\n   */\n  get n_resources_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_resources_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_resources_ = bridgeHalvingGridSearchCV[${this.id}].n_resources_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_n_resources_, 'tolist') else attr_HalvingGridSearchCV_n_resources_`\n    })()\n  }\n\n  /**\n    The number of candidate parameters that were evaluated at each iteration.\n   */\n  get n_candidates_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_candidates_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_candidates_ = bridgeHalvingGridSearchCV[${this.id}].n_candidates_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_candidates_.tolist() if hasattr(attr_HalvingGridSearchCV_n_candidates_, 'tolist') else attr_HalvingGridSearchCV_n_candidates_`\n    })()\n  }\n\n  /**\n    The number of candidate parameters that are left after the last iteration. It corresponds to ceil(n_candidates[-1] / factor)\n   */\n  get n_remaining_candidates_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_remaining_candidates_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_remaining_candidates_ = bridgeHalvingGridSearchCV[${this.id}].n_remaining_candidates_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_remaining_candidates_.tolist() if hasattr(attr_HalvingGridSearchCV_n_remaining_candidates_, 'tolist') else attr_HalvingGridSearchCV_n_remaining_candidates_`\n    })()\n  }\n\n  /**\n    The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of min_resources_, the actual number of resources used at the last iteration may be smaller than max_resources_.\n   */\n  get max_resources_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing max_resources_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_max_resources_ = bridgeHalvingGridSearchCV[${this.id}].max_resources_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_max_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_max_resources_, 'tolist') else attr_HalvingGridSearchCV_max_resources_`\n    })()\n  }\n\n  /**\n    The amount of resources that are allocated for each candidate at the first iteration.\n   */\n  get min_resources_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing min_resources_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_min_resources_ = bridgeHalvingGridSearchCV[${this.id}].min_resources_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_min_resources_.tolist() if hasattr(attr_HalvingGridSearchCV_min_resources_, 'tolist') else attr_HalvingGridSearchCV_min_resources_`\n    })()\n  }\n\n  /**\n    The actual number of iterations that were run. This is equal to n_required_iterations_ if aggressive_elimination is True. Else, this is equal to min(n_possible_iterations_, n_required_iterations_).\n   */\n  get n_iterations_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_iterations_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_iterations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_iterations_`\n    })()\n  }\n\n  /**\n    The number of iterations that are possible starting with min_resources_ resources and without exceeding max_resources_.\n   */\n  get n_possible_iterations_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_possible_iterations_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_possible_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_possible_iterations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_possible_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_possible_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_possible_iterations_`\n    })()\n  }\n\n  /**\n    The number of iterations that are required to end up with less than factor candidates at the last iteration, starting with min_resources_ resources. This will be smaller than n_possible_iterations_ when there isn’t enough resources.\n   */\n  get n_required_iterations_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_required_iterations_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_required_iterations_ = bridgeHalvingGridSearchCV[${this.id}].n_required_iterations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_required_iterations_.tolist() if hasattr(attr_HalvingGridSearchCV_n_required_iterations_, 'tolist') else attr_HalvingGridSearchCV_n_required_iterations_`\n    })()\n  }\n\n  /**\n    A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame. It contains lots of information for analysing the results of a search. Please refer to the User guide for details.\n   */\n  get cv_results_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing cv_results_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_cv_results_ = bridgeHalvingGridSearchCV[${this.id}].cv_results_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_cv_results_.tolist() if hasattr(attr_HalvingGridSearchCV_cv_results_, 'tolist') else attr_HalvingGridSearchCV_cv_results_`\n    })()\n  }\n\n  /**\n    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.\n   */\n  get best_estimator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing best_estimator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_best_estimator_ = bridgeHalvingGridSearchCV[${this.id}].best_estimator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_best_estimator_.tolist() if hasattr(attr_HalvingGridSearchCV_best_estimator_, 'tolist') else attr_HalvingGridSearchCV_best_estimator_`\n    })()\n  }\n\n  /**\n    Mean cross-validated score of the best_estimator.\n   */\n  get best_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing best_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_best_score_ = bridgeHalvingGridSearchCV[${this.id}].best_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_best_score_.tolist() if hasattr(attr_HalvingGridSearchCV_best_score_, 'tolist') else attr_HalvingGridSearchCV_best_score_`\n    })()\n  }\n\n  /**\n    Parameter setting that gave the best results on the hold out data.\n   */\n  get best_params_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing best_params_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_best_params_ = bridgeHalvingGridSearchCV[${this.id}].best_params_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_best_params_.tolist() if hasattr(attr_HalvingGridSearchCV_best_params_, 'tolist') else attr_HalvingGridSearchCV_best_params_`\n    })()\n  }\n\n  /**\n    The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.\n\n    The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).\n   */\n  get best_index_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing best_index_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_best_index_ = bridgeHalvingGridSearchCV[${this.id}].best_index_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_best_index_.tolist() if hasattr(attr_HalvingGridSearchCV_best_index_, 'tolist') else attr_HalvingGridSearchCV_best_index_`\n    })()\n  }\n\n  /**\n    Scorer function used on the held out data to choose the best parameters for the model.\n   */\n  get scorer_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing scorer_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_scorer_ = bridgeHalvingGridSearchCV[${this.id}].scorer_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_scorer_.tolist() if hasattr(attr_HalvingGridSearchCV_scorer_, 'tolist') else attr_HalvingGridSearchCV_scorer_`\n    })()\n  }\n\n  /**\n    The number of cross-validation splits (folds/iterations).\n   */\n  get n_splits_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing n_splits_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_n_splits_ = bridgeHalvingGridSearchCV[${this.id}].n_splits_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_n_splits_.tolist() if hasattr(attr_HalvingGridSearchCV_n_splits_, 'tolist') else attr_HalvingGridSearchCV_n_splits_`\n    })()\n  }\n\n  /**\n    Seconds used for refitting the best model on the whole dataset.\n\n    This is present only if refit is not False.\n   */\n  get refit_time_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing refit_time_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_refit_time_ = bridgeHalvingGridSearchCV[${this.id}].refit_time_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_refit_time_.tolist() if hasattr(attr_HalvingGridSearchCV_refit_time_, 'tolist') else attr_HalvingGridSearchCV_refit_time_`\n    })()\n  }\n\n  /**\n    Whether or not the scorers compute several metrics.\n   */\n  get multimetric_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing multimetric_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_multimetric_ = bridgeHalvingGridSearchCV[${this.id}].multimetric_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_multimetric_.tolist() if hasattr(attr_HalvingGridSearchCV_multimetric_, 'tolist') else attr_HalvingGridSearchCV_multimetric_`\n    })()\n  }\n\n  /**\n    Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingGridSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingGridSearchCV must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingGridSearchCV_feature_names_in_ = bridgeHalvingGridSearchCV[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingGridSearchCV_feature_names_in_.tolist() if hasattr(attr_HalvingGridSearchCV_feature_names_in_, 'tolist') else attr_HalvingGridSearchCV_feature_names_in_`\n    })()\n  }\n}\n\nexport interface HalvingGridSearchCVOptions {\n  /**\n    This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.\n   */\n  estimator?: any\n\n  /**\n    Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.\n   */\n  param_grid?: any\n\n  /**\n    The ‘halving’ parameter, which determines the proportion of candidates that are selected for each subsequent iteration. For example, factor=3 means that only one third of the candidates are selected.\n\n    @defaultValue `3`\n   */\n  factor?: number\n\n  /**\n    Defines the resource that increases with each iteration. By default, the resource is the number of samples. It can also be set to any parameter of the base estimator that accepts positive integer values, e.g. ‘n_iterations’ or ‘n_estimators’ for a gradient boosting estimator. In this case max_resources cannot be ‘auto’ and must be set explicitly.\n\n    @defaultValue `'n_samples'`\n   */\n  resource?: 'n_samples' | string\n\n  /**\n    The maximum amount of resource that any candidate is allowed to use for a given iteration. By default, this is set to n_samples when resource='n_samples' (default), else an error is raised.\n\n    @defaultValue `'auto'`\n   */\n  max_resources?: number\n\n  /**\n    The minimum amount of resource that any candidate is allowed to use for a given iteration. Equivalently, this defines the amount of resources r0 that are allocated for each candidate at the first iteration.\n\n    @defaultValue `'exhaust'`\n   */\n  min_resources?: 'exhaust' | 'smallest' | number\n\n  /**\n    This is only relevant in cases where there isn’t enough resources to reduce the remaining candidates to at most factor after the last iteration. If True, then the search process will ‘replay’ the first iteration for as long as needed until the number of candidates is small enough. This is False by default, which means that the last iteration may evaluate more than factor candidates. See Aggressive elimination of candidates for more details.\n\n    @defaultValue `false`\n   */\n  aggressive_elimination?: boolean\n\n  /**\n    Determines the cross-validation splitting strategy. Possible inputs for cv are:\n\n    @defaultValue `5`\n   */\n  cv?: number\n\n  /**\n    A single string (see The scoring parameter: defining model evaluation rules) or a callable (see Defining your scoring strategy from metric functions) to evaluate the predictions on the test set. If None, the estimator’s score method is used.\n   */\n  scoring?: string\n\n  /**\n    If True, refit an estimator using the best found parameters on the whole dataset.\n\n    The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this HalvingGridSearchCV instance.\n\n    @defaultValue `true`\n   */\n  refit?: boolean\n\n  /**\n    Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is np.nan.\n   */\n  error_score?: 'raise'\n\n  /**\n    If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.\n\n    @defaultValue `false`\n   */\n  return_train_score?: boolean\n\n  /**\n    Pseudo random number generator state used for subsampling the dataset when resources != 'n_samples'. Ignored otherwise. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n\n  /**\n    Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    Controls the verbosity: the higher, the more messages.\n   */\n  verbose?: number\n}\n\nexport interface HalvingGridSearchCVDecisionFunctionOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingGridSearchCVFitOptions {\n  /**\n    Training vector, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).\n   */\n  groups?: ArrayLike\n\n  /**\n    Parameters passed to the fit method of the estimator.\n   */\n  fit_params?: any\n}\n\nexport interface HalvingGridSearchCVInverseTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  Xt?: any\n}\n\nexport interface HalvingGridSearchCVPredictOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingGridSearchCVPredictLogProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingGridSearchCVPredictProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingGridSearchCVScoreOptions {\n  /**\n    Input data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike[]\n}\n\nexport interface HalvingGridSearchCVScoreSamplesOptions {\n  /**\n    Data to predict on. Must fulfill input requirements of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingGridSearchCVTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Grid of parameters with a discrete number of values for each.\n\n  Can be used to iterate over parameter value combinations with the Python built-in function iter. The order of the generated parameter combinations is deterministic.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ParameterGrid.html\n */\nexport class ParameterGrid {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: ParameterGridOptions) {\n    this.id = `ParameterGrid${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This ParameterGrid instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ParameterGrid.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import ParameterGrid\ntry: bridgeParameterGrid\nexcept NameError: bridgeParameterGrid = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_ParameterGrid = {'param_grid': ${\n      this.opts['param_grid'] ?? undefined\n    }}\n\nctor_ParameterGrid = {k: v for k, v in ctor_ParameterGrid.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeParameterGrid[${this.id}] = ParameterGrid(**ctor_ParameterGrid)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeParameterGrid[${this.id}]`\n\n    this._isDisposed = true\n  }\n}\n\nexport interface ParameterGridOptions {\n  /**\n    The parameter grid to explore, as a dictionary mapping estimator parameters to sequences of allowed values.\n\n    An empty dict signifies default parameters.\n\n    A sequence of dicts signifies a sequence of grids to search, and is useful to avoid exploring parameter combinations that make no sense or have no effect. See the examples below.\n   */\n  param_grid?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Generator on parameters sampled from given distributions.\n\n  Non-deterministic iterable over random candidate combinations for hyper- parameter search. If all parameters are presented as a list, sampling without replacement is performed. If at least one parameter is given as a distribution, sampling with replacement is used. It is highly recommended to use continuous distributions for continuous parameters.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ParameterSampler.html\n */\nexport class ParameterSampler {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: ParameterSamplerOptions) {\n    this.id = `ParameterSampler${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ParameterSampler instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ParameterSampler.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import ParameterSampler\ntry: bridgeParameterSampler\nexcept NameError: bridgeParameterSampler = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_ParameterSampler = {'param_distributions': ${\n      this.opts['param_distributions'] ?? undefined\n    }, 'n_iter': ${this.opts['n_iter'] ?? undefined}, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }}\n\nctor_ParameterSampler = {k: v for k, v in ctor_ParameterSampler.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeParameterSampler[${this.id}] = ParameterSampler(**ctor_ParameterSampler)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeParameterSampler[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Yields dictionaries mapping each estimator parameter to as sampled value.\n   */\n  get params(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ParameterSampler instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ParameterSampler must call init() before accessing params'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ParameterSampler_params = bridgeParameterSampler[${this.id}].params`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ParameterSampler_params.tolist() if hasattr(attr_ParameterSampler_params, 'tolist') else attr_ParameterSampler_params`\n    })()\n  }\n}\n\nexport interface ParameterSamplerOptions {\n  /**\n    Dictionary with parameters names (str) as keys and distributions or lists of parameters to try. Distributions must provide a rvs method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly. If a list of dicts is given, first a dict is sampled uniformly, and then a parameter is sampled using that dict as above.\n   */\n  param_distributions?: any\n\n  /**\n    Number of parameter settings that are produced.\n   */\n  n_iter?: number\n\n  /**\n    Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Randomized search on hyper parameters.\n\n  RandomizedSearchCV implements a “fit” and a “score” method. It also implements “score_samples”, “predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform” if they are implemented in the estimator used.\n\n  The parameters of the estimator used to apply these methods are optimized by cross-validated search over parameter settings.\n\n  In contrast to GridSearchCV, not all parameter values are tried out, but rather a fixed number of parameter settings is sampled from the specified distributions. The number of parameter settings that are tried is given by n_iter.\n\n  If all parameters are presented as a list, sampling without replacement is performed. If at least one parameter is given as a distribution, sampling with replacement is used. It is highly recommended to use continuous distributions for continuous parameters.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\n */\nexport class RandomizedSearchCV {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: RandomizedSearchCVOptions) {\n    this.id = `RandomizedSearchCV${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'RandomizedSearchCV.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import RandomizedSearchCV\ntry: bridgeRandomizedSearchCV\nexcept NameError: bridgeRandomizedSearchCV = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_RandomizedSearchCV = {'estimator': ${\n      this.opts['estimator'] ?? undefined\n    }, 'param_distributions': ${\n      this.opts['param_distributions'] ?? undefined\n    }, 'n_iter': ${this.opts['n_iter'] ?? undefined}, 'scoring': ${\n      this.opts['scoring'] ?? undefined\n    }, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}, 'refit': ${\n      this.opts['refit'] ?? undefined\n    }, 'cv': ${this.opts['cv'] ?? undefined}, 'verbose': ${\n      this.opts['verbose'] ?? undefined\n    }, 'pre_dispatch': ${\n      this.opts['pre_dispatch'] ?? undefined\n    }, 'random_state': ${\n      this.opts['random_state'] ?? undefined\n    }, 'error_score': ${\n      this.opts['error_score'] ?? undefined\n    }, 'return_train_score': ${this.opts['return_train_score'] ?? undefined}}\n\nctor_RandomizedSearchCV = {k: v for k, v in ctor_RandomizedSearchCV.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRandomizedSearchCV[${this.id}] = RandomizedSearchCV(**ctor_RandomizedSearchCV)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRandomizedSearchCV[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Call decision_function on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports decision_function.\n   */\n  async decision_function(\n    opts: RandomizedSearchCVDecisionFunctionOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_decision_function = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_decision_function = {k: v for k, v in pms_RandomizedSearchCV_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_decision_function = bridgeRandomizedSearchCV[${this.id}].decision_function(**pms_RandomizedSearchCV_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_decision_function.tolist() if hasattr(res_RandomizedSearchCV_decision_function, 'tolist') else res_RandomizedSearchCV_decision_function`\n  }\n\n  /**\n    Run fit with all sets of parameters.\n   */\n  async fit(opts: RandomizedSearchCVFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RandomizedSearchCV must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_fit = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_fit = {k: v for k, v in pms_RandomizedSearchCV_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_fit = bridgeRandomizedSearchCV[${this.id}].fit(**pms_RandomizedSearchCV_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_fit.tolist() if hasattr(res_RandomizedSearchCV_fit, 'tolist') else res_RandomizedSearchCV_fit`\n  }\n\n  /**\n    Call inverse_transform on the estimator with the best found params.\n\n    Only available if the underlying estimator implements inverse_transform and refit=True.\n   */\n  async inverse_transform(\n    opts: RandomizedSearchCVInverseTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_inverse_transform = {'Xt': ${\n      opts['Xt'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_inverse_transform = {k: v for k, v in pms_RandomizedSearchCV_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_inverse_transform = bridgeRandomizedSearchCV[${this.id}].inverse_transform(**pms_RandomizedSearchCV_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_inverse_transform.tolist() if hasattr(res_RandomizedSearchCV_inverse_transform, 'tolist') else res_RandomizedSearchCV_inverse_transform`\n  }\n\n  /**\n    Call predict on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict.\n   */\n  async predict(opts: RandomizedSearchCVPredictOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RandomizedSearchCV must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_predict = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_predict = {k: v for k, v in pms_RandomizedSearchCV_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_predict = bridgeRandomizedSearchCV[${this.id}].predict(**pms_RandomizedSearchCV_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_predict.tolist() if hasattr(res_RandomizedSearchCV_predict, 'tolist') else res_RandomizedSearchCV_predict`\n  }\n\n  /**\n    Call predict_log_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_log_proba.\n   */\n  async predict_log_proba(\n    opts: RandomizedSearchCVPredictLogProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_predict_log_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_predict_log_proba = {k: v for k, v in pms_RandomizedSearchCV_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_predict_log_proba = bridgeRandomizedSearchCV[${this.id}].predict_log_proba(**pms_RandomizedSearchCV_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_predict_log_proba.tolist() if hasattr(res_RandomizedSearchCV_predict_log_proba, 'tolist') else res_RandomizedSearchCV_predict_log_proba`\n  }\n\n  /**\n    Call predict_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_proba.\n   */\n  async predict_proba(\n    opts: RandomizedSearchCVPredictProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before predict_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_predict_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_predict_proba = {k: v for k, v in pms_RandomizedSearchCV_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_predict_proba = bridgeRandomizedSearchCV[${this.id}].predict_proba(**pms_RandomizedSearchCV_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_predict_proba.tolist() if hasattr(res_RandomizedSearchCV_predict_proba, 'tolist') else res_RandomizedSearchCV_predict_proba`\n  }\n\n  /**\n    Return the score on the given data, if the estimator has been refit.\n\n    This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.\n   */\n  async score(opts: RandomizedSearchCVScoreOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RandomizedSearchCV must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_RandomizedSearchCV_score = {k: v for k, v in pms_RandomizedSearchCV_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_score = bridgeRandomizedSearchCV[${this.id}].score(**pms_RandomizedSearchCV_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_score.tolist() if hasattr(res_RandomizedSearchCV_score, 'tolist') else res_RandomizedSearchCV_score`\n  }\n\n  /**\n    Call score_samples on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports score_samples.\n   */\n  async score_samples(\n    opts: RandomizedSearchCVScoreSamplesOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before score_samples()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_score_samples = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_score_samples = {k: v for k, v in pms_RandomizedSearchCV_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_score_samples = bridgeRandomizedSearchCV[${this.id}].score_samples(**pms_RandomizedSearchCV_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_score_samples.tolist() if hasattr(res_RandomizedSearchCV_score_samples, 'tolist') else res_RandomizedSearchCV_score_samples`\n  }\n\n  /**\n    Call transform on the estimator with the best found parameters.\n\n    Only available if the underlying estimator supports transform and refit=True.\n   */\n  async transform(\n    opts: RandomizedSearchCVTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RandomizedSearchCV must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RandomizedSearchCV_transform = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_RandomizedSearchCV_transform = {k: v for k, v in pms_RandomizedSearchCV_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RandomizedSearchCV_transform = bridgeRandomizedSearchCV[${this.id}].transform(**pms_RandomizedSearchCV_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RandomizedSearchCV_transform.tolist() if hasattr(res_RandomizedSearchCV_transform, 'tolist') else res_RandomizedSearchCV_transform`\n  }\n\n  /**\n    A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame.\n\n    For instance the below given table\n   */\n  get cv_results_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing cv_results_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_cv_results_ = bridgeRandomizedSearchCV[${this.id}].cv_results_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_cv_results_.tolist() if hasattr(attr_RandomizedSearchCV_cv_results_, 'tolist') else attr_RandomizedSearchCV_cv_results_`\n    })()\n  }\n\n  /**\n    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.\n\n    For multi-metric evaluation, this attribute is present only if refit is specified.\n\n    See refit parameter for more information on allowed values.\n   */\n  get best_estimator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing best_estimator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_best_estimator_ = bridgeRandomizedSearchCV[${this.id}].best_estimator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_best_estimator_.tolist() if hasattr(attr_RandomizedSearchCV_best_estimator_, 'tolist') else attr_RandomizedSearchCV_best_estimator_`\n    })()\n  }\n\n  /**\n    Mean cross-validated score of the best_estimator.\n\n    For multi-metric evaluation, this is not available if refit is False. See refit parameter for more information.\n\n    This attribute is not available if refit is a function.\n   */\n  get best_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing best_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_best_score_ = bridgeRandomizedSearchCV[${this.id}].best_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_best_score_.tolist() if hasattr(attr_RandomizedSearchCV_best_score_, 'tolist') else attr_RandomizedSearchCV_best_score_`\n    })()\n  }\n\n  /**\n    Parameter setting that gave the best results on the hold out data.\n\n    For multi-metric evaluation, this is not available if refit is False. See refit parameter for more information.\n   */\n  get best_params_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing best_params_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_best_params_ = bridgeRandomizedSearchCV[${this.id}].best_params_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_best_params_.tolist() if hasattr(attr_RandomizedSearchCV_best_params_, 'tolist') else attr_RandomizedSearchCV_best_params_`\n    })()\n  }\n\n  /**\n    The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.\n\n    The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).\n\n    For multi-metric evaluation, this is not available if refit is False. See refit parameter for more information.\n   */\n  get best_index_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing best_index_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_best_index_ = bridgeRandomizedSearchCV[${this.id}].best_index_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_best_index_.tolist() if hasattr(attr_RandomizedSearchCV_best_index_, 'tolist') else attr_RandomizedSearchCV_best_index_`\n    })()\n  }\n\n  /**\n    Scorer function used on the held out data to choose the best parameters for the model.\n\n    For multi-metric evaluation, this attribute holds the validated scoring dict which maps the scorer key to the scorer callable.\n   */\n  get scorer_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing scorer_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_scorer_ = bridgeRandomizedSearchCV[${this.id}].scorer_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_scorer_.tolist() if hasattr(attr_RandomizedSearchCV_scorer_, 'tolist') else attr_RandomizedSearchCV_scorer_`\n    })()\n  }\n\n  /**\n    The number of cross-validation splits (folds/iterations).\n   */\n  get n_splits_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing n_splits_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_n_splits_ = bridgeRandomizedSearchCV[${this.id}].n_splits_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_n_splits_.tolist() if hasattr(attr_RandomizedSearchCV_n_splits_, 'tolist') else attr_RandomizedSearchCV_n_splits_`\n    })()\n  }\n\n  /**\n    Seconds used for refitting the best model on the whole dataset.\n\n    This is present only if refit is not False.\n   */\n  get refit_time_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing refit_time_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_refit_time_ = bridgeRandomizedSearchCV[${this.id}].refit_time_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_refit_time_.tolist() if hasattr(attr_RandomizedSearchCV_refit_time_, 'tolist') else attr_RandomizedSearchCV_refit_time_`\n    })()\n  }\n\n  /**\n    Whether or not the scorers compute several metrics.\n   */\n  get multimetric_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing multimetric_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_multimetric_ = bridgeRandomizedSearchCV[${this.id}].multimetric_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_multimetric_.tolist() if hasattr(attr_RandomizedSearchCV_multimetric_, 'tolist') else attr_RandomizedSearchCV_multimetric_`\n    })()\n  }\n\n  /**\n    Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RandomizedSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RandomizedSearchCV must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RandomizedSearchCV_feature_names_in_ = bridgeRandomizedSearchCV[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RandomizedSearchCV_feature_names_in_.tolist() if hasattr(attr_RandomizedSearchCV_feature_names_in_, 'tolist') else attr_RandomizedSearchCV_feature_names_in_`\n    })()\n  }\n}\n\nexport interface RandomizedSearchCVOptions {\n  /**\n    An object of that type is instantiated for each grid point. This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.\n   */\n  estimator?: any\n\n  /**\n    Dictionary with parameters names (str) as keys and distributions or lists of parameters to try. Distributions must provide a rvs method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly. If a list of dicts is given, first a dict is sampled uniformly, and then a parameter is sampled using that dict as above.\n   */\n  param_distributions?: any\n\n  /**\n    Number of parameter settings that are sampled. n_iter trades off runtime vs quality of the solution.\n\n    @defaultValue `10`\n   */\n  n_iter?: number\n\n  /**\n    Strategy to evaluate the performance of the cross-validated model on the test set.\n\n    If scoring represents a single score, one can use:\n   */\n  scoring?: string | any[] | any\n\n  /**\n    Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    Refit an estimator using the best found parameters on the whole dataset.\n\n    For multiple metric evaluation, this needs to be a str denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.\n\n    Where there are considerations other than maximum score in choosing a best estimator, refit can be set to a function which returns the selected best_index_ given the cv_results. In that case, the best_estimator_ and best_params_ will be set according to the returned best_index_ while the best_score_ attribute will not be available.\n\n    The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this RandomizedSearchCV instance.\n\n    Also for multiple metric evaluation, the attributes best_index_, best_score_ and best_params_ will only be available if refit is set and all of them will be determined w.r.t this specific scorer.\n\n    See scoring parameter to know more about multiple metric evaluation.\n\n    @defaultValue `true`\n   */\n  refit?: boolean\n\n  /**\n    Determines the cross-validation splitting strategy. Possible inputs for cv are:\n   */\n  cv?: number\n\n  /**\n    Controls the verbosity: the higher, the more messages.\n   */\n  verbose?: number\n\n  /**\n    Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:\n\n    @defaultValue `'2*n_jobs'`\n   */\n  pre_dispatch?: string\n\n  /**\n    Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n\n  /**\n    Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error.\n   */\n  error_score?: 'raise'\n\n  /**\n    If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.\n\n    @defaultValue `false`\n   */\n  return_train_score?: boolean\n}\n\nexport interface RandomizedSearchCVDecisionFunctionOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface RandomizedSearchCVFitOptions {\n  /**\n    Training vector, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike[]\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).\n   */\n  groups?: ArrayLike\n\n  /**\n    Parameters passed to the fit method of the estimator.\n\n    If a fit parameter is an array-like whose length is equal to num_samples then it will be split across CV groups along with X and y. For example, the sample_weight parameter is split because len(sample_weights) = len(X).\n   */\n  fit_params?: any\n}\n\nexport interface RandomizedSearchCVInverseTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  Xt?: any\n}\n\nexport interface RandomizedSearchCVPredictOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface RandomizedSearchCVPredictLogProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface RandomizedSearchCVPredictProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface RandomizedSearchCVScoreOptions {\n  /**\n    Input data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike[]\n}\n\nexport interface RandomizedSearchCVScoreSamplesOptions {\n  /**\n    Data to predict on. Must fulfill input requirements of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface RandomizedSearchCVTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Randomized search on hyper parameters.\n\n  The search strategy starts evaluating all the candidates with a small amount of resources and iteratively selects the best candidates, using more and more resources.\n\n  The candidates are sampled at random from the parameter space and the number of sampled candidates is determined by n_candidates.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingRandomSearchCV.html\n */\nexport class HalvingRandomSearchCV {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: HalvingRandomSearchCVOptions) {\n    this.id = `HalvingRandomSearchCV${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'HalvingRandomSearchCV.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import HalvingRandomSearchCV\ntry: bridgeHalvingRandomSearchCV\nexcept NameError: bridgeHalvingRandomSearchCV = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_HalvingRandomSearchCV = {'estimator': ${\n      this.opts['estimator'] ?? undefined\n    }, 'param_distributions': ${\n      this.opts['param_distributions'] ?? undefined\n    }, 'n_candidates': ${this.opts['n_candidates'] ?? undefined}, 'factor': ${\n      this.opts['factor'] ?? undefined\n    }, 'resource': ${this.opts['resource'] ?? undefined}, 'max_resources': ${\n      this.opts['max_resources'] ?? undefined\n    }, 'min_resources': ${\n      this.opts['min_resources'] ?? undefined\n    }, 'aggressive_elimination': ${\n      this.opts['aggressive_elimination'] ?? undefined\n    }, 'cv': ${this.opts['cv'] ?? undefined}, 'scoring': ${\n      this.opts['scoring'] ?? undefined\n    }, 'refit': ${this.opts['refit'] ?? undefined}, 'error_score': ${\n      this.opts['error_score'] ?? undefined\n    }, 'return_train_score': ${\n      this.opts['return_train_score'] ?? undefined\n    }, 'random_state': ${this.opts['random_state'] ?? undefined}, 'n_jobs': ${\n      this.opts['n_jobs'] ?? undefined\n    }, 'verbose': ${this.opts['verbose'] ?? undefined}}\n\nctor_HalvingRandomSearchCV = {k: v for k, v in ctor_HalvingRandomSearchCV.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeHalvingRandomSearchCV[${this.id}] = HalvingRandomSearchCV(**ctor_HalvingRandomSearchCV)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeHalvingRandomSearchCV[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Call decision_function on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports decision_function.\n   */\n  async decision_function(\n    opts: HalvingRandomSearchCVDecisionFunctionOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_decision_function = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_decision_function = {k: v for k, v in pms_HalvingRandomSearchCV_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_decision_function = bridgeHalvingRandomSearchCV[${this.id}].decision_function(**pms_HalvingRandomSearchCV_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_decision_function.tolist() if hasattr(res_HalvingRandomSearchCV_decision_function, 'tolist') else res_HalvingRandomSearchCV_decision_function`\n  }\n\n  /**\n    Run fit with all sets of parameters.\n   */\n  async fit(opts: HalvingRandomSearchCVFitOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingRandomSearchCV must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_fit = {'X': ${\n      opts['X'] ?? undefined\n    }, 'y': ${opts['y'] ?? undefined}, 'groups': np.array(${\n      opts['groups'] ?? undefined\n    }) if ${opts['groups'] !== undefined} else None, 'fit_params': ${\n      opts['fit_params'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_fit = {k: v for k, v in pms_HalvingRandomSearchCV_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_fit = bridgeHalvingRandomSearchCV[${this.id}].fit(**pms_HalvingRandomSearchCV_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_fit.tolist() if hasattr(res_HalvingRandomSearchCV_fit, 'tolist') else res_HalvingRandomSearchCV_fit`\n  }\n\n  /**\n    Call inverse_transform on the estimator with the best found params.\n\n    Only available if the underlying estimator implements inverse_transform and refit=True.\n   */\n  async inverse_transform(\n    opts: HalvingRandomSearchCVInverseTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_inverse_transform = {'Xt': ${\n      opts['Xt'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_inverse_transform = {k: v for k, v in pms_HalvingRandomSearchCV_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_inverse_transform = bridgeHalvingRandomSearchCV[${this.id}].inverse_transform(**pms_HalvingRandomSearchCV_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_inverse_transform.tolist() if hasattr(res_HalvingRandomSearchCV_inverse_transform, 'tolist') else res_HalvingRandomSearchCV_inverse_transform`\n  }\n\n  /**\n    Call predict on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict.\n   */\n  async predict(opts: HalvingRandomSearchCVPredictOptions): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingRandomSearchCV must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_predict = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_predict = {k: v for k, v in pms_HalvingRandomSearchCV_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_predict = bridgeHalvingRandomSearchCV[${this.id}].predict(**pms_HalvingRandomSearchCV_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_predict.tolist() if hasattr(res_HalvingRandomSearchCV_predict, 'tolist') else res_HalvingRandomSearchCV_predict`\n  }\n\n  /**\n    Call predict_log_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_log_proba.\n   */\n  async predict_log_proba(\n    opts: HalvingRandomSearchCVPredictLogProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_predict_log_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_predict_log_proba = {k: v for k, v in pms_HalvingRandomSearchCV_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_predict_log_proba = bridgeHalvingRandomSearchCV[${this.id}].predict_log_proba(**pms_HalvingRandomSearchCV_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_predict_log_proba.tolist() if hasattr(res_HalvingRandomSearchCV_predict_log_proba, 'tolist') else res_HalvingRandomSearchCV_predict_log_proba`\n  }\n\n  /**\n    Call predict_proba on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports predict_proba.\n   */\n  async predict_proba(\n    opts: HalvingRandomSearchCVPredictProbaOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before predict_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_predict_proba = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_predict_proba = {k: v for k, v in pms_HalvingRandomSearchCV_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_predict_proba = bridgeHalvingRandomSearchCV[${this.id}].predict_proba(**pms_HalvingRandomSearchCV_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_predict_proba.tolist() if hasattr(res_HalvingRandomSearchCV_predict_proba, 'tolist') else res_HalvingRandomSearchCV_predict_proba`\n  }\n\n  /**\n    Return the score on the given data, if the estimator has been refit.\n\n    This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.\n   */\n  async score(opts: HalvingRandomSearchCVScoreOptions): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HalvingRandomSearchCV must call init() before score()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_score = {'X': np.array(${\n      opts['X'] ?? undefined\n    }) if ${opts['X'] !== undefined} else None, 'y': np.array(${\n      opts['y'] ?? undefined\n    }) if ${opts['y'] !== undefined} else None}\n\npms_HalvingRandomSearchCV_score = {k: v for k, v in pms_HalvingRandomSearchCV_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_score = bridgeHalvingRandomSearchCV[${this.id}].score(**pms_HalvingRandomSearchCV_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_score.tolist() if hasattr(res_HalvingRandomSearchCV_score, 'tolist') else res_HalvingRandomSearchCV_score`\n  }\n\n  /**\n    Call score_samples on the estimator with the best found parameters.\n\n    Only available if refit=True and the underlying estimator supports score_samples.\n   */\n  async score_samples(\n    opts: HalvingRandomSearchCVScoreSamplesOptions\n  ): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before score_samples()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_score_samples = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_score_samples = {k: v for k, v in pms_HalvingRandomSearchCV_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_score_samples = bridgeHalvingRandomSearchCV[${this.id}].score_samples(**pms_HalvingRandomSearchCV_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_score_samples.tolist() if hasattr(res_HalvingRandomSearchCV_score_samples, 'tolist') else res_HalvingRandomSearchCV_score_samples`\n  }\n\n  /**\n    Call transform on the estimator with the best found parameters.\n\n    Only available if the underlying estimator supports transform and refit=True.\n   */\n  async transform(\n    opts: HalvingRandomSearchCVTransformOptions\n  ): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before transform()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HalvingRandomSearchCV_transform = {'X': ${\n      opts['X'] ?? undefined\n    }}\n\npms_HalvingRandomSearchCV_transform = {k: v for k, v in pms_HalvingRandomSearchCV_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HalvingRandomSearchCV_transform = bridgeHalvingRandomSearchCV[${this.id}].transform(**pms_HalvingRandomSearchCV_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HalvingRandomSearchCV_transform.tolist() if hasattr(res_HalvingRandomSearchCV_transform, 'tolist') else res_HalvingRandomSearchCV_transform`\n  }\n\n  /**\n    The amount of resources used at each iteration.\n   */\n  get n_resources_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_resources_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_resources_ = bridgeHalvingRandomSearchCV[${this.id}].n_resources_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_resources_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_resources_, 'tolist') else attr_HalvingRandomSearchCV_n_resources_`\n    })()\n  }\n\n  /**\n    The number of candidate parameters that were evaluated at each iteration.\n   */\n  get n_candidates_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_candidates_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_candidates_ = bridgeHalvingRandomSearchCV[${this.id}].n_candidates_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_candidates_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_candidates_, 'tolist') else attr_HalvingRandomSearchCV_n_candidates_`\n    })()\n  }\n\n  /**\n    The number of candidate parameters that are left after the last iteration. It corresponds to ceil(n_candidates[-1] / factor)\n   */\n  get n_remaining_candidates_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_remaining_candidates_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_remaining_candidates_ = bridgeHalvingRandomSearchCV[${this.id}].n_remaining_candidates_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_remaining_candidates_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_remaining_candidates_, 'tolist') else attr_HalvingRandomSearchCV_n_remaining_candidates_`\n    })()\n  }\n\n  /**\n    The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of min_resources_, the actual number of resources used at the last iteration may be smaller than max_resources_.\n   */\n  get max_resources_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing max_resources_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_max_resources_ = bridgeHalvingRandomSearchCV[${this.id}].max_resources_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_max_resources_.tolist() if hasattr(attr_HalvingRandomSearchCV_max_resources_, 'tolist') else attr_HalvingRandomSearchCV_max_resources_`\n    })()\n  }\n\n  /**\n    The amount of resources that are allocated for each candidate at the first iteration.\n   */\n  get min_resources_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing min_resources_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_min_resources_ = bridgeHalvingRandomSearchCV[${this.id}].min_resources_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_min_resources_.tolist() if hasattr(attr_HalvingRandomSearchCV_min_resources_, 'tolist') else attr_HalvingRandomSearchCV_min_resources_`\n    })()\n  }\n\n  /**\n    The actual number of iterations that were run. This is equal to n_required_iterations_ if aggressive_elimination is True. Else, this is equal to min(n_possible_iterations_, n_required_iterations_).\n   */\n  get n_iterations_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_iterations_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_iterations_ = bridgeHalvingRandomSearchCV[${this.id}].n_iterations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_iterations_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_iterations_, 'tolist') else attr_HalvingRandomSearchCV_n_iterations_`\n    })()\n  }\n\n  /**\n    The number of iterations that are possible starting with min_resources_ resources and without exceeding max_resources_.\n   */\n  get n_possible_iterations_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_possible_iterations_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_possible_iterations_ = bridgeHalvingRandomSearchCV[${this.id}].n_possible_iterations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_possible_iterations_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_possible_iterations_, 'tolist') else attr_HalvingRandomSearchCV_n_possible_iterations_`\n    })()\n  }\n\n  /**\n    The number of iterations that are required to end up with less than factor candidates at the last iteration, starting with min_resources_ resources. This will be smaller than n_possible_iterations_ when there isn’t enough resources.\n   */\n  get n_required_iterations_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_required_iterations_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_required_iterations_ = bridgeHalvingRandomSearchCV[${this.id}].n_required_iterations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_required_iterations_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_required_iterations_, 'tolist') else attr_HalvingRandomSearchCV_n_required_iterations_`\n    })()\n  }\n\n  /**\n    A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame. It contains lots of information for analysing the results of a search. Please refer to the User guide for details.\n   */\n  get cv_results_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing cv_results_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_cv_results_ = bridgeHalvingRandomSearchCV[${this.id}].cv_results_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_cv_results_.tolist() if hasattr(attr_HalvingRandomSearchCV_cv_results_, 'tolist') else attr_HalvingRandomSearchCV_cv_results_`\n    })()\n  }\n\n  /**\n    Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.\n   */\n  get best_estimator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing best_estimator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_best_estimator_ = bridgeHalvingRandomSearchCV[${this.id}].best_estimator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_best_estimator_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_estimator_, 'tolist') else attr_HalvingRandomSearchCV_best_estimator_`\n    })()\n  }\n\n  /**\n    Mean cross-validated score of the best_estimator.\n   */\n  get best_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing best_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_best_score_ = bridgeHalvingRandomSearchCV[${this.id}].best_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_best_score_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_score_, 'tolist') else attr_HalvingRandomSearchCV_best_score_`\n    })()\n  }\n\n  /**\n    Parameter setting that gave the best results on the hold out data.\n   */\n  get best_params_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing best_params_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_best_params_ = bridgeHalvingRandomSearchCV[${this.id}].best_params_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_best_params_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_params_, 'tolist') else attr_HalvingRandomSearchCV_best_params_`\n    })()\n  }\n\n  /**\n    The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.\n\n    The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).\n   */\n  get best_index_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing best_index_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_best_index_ = bridgeHalvingRandomSearchCV[${this.id}].best_index_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_best_index_.tolist() if hasattr(attr_HalvingRandomSearchCV_best_index_, 'tolist') else attr_HalvingRandomSearchCV_best_index_`\n    })()\n  }\n\n  /**\n    Scorer function used on the held out data to choose the best parameters for the model.\n   */\n  get scorer_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing scorer_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_scorer_ = bridgeHalvingRandomSearchCV[${this.id}].scorer_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_scorer_.tolist() if hasattr(attr_HalvingRandomSearchCV_scorer_, 'tolist') else attr_HalvingRandomSearchCV_scorer_`\n    })()\n  }\n\n  /**\n    The number of cross-validation splits (folds/iterations).\n   */\n  get n_splits_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing n_splits_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_n_splits_ = bridgeHalvingRandomSearchCV[${this.id}].n_splits_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_n_splits_.tolist() if hasattr(attr_HalvingRandomSearchCV_n_splits_, 'tolist') else attr_HalvingRandomSearchCV_n_splits_`\n    })()\n  }\n\n  /**\n    Seconds used for refitting the best model on the whole dataset.\n\n    This is present only if refit is not False.\n   */\n  get refit_time_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing refit_time_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_refit_time_ = bridgeHalvingRandomSearchCV[${this.id}].refit_time_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_refit_time_.tolist() if hasattr(attr_HalvingRandomSearchCV_refit_time_, 'tolist') else attr_HalvingRandomSearchCV_refit_time_`\n    })()\n  }\n\n  /**\n    Whether or not the scorers compute several metrics.\n   */\n  get multimetric_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing multimetric_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_multimetric_ = bridgeHalvingRandomSearchCV[${this.id}].multimetric_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_multimetric_.tolist() if hasattr(attr_HalvingRandomSearchCV_multimetric_, 'tolist') else attr_HalvingRandomSearchCV_multimetric_`\n    })()\n  }\n\n  /**\n    Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HalvingRandomSearchCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HalvingRandomSearchCV must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_HalvingRandomSearchCV_feature_names_in_ = bridgeHalvingRandomSearchCV[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_HalvingRandomSearchCV_feature_names_in_.tolist() if hasattr(attr_HalvingRandomSearchCV_feature_names_in_, 'tolist') else attr_HalvingRandomSearchCV_feature_names_in_`\n    })()\n  }\n}\n\nexport interface HalvingRandomSearchCVOptions {\n  /**\n    This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.\n   */\n  estimator?: any\n\n  /**\n    Dictionary with parameters names (string) as keys and distributions or lists of parameters to try. Distributions must provide a rvs method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly.\n   */\n  param_distributions?: any\n\n  /**\n    The number of candidate parameters to sample, at the first iteration. Using ‘exhaust’ will sample enough candidates so that the last iteration uses as many resources as possible, based on min_resources, max_resources and factor. In this case, min_resources cannot be ‘exhaust’.\n\n    @defaultValue `'exhaust'`\n   */\n  n_candidates?: number\n\n  /**\n    The ‘halving’ parameter, which determines the proportion of candidates that are selected for each subsequent iteration. For example, factor=3 means that only one third of the candidates are selected.\n\n    @defaultValue `3`\n   */\n  factor?: number\n\n  /**\n    Defines the resource that increases with each iteration. By default, the resource is the number of samples. It can also be set to any parameter of the base estimator that accepts positive integer values, e.g. ‘n_iterations’ or ‘n_estimators’ for a gradient boosting estimator. In this case max_resources cannot be ‘auto’ and must be set explicitly.\n\n    @defaultValue `'n_samples'`\n   */\n  resource?: 'n_samples' | string\n\n  /**\n    The maximum number of resources that any candidate is allowed to use for a given iteration. By default, this is set n_samples when resource='n_samples' (default), else an error is raised.\n\n    @defaultValue `'auto'`\n   */\n  max_resources?: number\n\n  /**\n    The minimum amount of resource that any candidate is allowed to use for a given iteration. Equivalently, this defines the amount of resources r0 that are allocated for each candidate at the first iteration.\n\n    @defaultValue `'smallest'`\n   */\n  min_resources?: 'exhaust' | 'smallest' | number\n\n  /**\n    This is only relevant in cases where there isn’t enough resources to reduce the remaining candidates to at most factor after the last iteration. If True, then the search process will ‘replay’ the first iteration for as long as needed until the number of candidates is small enough. This is False by default, which means that the last iteration may evaluate more than factor candidates. See Aggressive elimination of candidates for more details.\n\n    @defaultValue `false`\n   */\n  aggressive_elimination?: boolean\n\n  /**\n    Determines the cross-validation splitting strategy. Possible inputs for cv are:\n\n    @defaultValue `5`\n   */\n  cv?: number\n\n  /**\n    A single string (see The scoring parameter: defining model evaluation rules) or a callable (see Defining your scoring strategy from metric functions) to evaluate the predictions on the test set. If None, the estimator’s score method is used.\n   */\n  scoring?: string\n\n  /**\n    If True, refit an estimator using the best found parameters on the whole dataset.\n\n    The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this HalvingRandomSearchCV instance.\n\n    @defaultValue `true`\n   */\n  refit?: boolean\n\n  /**\n    Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is np.nan.\n   */\n  error_score?: 'raise'\n\n  /**\n    If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.\n\n    @defaultValue `false`\n   */\n  return_train_score?: boolean\n\n  /**\n    Pseudo random number generator state used for subsampling the dataset when resources != 'n_samples'. Also used for random uniform sampling from lists of possible values instead of scipy.stats distributions. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n\n  /**\n    Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    Controls the verbosity: the higher, the more messages.\n   */\n  verbose?: number\n}\n\nexport interface HalvingRandomSearchCVDecisionFunctionOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingRandomSearchCVFitOptions {\n  /**\n    Training vector, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).\n   */\n  groups?: ArrayLike\n\n  /**\n    Parameters passed to the fit method of the estimator.\n   */\n  fit_params?: any\n}\n\nexport interface HalvingRandomSearchCVInverseTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  Xt?: any\n}\n\nexport interface HalvingRandomSearchCVPredictOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingRandomSearchCVPredictLogProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingRandomSearchCVPredictProbaOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingRandomSearchCVScoreOptions {\n  /**\n    Input data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike[]\n}\n\nexport interface HalvingRandomSearchCVScoreSamplesOptions {\n  /**\n    Data to predict on. Must fulfill input requirements of the underlying estimator.\n   */\n  X?: any\n}\n\nexport interface HalvingRandomSearchCVTransformOptions {\n  /**\n    Must fulfill the input assumptions of the underlying estimator.\n   */\n  X?: any\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Learning Curve visualization.\n\n  It is recommended to use from_estimator to create a LearningCurveDisplay instance. All parameters are stored as attributes.\n\n  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LearningCurveDisplay.html\n */\nexport class LearningCurveDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: LearningCurveDisplayOptions) {\n    this.id = `LearningCurveDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'LearningCurveDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import LearningCurveDisplay\ntry: bridgeLearningCurveDisplay\nexcept NameError: bridgeLearningCurveDisplay = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_LearningCurveDisplay = {'train_sizes': np.array(${\n      this.opts['train_sizes'] ?? undefined\n    }) if ${\n      this.opts['train_sizes'] !== undefined\n    } else None, 'train_scores': np.array(${\n      this.opts['train_scores'] ?? undefined\n    }) if ${\n      this.opts['train_scores'] !== undefined\n    } else None, 'test_scores': np.array(${\n      this.opts['test_scores'] ?? undefined\n    }) if ${this.opts['test_scores'] !== undefined} else None, 'score_name': ${\n      this.opts['score_name'] ?? undefined\n    }}\n\nctor_LearningCurveDisplay = {k: v for k, v in ctor_LearningCurveDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeLearningCurveDisplay[${this.id}] = LearningCurveDisplay(**ctor_LearningCurveDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLearningCurveDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Create a learning curve display from an estimator.\n   */\n  async from_estimator(\n    opts: LearningCurveDisplayFromEstimatorOptions\n  ): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LearningCurveDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_LearningCurveDisplay_from_estimator = {'estimator': ${\n      opts['estimator'] ?? undefined\n    }, 'X': np.array(${opts['X'] ?? undefined}) if ${\n      opts['X'] !== undefined\n    } else None, 'y': np.array(${opts['y'] ?? undefined}) if ${\n      opts['y'] !== undefined\n    } else None, 'groups': np.array(${opts['groups'] ?? undefined}) if ${\n      opts['groups'] !== undefined\n    } else None, 'train_sizes': np.array(${\n      opts['train_sizes'] ?? undefined\n    }) if ${opts['train_sizes'] !== undefined} else None, 'cv': ${\n      opts['cv'] ?? undefined\n    }, 'scoring': ${\n      opts['scoring'] ?? undefined\n    }, 'exploit_incremental_learning': ${\n      opts['exploit_incremental_learning'] ?? undefined\n    }, 'n_jobs': ${opts['n_jobs'] ?? undefined}, 'pre_dispatch': ${\n      opts['pre_dispatch'] ?? undefined\n    }, 'verbose': ${opts['verbose'] ?? undefined}, 'shuffle': ${\n      opts['shuffle'] ?? undefined\n    }, 'random_state': ${opts['random_state'] ?? undefined}, 'error_score': ${\n      opts['error_score'] ?? undefined\n    }, 'fit_params': ${opts['fit_params'] ?? undefined}, 'ax': ${\n      opts['ax'] ?? undefined\n    }, 'negate_score': ${opts['negate_score'] ?? undefined}, 'score_name': ${\n      opts['score_name'] ?? undefined\n    }, 'score_type': ${opts['score_type'] ?? undefined}, 'log_scale': ${\n      opts['log_scale'] ?? undefined\n    }, 'std_display_style': ${\n      opts['std_display_style'] ?? undefined\n    }, 'line_kw': ${opts['line_kw'] ?? undefined}, 'fill_between_kw': ${\n      opts['fill_between_kw'] ?? undefined\n    }, 'errorbar_kw': ${opts['errorbar_kw'] ?? undefined}}\n\npms_LearningCurveDisplay_from_estimator = {k: v for k, v in pms_LearningCurveDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LearningCurveDisplay_from_estimator = bridgeLearningCurveDisplay[${this.id}].from_estimator(**pms_LearningCurveDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LearningCurveDisplay_from_estimator.tolist() if hasattr(res_LearningCurveDisplay_from_estimator, 'tolist') else res_LearningCurveDisplay_from_estimator`\n  }\n\n  /**\n    Plot visualization.\n   */\n  async plot(opts: LearningCurveDisplayPlotOptions): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LearningCurveDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LearningCurveDisplay_plot = {'ax': ${\n      opts['ax'] ?? undefined\n    }, 'negate_score': ${opts['negate_score'] ?? undefined}, 'score_name': ${\n      opts['score_name'] ?? undefined\n    }, 'score_type': ${opts['score_type'] ?? undefined}, 'log_scale': ${\n      opts['log_scale'] ?? undefined\n    }, 'std_display_style': ${\n      opts['std_display_style'] ?? undefined\n    }, 'line_kw': ${opts['line_kw'] ?? undefined}, 'fill_between_kw': ${\n      opts['fill_between_kw'] ?? undefined\n    }, 'errorbar_kw': ${opts['errorbar_kw'] ?? undefined}}\n\npms_LearningCurveDisplay_plot = {k: v for k, v in pms_LearningCurveDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LearningCurveDisplay_plot = bridgeLearningCurveDisplay[${this.id}].plot(**pms_LearningCurveDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LearningCurveDisplay_plot.tolist() if hasattr(res_LearningCurveDisplay_plot, 'tolist') else res_LearningCurveDisplay_plot`\n  }\n\n  /**\n    Axes with the learning curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LearningCurveDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LearningCurveDisplay_ax_ = bridgeLearningCurveDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LearningCurveDisplay_ax_.tolist() if hasattr(attr_LearningCurveDisplay_ax_, 'tolist') else attr_LearningCurveDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the learning curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LearningCurveDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LearningCurveDisplay_figure_ = bridgeLearningCurveDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LearningCurveDisplay_figure_.tolist() if hasattr(attr_LearningCurveDisplay_figure_, 'tolist') else attr_LearningCurveDisplay_figure_`\n    })()\n  }\n\n  /**\n    When the std_display_style is \"errorbar\", this is a list of matplotlib.container.ErrorbarContainer objects. If another style is used, errorbar_ is None.\n   */\n  get errorbar_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LearningCurveDisplay must call init() before accessing errorbar_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LearningCurveDisplay_errorbar_ = bridgeLearningCurveDisplay[${this.id}].errorbar_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LearningCurveDisplay_errorbar_.tolist() if hasattr(attr_LearningCurveDisplay_errorbar_, 'tolist') else attr_LearningCurveDisplay_errorbar_`\n    })()\n  }\n\n  /**\n    When the std_display_style is \"fill_between\", this is a list of matplotlib.lines.Line2D objects corresponding to the mean train and test scores. If another style is used, line_ is None.\n   */\n  get lines_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LearningCurveDisplay must call init() before accessing lines_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LearningCurveDisplay_lines_ = bridgeLearningCurveDisplay[${this.id}].lines_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LearningCurveDisplay_lines_.tolist() if hasattr(attr_LearningCurveDisplay_lines_, 'tolist') else attr_LearningCurveDisplay_lines_`\n    })()\n  }\n\n  /**\n    When the std_display_style is \"fill_between\", this is a list of matplotlib.collections.PolyCollection objects. If another style is used, fill_between_ is None.\n   */\n  get fill_between_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This LearningCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LearningCurveDisplay must call init() before accessing fill_between_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LearningCurveDisplay_fill_between_ = bridgeLearningCurveDisplay[${this.id}].fill_between_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LearningCurveDisplay_fill_between_.tolist() if hasattr(attr_LearningCurveDisplay_fill_between_, 'tolist') else attr_LearningCurveDisplay_fill_between_`\n    })()\n  }\n}\n\nexport interface LearningCurveDisplayOptions {\n  /**\n    Numbers of training examples that has been used to generate the learning curve.\n   */\n  train_sizes?: NDArray\n\n  /**\n    Scores on training sets.\n   */\n  train_scores?: NDArray[]\n\n  /**\n    Scores on test set.\n   */\n  test_scores?: NDArray[]\n\n  /**\n    The name of the score used in learning_curve. It will be used to decorate the y-axis. If None, the generic name \"Score\" will be used.\n   */\n  score_name?: string\n}\n\nexport interface LearningCurveDisplayFromEstimatorOptions {\n  /**\n    An object of that type which is cloned for each validation.\n   */\n  estimator?: any\n\n  /**\n    Training data, where n_samples is the number of samples and n_features is the number of features.\n   */\n  X?: ArrayLike[]\n\n  /**\n    Target relative to X for classification or regression; None for unsupervised learning.\n   */\n  y?: ArrayLike\n\n  /**\n    Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).\n   */\n  groups?: ArrayLike\n\n  /**\n    Relative or absolute numbers of training examples that will be used to generate the learning curve. If the dtype is float, it is regarded as a fraction of the maximum size of the training set (that is determined by the selected validation method), i.e. it has to be within (0, 1]. Otherwise it is interpreted as absolute sizes of the training sets. Note that for classification the number of samples usually have to be big enough to contain at least one sample from each class.\n   */\n  train_sizes?: ArrayLike\n\n  /**\n    Determines the cross-validation splitting strategy. Possible inputs for cv are:\n   */\n  cv?: number\n\n  /**\n    A string (see The scoring parameter: defining model evaluation rules) or a scorer callable object / function with signature scorer(estimator, X, y) (see Defining your scoring strategy from metric functions).\n   */\n  scoring?: string\n\n  /**\n    If the estimator supports incremental learning, this will be used to speed up fitting for different training set sizes.\n\n    @defaultValue `false`\n   */\n  exploit_incremental_learning?: boolean\n\n  /**\n    Number of jobs to run in parallel. Training the estimator and computing the score are parallelized over the different training and test sets. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.\n   */\n  n_jobs?: number\n\n  /**\n    Number of predispatched jobs for parallel execution (default is all). The option can reduce the allocated memory. The str can be an expression like ‘2*n_jobs’.\n\n    @defaultValue `'all'`\n   */\n  pre_dispatch?: number | string\n\n  /**\n    Controls the verbosity: the higher, the more messages.\n\n    @defaultValue `0`\n   */\n  verbose?: number\n\n  /**\n    Whether to shuffle training data before taking prefixes of it based on`train_sizes`.\n\n    @defaultValue `false`\n   */\n  shuffle?: boolean\n\n  /**\n    Used when shuffle is True. Pass an int for reproducible output across multiple function calls. See Glossary.\n   */\n  random_state?: number\n\n  /**\n    Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised.\n   */\n  error_score?: 'raise'\n\n  /**\n    Parameters to pass to the fit method of the estimator.\n   */\n  fit_params?: any\n\n  /**\n    Axes object to plot on. If None, a new figure and axes is created.\n   */\n  ax?: any\n\n  /**\n    Whether or not to negate the scores obtained through learning_curve. This is particularly useful when using the error denoted by neg_* in scikit-learn.\n\n    @defaultValue `false`\n   */\n  negate_score?: boolean\n\n  /**\n    The name of the score used to decorate the y-axis of the plot. If None, the generic \"Score\" name will be used.\n   */\n  score_name?: string\n\n  /**\n    The type of score to plot. Can be one of \"test\", \"train\", or \"both\".\n\n    @defaultValue `'test'`\n   */\n  score_type?: 'test' | 'train' | 'both'\n\n  /**\n    Whether or not to use a logarithmic scale for the x-axis.\n\n    @defaultValue `false`\n   */\n  log_scale?: boolean\n\n  /**\n    The style used to display the score standard deviation around the mean score. If None, no representation of the standard deviation is displayed.\n\n    @defaultValue `'fill_between'`\n   */\n  std_display_style?: 'errorbar' | 'fill_between'\n\n  /**\n    Additional keyword arguments passed to the plt.plot used to draw the mean score.\n   */\n  line_kw?: any\n\n  /**\n    Additional keyword arguments passed to the plt.fill_between used to draw the score standard deviation.\n   */\n  fill_between_kw?: any\n\n  /**\n    Additional keyword arguments passed to the plt.errorbar used to draw mean score and standard deviation score.\n   */\n  errorbar_kw?: any\n}\n\nexport interface LearningCurveDisplayPlotOptions {\n  /**\n    Axes object to plot on. If None, a new figure and axes is created.\n   */\n  ax?: any\n\n  /**\n    Whether or not to negate the scores obtained through learning_curve. This is particularly useful when using the error denoted by neg_* in scikit-learn.\n\n    @defaultValue `false`\n   */\n  negate_score?: boolean\n\n  /**\n    The name of the score used to decorate the y-axis of the plot. If None, the generic name “Score” will be used.\n   */\n  score_name?: string\n\n  /**\n    The type of score to plot. Can be one of \"test\", \"train\", or \"both\".\n\n    @defaultValue `'test'`\n   */\n  score_type?: 'test' | 'train' | 'both'\n\n  /**\n    Whether or not to use a logarithmic scale for the x-axis.\n\n    @defaultValue `false`\n   */\n  log_scale?: boolean\n\n  /**\n    The style used to display the score standard deviation around the mean score. If None, no standard deviation representation is displayed.\n\n    @defaultValue `'fill_between'`\n   */\n  std_display_style?: 'errorbar' | 'fill_between'\n\n  /**\n    Additional keyword arguments passed to the plt.plot used to draw the mean score.\n   */\n  line_kw?: any\n\n  /**\n    Additional keyword arguments passed to the plt.fill_between used to draw the score standard deviation.\n   */\n  fill_between_kw?: any\n\n  /**\n    Additional keyword arguments passed to the plt.errorbar used to draw mean score and standard deviation score.\n   */\n  errorbar_kw?: any\n}\n"],"mappings":"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","names":["crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto"]}