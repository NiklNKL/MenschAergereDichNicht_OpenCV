import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Repeated Stratified K-Fold cross validator.

  Repeats Stratified K-Fold n times with different randomization in each repetition.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.html
 */
export declare class RepeatedStratifiedKFold {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: RepeatedStratifiedKFoldOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Returns the number of splitting iterations in the cross-validator
     */
    get_n_splits(opts: RepeatedStratifiedKFoldGetNSplitsOptions): Promise<number>;
    /**
      Generates indices to split data into training and test set.
     */
    split(opts: RepeatedStratifiedKFoldSplitOptions): Promise<NDArray>;
}
export interface RepeatedStratifiedKFoldOptions {
    /**
      Number of folds. Must be at least 2.
  
      @defaultValue `5`
     */
    n_splits?: number;
    /**
      Number of times cross-validator needs to be repeated.
  
      @defaultValue `10`
     */
    n_repeats?: number;
    /**
      Controls the generation of the random states for each repetition. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
}
export interface RepeatedStratifiedKFoldGetNSplitsOptions {
    /**
      Always ignored, exists for compatibility. np.zeros(n_samples) may be used as a placeholder.
     */
    X?: any;
    /**
      Always ignored, exists for compatibility. np.zeros(n_samples) may be used as a placeholder.
     */
    y?: any;
    /**
      Group labels for the samples used while splitting the dataset into train/test set.
     */
    groups?: ArrayLike;
}
export interface RepeatedStratifiedKFoldSplitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      The target variable for supervised learning problems.
     */
    y?: ArrayLike;
    /**
      Group labels for the samples used while splitting the dataset into train/test set.
     */
    groups?: ArrayLike;
}
//# sourceMappingURL=RepeatedStratifiedKFold.d.ts.map