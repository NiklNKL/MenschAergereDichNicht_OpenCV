import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Search over specified parameter values with successive halving.

  The search strategy starts evaluating all the candidates with a small amount of resources and iteratively selects the best candidates, using more and more resources.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingGridSearchCV.html
 */
export declare class HalvingGridSearchCV {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: HalvingGridSearchCVOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Call decision_function on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports decision_function.
     */
    decision_function(opts: HalvingGridSearchCVDecisionFunctionOptions): Promise<NDArray>;
    /**
      Run fit with all sets of parameters.
     */
    fit(opts: HalvingGridSearchCVFitOptions): Promise<any>;
    /**
      Call inverse_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements inverse_transform and refit=True.
     */
    inverse_transform(opts: HalvingGridSearchCVInverseTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Call predict on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict.
     */
    predict(opts: HalvingGridSearchCVPredictOptions): Promise<NDArray>;
    /**
      Call predict_log_proba on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict_log_proba.
     */
    predict_log_proba(opts: HalvingGridSearchCVPredictLogProbaOptions): Promise<NDArray>;
    /**
      Call predict_proba on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict_proba.
     */
    predict_proba(opts: HalvingGridSearchCVPredictProbaOptions): Promise<NDArray>;
    /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.
     */
    score(opts: HalvingGridSearchCVScoreOptions): Promise<number>;
    /**
      Call score_samples on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports score_samples.
     */
    score_samples(opts: HalvingGridSearchCVScoreSamplesOptions): Promise<NDArray>;
    /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports transform and refit=True.
     */
    transform(opts: HalvingGridSearchCVTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      The amount of resources used at each iteration.
     */
    get n_resources_(): Promise<any>;
    /**
      The number of candidate parameters that were evaluated at each iteration.
     */
    get n_candidates_(): Promise<any>;
    /**
      The number of candidate parameters that are left after the last iteration. It corresponds to ceil(n_candidates[-1] / factor)
     */
    get n_remaining_candidates_(): Promise<number>;
    /**
      The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of min_resources_, the actual number of resources used at the last iteration may be smaller than max_resources_.
     */
    get max_resources_(): Promise<number>;
    /**
      The amount of resources that are allocated for each candidate at the first iteration.
     */
    get min_resources_(): Promise<number>;
    /**
      The actual number of iterations that were run. This is equal to n_required_iterations_ if aggressive_elimination is True. Else, this is equal to min(n_possible_iterations_, n_required_iterations_).
     */
    get n_iterations_(): Promise<number>;
    /**
      The number of iterations that are possible starting with min_resources_ resources and without exceeding max_resources_.
     */
    get n_possible_iterations_(): Promise<number>;
    /**
      The number of iterations that are required to end up with less than factor candidates at the last iteration, starting with min_resources_ resources. This will be smaller than n_possible_iterations_ when there isn’t enough resources.
     */
    get n_required_iterations_(): Promise<number>;
    /**
      A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame. It contains lots of information for analysing the results of a search. Please refer to the User guide for details.
     */
    get cv_results_(): Promise<any>;
    /**
      Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.
     */
    get best_estimator_(): Promise<any>;
    /**
      Mean cross-validated score of the best_estimator.
     */
    get best_score_(): Promise<number>;
    /**
      Parameter setting that gave the best results on the hold out data.
     */
    get best_params_(): Promise<any>;
    /**
      The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.
  
      The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).
     */
    get best_index_(): Promise<number>;
    /**
      Scorer function used on the held out data to choose the best parameters for the model.
     */
    get scorer_(): Promise<any>;
    /**
      The number of cross-validation splits (folds/iterations).
     */
    get n_splits_(): Promise<number>;
    /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if refit is not False.
     */
    get refit_time_(): Promise<number>;
    /**
      Whether or not the scorers compute several metrics.
     */
    get multimetric_(): Promise<boolean>;
    /**
      Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface HalvingGridSearchCVOptions {
    /**
      This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.
     */
    estimator?: any;
    /**
      Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.
     */
    param_grid?: any;
    /**
      The ‘halving’ parameter, which determines the proportion of candidates that are selected for each subsequent iteration. For example, factor=3 means that only one third of the candidates are selected.
  
      @defaultValue `3`
     */
    factor?: number;
    /**
      Defines the resource that increases with each iteration. By default, the resource is the number of samples. It can also be set to any parameter of the base estimator that accepts positive integer values, e.g. ‘n_iterations’ or ‘n_estimators’ for a gradient boosting estimator. In this case max_resources cannot be ‘auto’ and must be set explicitly.
  
      @defaultValue `'n_samples'`
     */
    resource?: 'n_samples' | string;
    /**
      The maximum amount of resource that any candidate is allowed to use for a given iteration. By default, this is set to n_samples when resource='n_samples' (default), else an error is raised.
  
      @defaultValue `'auto'`
     */
    max_resources?: number;
    /**
      The minimum amount of resource that any candidate is allowed to use for a given iteration. Equivalently, this defines the amount of resources r0 that are allocated for each candidate at the first iteration.
  
      @defaultValue `'exhaust'`
     */
    min_resources?: 'exhaust' | 'smallest' | number;
    /**
      This is only relevant in cases where there isn’t enough resources to reduce the remaining candidates to at most factor after the last iteration. If True, then the search process will ‘replay’ the first iteration for as long as needed until the number of candidates is small enough. This is False by default, which means that the last iteration may evaluate more than factor candidates. See Aggressive elimination of candidates for more details.
  
      @defaultValue `false`
     */
    aggressive_elimination?: boolean;
    /**
      Determines the cross-validation splitting strategy. Possible inputs for cv are:
  
      @defaultValue `5`
     */
    cv?: number;
    /**
      A single string (see The scoring parameter: defining model evaluation rules) or a callable (see Defining your scoring strategy from metric functions) to evaluate the predictions on the test set. If None, the estimator’s score method is used.
     */
    scoring?: string;
    /**
      If True, refit an estimator using the best found parameters on the whole dataset.
  
      The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this HalvingGridSearchCV instance.
  
      @defaultValue `true`
     */
    refit?: boolean;
    /**
      Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is np.nan.
     */
    error_score?: 'raise';
    /**
      If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.
  
      @defaultValue `false`
     */
    return_train_score?: boolean;
    /**
      Pseudo random number generator state used for subsampling the dataset when resources != 'n_samples'. Ignored otherwise. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Controls the verbosity: the higher, the more messages.
     */
    verbose?: number;
}
export interface HalvingGridSearchCVDecisionFunctionOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface HalvingGridSearchCVFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike;
    /**
      Target relative to X for classification or regression; None for unsupervised learning.
     */
    y?: ArrayLike;
    /**
      Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).
     */
    groups?: ArrayLike;
    /**
      Parameters passed to the fit method of the estimator.
     */
    fit_params?: any;
}
export interface HalvingGridSearchCVInverseTransformOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    Xt?: any;
}
export interface HalvingGridSearchCVPredictOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface HalvingGridSearchCVPredictLogProbaOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface HalvingGridSearchCVPredictProbaOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface HalvingGridSearchCVScoreOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Target relative to X for classification or regression; None for unsupervised learning.
     */
    y?: ArrayLike[];
}
export interface HalvingGridSearchCVScoreSamplesOptions {
    /**
      Data to predict on. Must fulfill input requirements of the underlying estimator.
     */
    X?: any;
}
export interface HalvingGridSearchCVTransformOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
//# sourceMappingURL=HalvingGridSearchCV.d.ts.map