import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Randomized search on hyper parameters.

  RandomizedSearchCV implements a “fit” and a “score” method. It also implements “score_samples”, “predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform” if they are implemented in the estimator used.

  The parameters of the estimator used to apply these methods are optimized by cross-validated search over parameter settings.

  In contrast to GridSearchCV, not all parameter values are tried out, but rather a fixed number of parameter settings is sampled from the specified distributions. The number of parameter settings that are tried is given by n_iter.

  If all parameters are presented as a list, sampling without replacement is performed. If at least one parameter is given as a distribution, sampling with replacement is used. It is highly recommended to use continuous distributions for continuous parameters.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html
 */
export declare class RandomizedSearchCV {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: RandomizedSearchCVOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Call decision_function on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports decision_function.
     */
    decision_function(opts: RandomizedSearchCVDecisionFunctionOptions): Promise<NDArray>;
    /**
      Run fit with all sets of parameters.
     */
    fit(opts: RandomizedSearchCVFitOptions): Promise<any>;
    /**
      Call inverse_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements inverse_transform and refit=True.
     */
    inverse_transform(opts: RandomizedSearchCVInverseTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Call predict on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict.
     */
    predict(opts: RandomizedSearchCVPredictOptions): Promise<NDArray>;
    /**
      Call predict_log_proba on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict_log_proba.
     */
    predict_log_proba(opts: RandomizedSearchCVPredictLogProbaOptions): Promise<NDArray>;
    /**
      Call predict_proba on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict_proba.
     */
    predict_proba(opts: RandomizedSearchCVPredictProbaOptions): Promise<NDArray>;
    /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.
     */
    score(opts: RandomizedSearchCVScoreOptions): Promise<number>;
    /**
      Call score_samples on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports score_samples.
     */
    score_samples(opts: RandomizedSearchCVScoreSamplesOptions): Promise<NDArray>;
    /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports transform and refit=True.
     */
    transform(opts: RandomizedSearchCVTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame.
  
      For instance the below given table
     */
    get cv_results_(): Promise<any>;
    /**
      Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.
  
      For multi-metric evaluation, this attribute is present only if refit is specified.
  
      See refit parameter for more information on allowed values.
     */
    get best_estimator_(): Promise<any>;
    /**
      Mean cross-validated score of the best_estimator.
  
      For multi-metric evaluation, this is not available if refit is False. See refit parameter for more information.
  
      This attribute is not available if refit is a function.
     */
    get best_score_(): Promise<number>;
    /**
      Parameter setting that gave the best results on the hold out data.
  
      For multi-metric evaluation, this is not available if refit is False. See refit parameter for more information.
     */
    get best_params_(): Promise<any>;
    /**
      The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.
  
      The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).
  
      For multi-metric evaluation, this is not available if refit is False. See refit parameter for more information.
     */
    get best_index_(): Promise<number>;
    /**
      Scorer function used on the held out data to choose the best parameters for the model.
  
      For multi-metric evaluation, this attribute holds the validated scoring dict which maps the scorer key to the scorer callable.
     */
    get scorer_(): Promise<any>;
    /**
      The number of cross-validation splits (folds/iterations).
     */
    get n_splits_(): Promise<number>;
    /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if refit is not False.
     */
    get refit_time_(): Promise<number>;
    /**
      Whether or not the scorers compute several metrics.
     */
    get multimetric_(): Promise<boolean>;
    /**
      Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface RandomizedSearchCVOptions {
    /**
      An object of that type is instantiated for each grid point. This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.
     */
    estimator?: any;
    /**
      Dictionary with parameters names (str) as keys and distributions or lists of parameters to try. Distributions must provide a rvs method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly. If a list of dicts is given, first a dict is sampled uniformly, and then a parameter is sampled using that dict as above.
     */
    param_distributions?: any;
    /**
      Number of parameter settings that are sampled. n_iter trades off runtime vs quality of the solution.
  
      @defaultValue `10`
     */
    n_iter?: number;
    /**
      Strategy to evaluate the performance of the cross-validated model on the test set.
  
      If scoring represents a single score, one can use:
     */
    scoring?: string | any[] | any;
    /**
      Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Refit an estimator using the best found parameters on the whole dataset.
  
      For multiple metric evaluation, this needs to be a str denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.
  
      Where there are considerations other than maximum score in choosing a best estimator, refit can be set to a function which returns the selected best_index_ given the cv_results. In that case, the best_estimator_ and best_params_ will be set according to the returned best_index_ while the best_score_ attribute will not be available.
  
      The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this RandomizedSearchCV instance.
  
      Also for multiple metric evaluation, the attributes best_index_, best_score_ and best_params_ will only be available if refit is set and all of them will be determined w.r.t this specific scorer.
  
      See scoring parameter to know more about multiple metric evaluation.
  
      @defaultValue `true`
     */
    refit?: boolean;
    /**
      Determines the cross-validation splitting strategy. Possible inputs for cv are:
     */
    cv?: number;
    /**
      Controls the verbosity: the higher, the more messages.
     */
    verbose?: number;
    /**
      Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:
  
      @defaultValue `'2*n_jobs'`
     */
    pre_dispatch?: string;
    /**
      Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. Pass an int for reproducible output across multiple function calls. See Glossary.
     */
    random_state?: number;
    /**
      Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error.
     */
    error_score?: 'raise';
    /**
      If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.
  
      @defaultValue `false`
     */
    return_train_score?: boolean;
}
export interface RandomizedSearchCVDecisionFunctionOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface RandomizedSearchCVFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Target relative to X for classification or regression; None for unsupervised learning.
     */
    y?: ArrayLike[];
    /**
      Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).
     */
    groups?: ArrayLike;
    /**
      Parameters passed to the fit method of the estimator.
  
      If a fit parameter is an array-like whose length is equal to num_samples then it will be split across CV groups along with X and y. For example, the sample_weight parameter is split because len(sample_weights) = len(X).
     */
    fit_params?: any;
}
export interface RandomizedSearchCVInverseTransformOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    Xt?: any;
}
export interface RandomizedSearchCVPredictOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface RandomizedSearchCVPredictLogProbaOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface RandomizedSearchCVPredictProbaOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface RandomizedSearchCVScoreOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Target relative to X for classification or regression; None for unsupervised learning.
     */
    y?: ArrayLike[];
}
export interface RandomizedSearchCVScoreSamplesOptions {
    /**
      Data to predict on. Must fulfill input requirements of the underlying estimator.
     */
    X?: any;
}
export interface RandomizedSearchCVTransformOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
//# sourceMappingURL=RandomizedSearchCV.d.ts.map