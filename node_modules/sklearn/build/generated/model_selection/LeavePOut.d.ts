import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Leave-P-Out cross-validator

  Provides train/test indices to split data in train/test sets. This results in testing on all distinct samples of size p, while the remaining n - p samples form the training set in each iteration.

  Note: LeavePOut(p) is NOT equivalent to KFold(n_splits=n_samples // p) which creates non-overlapping test sets.

  Due to the high number of iterations which grows combinatorically with the number of samples this cross-validation method can be very costly. For large datasets one should favor KFold, StratifiedKFold or ShuffleSplit.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.LeavePOut.html
 */
export declare class LeavePOut {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: LeavePOutOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Returns the number of splitting iterations in the cross-validator
     */
    get_n_splits(opts: LeavePOutGetNSplitsOptions): Promise<any>;
    /**
      Generate indices to split data into training and test set.
     */
    split(opts: LeavePOutSplitOptions): Promise<NDArray>;
}
export interface LeavePOutOptions {
    /**
      Size of the test sets. Must be strictly less than the number of samples.
     */
    p?: number;
}
export interface LeavePOutGetNSplitsOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Always ignored, exists for compatibility.
     */
    y?: any;
    /**
      Always ignored, exists for compatibility.
     */
    groups?: any;
}
export interface LeavePOutSplitOptions {
    /**
      Training data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      The target variable for supervised learning problems.
     */
    y?: ArrayLike;
    /**
      Group labels for the samples used while splitting the dataset into train/test set.
     */
    groups?: ArrayLike;
}
//# sourceMappingURL=LeavePOut.d.ts.map