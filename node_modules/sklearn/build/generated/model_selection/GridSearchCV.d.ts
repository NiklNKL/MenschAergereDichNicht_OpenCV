import { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types';
/**
  Exhaustive search over specified parameter values for an estimator.

  Important members are fit, predict.

  GridSearchCV implements a “fit” and a “score” method. It also implements “score_samples”, “predict”, “predict_proba”, “decision_function”, “transform” and “inverse_transform” if they are implemented in the estimator used.

  The parameters of the estimator used to apply these methods are optimized by cross-validated grid-search over a parameter grid.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html
 */
export declare class GridSearchCV {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: GridSearchCVOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Call decision_function on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports decision_function.
     */
    decision_function(opts: GridSearchCVDecisionFunctionOptions): Promise<NDArray>;
    /**
      Run fit with all sets of parameters.
     */
    fit(opts: GridSearchCVFitOptions): Promise<any>;
    /**
      Call inverse_transform on the estimator with the best found params.
  
      Only available if the underlying estimator implements inverse_transform and refit=True.
     */
    inverse_transform(opts: GridSearchCVInverseTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      Call predict on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict.
     */
    predict(opts: GridSearchCVPredictOptions): Promise<NDArray>;
    /**
      Call predict_log_proba on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict_log_proba.
     */
    predict_log_proba(opts: GridSearchCVPredictLogProbaOptions): Promise<NDArray>;
    /**
      Call predict_proba on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports predict_proba.
     */
    predict_proba(opts: GridSearchCVPredictProbaOptions): Promise<NDArray>;
    /**
      Return the score on the given data, if the estimator has been refit.
  
      This uses the score defined by scoring where provided, and the best_estimator_.score method otherwise.
     */
    score(opts: GridSearchCVScoreOptions): Promise<number>;
    /**
      Call score_samples on the estimator with the best found parameters.
  
      Only available if refit=True and the underlying estimator supports score_samples.
     */
    score_samples(opts: GridSearchCVScoreSamplesOptions): Promise<NDArray>;
    /**
      Call transform on the estimator with the best found parameters.
  
      Only available if the underlying estimator supports transform and refit=True.
     */
    transform(opts: GridSearchCVTransformOptions): Promise<NDArray | SparseMatrix[]>;
    /**
      A dict with keys as column headers and values as columns, that can be imported into a pandas DataFrame.
  
      For instance the below given table
     */
    get cv_results_(): Promise<any>;
    /**
      Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if refit=False.
  
      See refit parameter for more information on allowed values.
     */
    get best_estimator_(): Promise<any>;
    /**
      Mean cross-validated score of the best_estimator
  
      For multi-metric evaluation, this is present only if refit is specified.
  
      This attribute is not available if refit is a function.
     */
    get best_score_(): Promise<number>;
    /**
      Parameter setting that gave the best results on the hold out data.
  
      For multi-metric evaluation, this is present only if refit is specified.
     */
    get best_params_(): Promise<any>;
    /**
      The index (of the cv_results_ arrays) which corresponds to the best candidate parameter setting.
  
      The dict at search.cv_results_['params'][search.best_index_] gives the parameter setting for the best model, that gives the highest mean score (search.best_score_).
  
      For multi-metric evaluation, this is present only if refit is specified.
     */
    get best_index_(): Promise<number>;
    /**
      Scorer function used on the held out data to choose the best parameters for the model.
  
      For multi-metric evaluation, this attribute holds the validated scoring dict which maps the scorer key to the scorer callable.
     */
    get scorer_(): Promise<any>;
    /**
      The number of cross-validation splits (folds/iterations).
     */
    get n_splits_(): Promise<number>;
    /**
      Seconds used for refitting the best model on the whole dataset.
  
      This is present only if refit is not False.
     */
    get refit_time_(): Promise<number>;
    /**
      Whether or not the scorers compute several metrics.
     */
    get multimetric_(): Promise<boolean>;
    /**
      Names of features seen during fit. Only defined if best_estimator_ is defined (see the documentation for the refit parameter for more details) and that best_estimator_ exposes feature_names_in_ when fit.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface GridSearchCVOptions {
    /**
      This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.
     */
    estimator?: any;
    /**
      Dictionary with parameters names (str) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.
     */
    param_grid?: any;
    /**
      Strategy to evaluate the performance of the cross-validated model on the test set.
  
      If scoring represents a single score, one can use:
     */
    scoring?: string | any[] | any;
    /**
      Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
     */
    n_jobs?: number;
    /**
      Refit an estimator using the best found parameters on the whole dataset.
  
      For multiple metric evaluation, this needs to be a str denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.
  
      Where there are considerations other than maximum score in choosing a best estimator, refit can be set to a function which returns the selected best_index_ given cv_results_. In that case, the best_estimator_ and best_params_ will be set according to the returned best_index_ while the best_score_ attribute will not be available.
  
      The refitted estimator is made available at the best_estimator_ attribute and permits using predict directly on this GridSearchCV instance.
  
      Also for multiple metric evaluation, the attributes best_index_, best_score_ and best_params_ will only be available if refit is set and all of them will be determined w.r.t this specific scorer.
  
      See scoring parameter to know more about multiple metric evaluation.
  
      See Custom refit strategy of a grid search with cross-validation to see how to design a custom selection strategy using a callable via refit.
  
      @defaultValue `true`
     */
    refit?: boolean;
    /**
      Determines the cross-validation splitting strategy. Possible inputs for cv are:
     */
    cv?: number;
    /**
      Controls the verbosity: the higher, the more messages.
     */
    verbose?: number;
    /**
      Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:
  
      @defaultValue `'2*n_jobs'`
     */
    pre_dispatch?: string;
    /**
      Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error.
     */
    error_score?: 'raise';
    /**
      If False, the cv_results_ attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.
  
      @defaultValue `false`
     */
    return_train_score?: boolean;
}
export interface GridSearchCVDecisionFunctionOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface GridSearchCVFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Target relative to X for classification or regression; None for unsupervised learning.
     */
    y?: ArrayLike[];
    /**
      Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” cv instance (e.g., GroupKFold).
     */
    groups?: ArrayLike;
    /**
      Parameters passed to the fit method of the estimator.
  
      If a fit parameter is an array-like whose length is equal to num_samples then it will be split across CV groups along with X and y. For example, the sample_weight parameter is split because len(sample_weights) = len(X).
     */
    fit_params?: any;
}
export interface GridSearchCVInverseTransformOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    Xt?: any;
}
export interface GridSearchCVPredictOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface GridSearchCVPredictLogProbaOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface GridSearchCVPredictProbaOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
export interface GridSearchCVScoreOptions {
    /**
      Input data, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Target relative to X for classification or regression; None for unsupervised learning.
     */
    y?: ArrayLike[];
}
export interface GridSearchCVScoreSamplesOptions {
    /**
      Data to predict on. Must fulfill input requirements of the underlying estimator.
     */
    X?: any;
}
export interface GridSearchCVTransformOptions {
    /**
      Must fulfill the input assumptions of the underlying estimator.
     */
    X?: any;
}
//# sourceMappingURL=GridSearchCV.d.ts.map