import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Quadratic Discriminant Analysis.

  A classifier with a quadratic decision boundary, generated by fitting class conditional densities to the data and using Bayesâ€™ rule.

  The model fits a Gaussian density to each class.

  @see https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.html
 */
export declare class QuadraticDiscriminantAnalysis {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: QuadraticDiscriminantAnalysisOptions);
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Apply decision function to an array of samples.
  
      The decision function is equal (up to a constant factor) to the log-posterior of the model, i.e. log p(y = k | x). In a binary classification setting this instead corresponds to the difference log p(y = 1 | x) - log p(y = 0 | x). See Mathematical formulation of the LDA and QDA classifiers.
     */
    decision_function(opts: QuadraticDiscriminantAnalysisDecisionFunctionOptions): Promise<NDArray>;
    /**
      Fit the model according to the given training data and parameters.
     */
    fit(opts: QuadraticDiscriminantAnalysisFitOptions): Promise<any>;
    /**
      Perform classification on an array of test vectors X.
  
      The predicted class C for each sample in X is returned.
     */
    predict(opts: QuadraticDiscriminantAnalysisPredictOptions): Promise<NDArray>;
    /**
      Return log of posterior probabilities of classification.
     */
    predict_log_proba(opts: QuadraticDiscriminantAnalysisPredictLogProbaOptions): Promise<NDArray[]>;
    /**
      Return posterior probabilities of classification.
     */
    predict_proba(opts: QuadraticDiscriminantAnalysisPredictProbaOptions): Promise<NDArray[]>;
    /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
    score(opts: QuadraticDiscriminantAnalysisScoreOptions): Promise<number>;
    /**
      For each class, gives the covariance matrix estimated using the samples of that class. The estimations are unbiased. Only present if store_covariance is True.
     */
    get covariance_(): Promise<any[]>;
    /**
      Class-wise means.
     */
    get means_(): Promise<ArrayLike[]>;
    /**
      Class priors (sum to 1).
     */
    get priors_(): Promise<ArrayLike>;
    /**
      For each class k an array of shape (n_features, n_k), where n_k = min(n_features, number of elements in class k) It is the rotation of the Gaussian distribution, i.e. its principal axis. It corresponds to V, the matrix of eigenvectors coming from the SVD of Xk = U S Vt where Xk is the centered matrix of samples from class k.
     */
    get rotations_(): Promise<any[]>;
    /**
      For each class, contains the scaling of the Gaussian distributions along its principal axes, i.e. the variance in the rotated coordinate system. It corresponds to S^2 / (n_samples - 1), where S is the diagonal matrix of singular values from the SVD of Xk, where Xk is the centered matrix of samples from class k.
     */
    get scalings_(): Promise<any[]>;
    /**
      Unique class labels.
     */
    get classes_(): Promise<NDArray>;
    /**
      Number of features seen during fit.
     */
    get n_features_in_(): Promise<number>;
    /**
      Names of features seen during fit. Defined only when X has feature names that are all strings.
     */
    get feature_names_in_(): Promise<NDArray>;
}
export interface QuadraticDiscriminantAnalysisOptions {
    /**
      Class priors. By default, the class proportions are inferred from the training data.
     */
    priors?: ArrayLike;
    /**
      Regularizes the per-class covariance estimates by transforming S2 as S2 = (1 - reg_param) * S2 + reg_param * np.eye(n_features), where S2 corresponds to the scaling_ attribute of a given class.
  
      @defaultValue `0`
     */
    reg_param?: number;
    /**
      If True, the class covariance matrices are explicitly computed and stored in the self.covariance_ attribute.
  
      @defaultValue `false`
     */
    store_covariance?: boolean;
    /**
      Absolute threshold for a singular value to be considered significant, used to estimate the rank of Xk where Xk is the centered matrix of samples in class k. This parameter does not affect the predictions. It only controls a warning that is raised when features are considered to be colinear.
  
      @defaultValue `0.0001`
     */
    tol?: number;
}
export interface QuadraticDiscriminantAnalysisDecisionFunctionOptions {
    /**
      Array of samples (test vectors).
     */
    X?: ArrayLike[];
}
export interface QuadraticDiscriminantAnalysisFitOptions {
    /**
      Training vector, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
    /**
      Target values (integers).
     */
    y?: ArrayLike;
}
export interface QuadraticDiscriminantAnalysisPredictOptions {
    /**
      Vector to be scored, where n_samples is the number of samples and n_features is the number of features.
     */
    X?: ArrayLike[];
}
export interface QuadraticDiscriminantAnalysisPredictLogProbaOptions {
    /**
      Array of samples/test vectors.
     */
    X?: ArrayLike[];
}
export interface QuadraticDiscriminantAnalysisPredictProbaOptions {
    /**
      Array of samples/test vectors.
     */
    X?: ArrayLike[];
}
export interface QuadraticDiscriminantAnalysisScoreOptions {
    /**
      Test samples.
     */
    X?: ArrayLike[];
    /**
      True labels for X.
     */
    y?: ArrayLike;
    /**
      Sample weights.
     */
    sample_weight?: ArrayLike;
}
//# sourceMappingURL=QuadraticDiscriminantAnalysis.d.ts.map